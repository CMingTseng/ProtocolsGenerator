# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.directChild

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 2.599 ns/op
# Warmup Iteration   2: 2.582 ns/op
# Warmup Iteration   3: 2.330 ns/op
# Warmup Iteration   4: 2.289 ns/op
# Warmup Iteration   5: 2.316 ns/op
# Warmup Iteration   6: 2.302 ns/op
# Warmup Iteration   7: 2.269 ns/op
# Warmup Iteration   8: 2.307 ns/op
# Warmup Iteration   9: 2.276 ns/op
# Warmup Iteration  10: 2.284 ns/op
# Warmup Iteration  11: 2.282 ns/op
# Warmup Iteration  12: 2.317 ns/op
# Warmup Iteration  13: 2.309 ns/op
# Warmup Iteration  14: 2.284 ns/op
# Warmup Iteration  15: 2.284 ns/op
# Warmup Iteration  16: 2.325 ns/op
# Warmup Iteration  17: 2.570 ns/op
# Warmup Iteration  18: 2.603 ns/op
# Warmup Iteration  19: 2.617 ns/op
# Warmup Iteration  20: 2.577 ns/op
Iteration   1: 2.577 ns/op
Iteration   2: 2.570 ns/op
Iteration   3: 2.574 ns/op
Iteration   4: 2.573 ns/op
Iteration   5: 2.577 ns/op
Iteration   6: 2.574 ns/op
Iteration   7: 2.574 ns/op
Iteration   8: 2.576 ns/op
Iteration   9: 2.575 ns/op
Iteration  10: 2.573 ns/op
Iteration  11: 2.576 ns/op
Iteration  12: 2.575 ns/op
Iteration  13: 2.577 ns/op
Iteration  14: 2.575 ns/op
Iteration  15: 2.572 ns/op
Iteration  16: 2.578 ns/op
Iteration  17: 2.578 ns/op
Iteration  18: 2.574 ns/op
Iteration  19: 2.577 ns/op
Iteration  20: 2.577 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "directChild":
  2.575 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.570, 2.575, 2.578), stdev = 0.002
  CI (99.9%): [2.573, 2.577] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 155382 total address lines.
Perf output processed (skipped 20.108 seconds):
 Column 1: cycles (21962 events)
 Column 2: instructions (21948 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub, version 478 (73 bytes) 

                      0x00007f57c4170b10: mov    0x30(%rsp),%r9
                      0x00007f57c4170b15: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f57c4170c4d
                      0x00007f57c4170b1d: mov    $0x1,%ebp
                      0x00007f57c4170b22: test   %r11d,%r11d
                  ╭   0x00007f57c4170b25: jne    0x00007f57c4170b84  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@28 (line 184)
                  │   0x00007f57c4170b27: nopw   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@13 (line 182)
  2.76%    1.93%  │↗  0x00007f57c4170b30: mov    0x40(%rsp),%r10
                  ││  0x00007f57c4170b35: mov    0x10(%r10),%r8d    ;*getfield childInstance
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directChild@1 (line 83)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@15 (line 182)
  6.86%    7.65%  ││  0x00007f57c4170b39: mov    0x8(%r12,%r8,8),%r11d  ; implicit exception: dispatches to 0x00007f57c4170c09
  7.21%    7.83%  ││  0x00007f57c4170b3e: cmp    $0xf80179e3,%r11d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooChildA&apos;)}
                  ││  0x00007f57c4170b45: jne    0x00007f57c4170bbd
  4.64%    4.07%  ││  0x00007f57c4170b47: lea    (%r12,%r8,8),%r10  ;*invokevirtual bar
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directChild@4 (line 83)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@15 (line 182)
                  ││  0x00007f57c4170b4b: mov    0xc(%r10),%r10d    ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@1 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directChild@4 (line 83)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@15 (line 182)
  5.01%    4.75%  ││  0x00007f57c4170b4f: test   %r10d,%r10d
                  ││  0x00007f57c4170b52: je     0x00007f57c4170bae  ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directChild@4 (line 83)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@15 (line 182)
  0.28%    0.35%  ││  0x00007f57c4170b54: mov    %r9,0x30(%rsp)
  4.20%    4.07%  ││  0x00007f57c4170b59: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@1 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directChild@4 (line 83)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@15 (line 182)
                  ││  0x00007f57c4170b5d: mov    $0x2a,%edx
  5.17%    4.30%  ││  0x00007f57c4170b62: nop    
  0.31%    0.27%  ││  0x00007f57c4170b63: callq  0x00007f57c3fb4d60  ; OopMap{[48]=Oop [56]=Oop [64]=Oop off=200}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directChild@4 (line 83)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  7.09%    9.01%  ││  0x00007f57c4170b68: mov    0x30(%rsp),%r9
  2.60%    2.21%  ││  0x00007f57c4170b6d: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@25 (line 184)
                  ││  0x00007f57c4170b75: add    $0x1,%rbp          ; OopMap{r9=Oop [56]=Oop [64]=Oop off=217}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@28 (line 184)
  6.94%    7.57%  ││  0x00007f57c4170b79: test   %eax,0x16623481(%rip)        # 0x00007f57da794000
                  ││                                                ;   {poll}
                  ││  0x00007f57c4170b7f: test   %r11d,%r11d
                  │╰  0x00007f57c4170b82: je     0x00007f57c4170b30  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f57c4170b84: mov    $0x7f57d92daf60,%r10
                      0x00007f57c4170b8e: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub@32 (line 185)
                      0x00007f57c4170b91: mov    0x38(%rsp),%r10
....................................................................................................
 53.06%   54.01%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 456 (45 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f57c41688a0: mov    0x8(%rsi),%r10d
                     0x00007f57c41688a4: shl    $0x3,%r10
                     0x00007f57c41688a8: cmp    %r10,%rax
                     0x00007f57c41688ab: jne    0x00007f57c3fb4b60  ;   {runtime_call}
                     0x00007f57c41688b1: xchg   %ax,%ax
                     0x00007f57c41688b4: nopl   0x0(%rax,%rax,1)
                     0x00007f57c41688bc: xchg   %ax,%ax
                   [Verified Entry Point]
  4.25%    3.41%     0x00007f57c41688c0: mov    %eax,-0x14000(%rsp)
  5.44%    4.92%     0x00007f57c41688c7: push   %rbp
  4.25%    3.42%     0x00007f57c41688c8: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  4.83%    4.81%     0x00007f57c41688cc: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  5.23%    5.83%     0x00007f57c41688d3: mov    %edx,%r8d
  3.40%    3.24%     0x00007f57c41688d6: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  2.86%    3.09%     0x00007f57c41688dd: mov    %edx,%r9d
  3.47%    3.18%     0x00007f57c41688e0: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  2.09%    2.58%     0x00007f57c41688e3: cmp    %r8d,%r9d
                  ╭  0x00007f57c41688e6: je     0x00007f57c41688f4  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  7.09%    7.77%  │  0x00007f57c41688e8: add    $0x20,%rsp
                  │  0x00007f57c41688ec: pop    %rbp
  2.58%    2.36%  │  0x00007f57c41688ed: test   %eax,0x1662b70d(%rip)        # 0x00007f57da794000
                  │                                                ;   {poll_return}
                  │  0x00007f57c41688f3: retq   
                  ↘  0x00007f57c41688f4: mov    %rsi,%rbp
                     0x00007f57c41688f7: mov    %edx,(%rsp)
                     0x00007f57c41688fa: mov    %r9d,0x4(%rsp)
                     0x00007f57c41688ff: mov    %r8d,0x8(%rsp)
                     0x00007f57c4168904: mov    $0xffffff65,%esi
                     0x00007f57c4168909: xchg   %ax,%ax
                     0x00007f57c416890b: callq  0x00007f57c3f73ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
....................................................................................................
 45.49%   44.61%  <total for region 2>

....[Hottest Regions]...............................................................................
 53.06%   54.01%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub, version 478 (73 bytes) 
 45.49%   44.61%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 456 (45 bytes) 
  0.52%    0.51%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.06%    0.06%   [kernel.kallsyms]  [unknown] (40 bytes) 
  0.03%    0.00%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (9 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (2 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (18 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.04%         C1, level 3  java.lang.reflect.ReflectAccess::copyField, version 541 (43 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (25 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.00%   [kernel.kallsyms]  [unknown] (25 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.00%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (27 bytes) 
  0.61%    0.65%  <...other 199 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 53.06%   54.01%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directChild_jmhTest::directChild_avgt_jmhStub, version 478 
 45.49%   44.61%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 456 
  1.11%    1.03%   [kernel.kallsyms]  [unknown] 
  0.15%    0.16%         C1, level 3  java.lang.reflect.ReflectAccess::copyField, version 541 
  0.01%    0.00%        libc-2.24.so  _IO_fwrite+0xde 
  0.01%    0.00%        libc-2.24.so  strlen+0x26 
  0.01%    0.00%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x2e 
  0.01%    0.00%        libc-2.24.so  _IO_file_xsputn@@GLIBC_2.2.5+0x72 
  0.01%                 libc-2.24.so  __strchr_sse2+0x4f 
  0.01%                 libc-2.24.so  _IO_default_xsputn+0xb 
  0.01%    0.01%        libc-2.24.so  _IO_old_init+0x42 
  0.00%    0.00%        libc-2.24.so  _IO_fwrite+0x59 
  0.00%                 libc-2.24.so  __memmove_sse2_unaligned_erms+0x166 
  0.00%    0.00%        libc-2.24.so  _IO_fwrite+0x161 
  0.00%               hsdis-amd64.so  get_valid_dis386+0x6c7 
  0.00%                  interpreter  method entry point (kind = zerolocals)  
  0.00%                 libc-2.24.so  vfprintf+0xb03 
  0.00%                 libc-2.24.so  vfprintf+0xe4 
  0.00%                  interpreter  invokevirtual  182 invokevirtual  
  0.00%                  interpreter  aload_1  43 aload_1  
  0.08%    0.04%  <...other 17 warm methods...>
....................................................................................................
100.00%   99.90%  <totals>

....[Distribution by Source]........................................................................
 98.55%   98.62%         C2, level 4
  1.11%    1.03%   [kernel.kallsyms]
  0.16%    0.16%         C1, level 3
  0.10%    0.13%        libc-2.24.so
  0.02%    0.03%      hsdis-amd64.so
  0.02%                  interpreter
  0.02%    0.02%           libjvm.so
  0.01%           libpthread-2.24.so
....................................................................................................
100.00%   99.99%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.directClass

# Run progress: 5.00% complete, ETA 00:13:38
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 2.602 ns/op
# Warmup Iteration   2: 2.309 ns/op
# Warmup Iteration   3: 2.655 ns/op
# Warmup Iteration   4: 2.602 ns/op
# Warmup Iteration   5: 2.342 ns/op
# Warmup Iteration   6: 2.329 ns/op
# Warmup Iteration   7: 2.342 ns/op
# Warmup Iteration   8: 2.299 ns/op
# Warmup Iteration   9: 2.314 ns/op
# Warmup Iteration  10: 2.329 ns/op
# Warmup Iteration  11: 2.341 ns/op
# Warmup Iteration  12: 2.324 ns/op
# Warmup Iteration  13: 2.304 ns/op
# Warmup Iteration  14: 2.351 ns/op
# Warmup Iteration  15: 2.284 ns/op
# Warmup Iteration  16: 2.339 ns/op
# Warmup Iteration  17: 2.431 ns/op
# Warmup Iteration  18: 2.637 ns/op
# Warmup Iteration  19: 2.430 ns/op
# Warmup Iteration  20: 2.432 ns/op
Iteration   1: 2.345 ns/op
Iteration   2: 2.320 ns/op
Iteration   3: 2.477 ns/op
Iteration   4: 2.554 ns/op
Iteration   5: 2.509 ns/op
Iteration   6: 2.360 ns/op
Iteration   7: 2.414 ns/op
Iteration   8: 2.476 ns/op
Iteration   9: 2.291 ns/op
Iteration  10: 2.287 ns/op
Iteration  11: 2.304 ns/op
Iteration  12: 2.335 ns/op
Iteration  13: 2.379 ns/op
Iteration  14: 2.330 ns/op
Iteration  15: 2.288 ns/op
Iteration  16: 2.471 ns/op
Iteration  17: 2.392 ns/op
Iteration  18: 2.283 ns/op
Iteration  19: 2.315 ns/op
Iteration  20: 2.309 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "directClass":
  2.372 ±(99.9%) 0.073 ns/op [Average]
  (min, avg, max) = (2.283, 2.372, 2.554), stdev = 0.084
  CI (99.9%): [2.299, 2.445] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 154080 total address lines.
Perf output processed (skipped 20.133 seconds):
 Column 1: cycles (21856 events)
 Column 2: instructions (21805 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub, version 478 (82 bytes) 

                      0x00007f1745201590: mov    0x30(%rsp),%r9
                      0x00007f1745201595: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f17452016cd
                      0x00007f174520159d: mov    $0x1,%ebp
                      0x00007f17452015a2: test   %r11d,%r11d
                  ╭   0x00007f17452015a5: jne    0x00007f1745201604  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@28 (line 184)
                  │   0x00007f17452015a7: nopw   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@13 (line 182)
  3.95%    4.82%  │↗  0x00007f17452015b0: mov    0x40(%rsp),%r10
                  ││  0x00007f17452015b5: mov    0xc(%r10),%r8d     ;*getfield classInstance
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directClass@1 (line 78)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@15 (line 182)
  6.51%    7.52%  ││  0x00007f17452015b9: mov    0x8(%r12,%r8,8),%r11d  ; implicit exception: dispatches to 0x00007f1745201689
  0.26%    0.29%  ││  0x00007f17452015be: cmp    $0xf80179a5,%r11d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooClassA&apos;)}
  0.00%           ││  0x00007f17452015c5: jne    0x00007f174520163d
  4.67%    5.32%  ││  0x00007f17452015c7: lea    (%r12,%r8,8),%r10  ;*invokevirtual bar
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directClass@4 (line 78)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@15 (line 182)
                  ││  0x00007f17452015cb: mov    0xc(%r10),%r10d    ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@1 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directClass@4 (line 78)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@15 (line 182)
  5.93%    7.09%  ││  0x00007f17452015cf: test   %r10d,%r10d
  0.00%           ││  0x00007f17452015d2: je     0x00007f174520162e  ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@6 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directClass@4 (line 78)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@15 (line 182)
  0.81%    0.69%  ││  0x00007f17452015d4: mov    %r9,0x30(%rsp)
  3.83%    4.82%  ││  0x00007f17452015d9: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@1 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directClass@4 (line 78)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@15 (line 182)
                  ││  0x00007f17452015dd: mov    $0x2a,%edx
  5.95%    6.35%  ││  0x00007f17452015e2: nop    
  0.81%    0.62%  ││  0x00007f17452015e3: callq  0x00007f1745045d60  ; OopMap{[48]=Oop [56]=Oop [64]=Oop off=200}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@6 (line 13)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directClass@4 (line 78)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  7.08%    8.09%  ││  0x00007f17452015e8: mov    0x30(%rsp),%r9
  4.40%    4.12%  ││  0x00007f17452015ed: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@25 (line 184)
           0.00%  ││  0x00007f17452015f5: add    $0x1,%rbp          ; OopMap{r9=Oop [56]=Oop [64]=Oop off=217}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@28 (line 184)
  6.47%    5.96%  ││  0x00007f17452015f9: test   %eax,0x16e98a01(%rip)        # 0x00007f175c09a000
                  ││                                                ;   {poll}
  0.02%           ││  0x00007f17452015ff: test   %r11d,%r11d
  0.00%           │╰  0x00007f1745201602: je     0x00007f17452015b0  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f1745201604: mov    $0x7f175abe0f60,%r10
                      0x00007f174520160e: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@32 (line 185)
                      0x00007f1745201611: mov    0x38(%rsp),%r10
                      0x00007f1745201616: mov    %rbp,0x18(%r10)    ;*putfield measuredOps
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@47 (line 187)
                      0x00007f174520161a: mov    %rax,0x30(%r10)    ;*putfield stopTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub@35 (line 185)
                      0x00007f174520161e: mov    %r12,0x20(%r10)    ;*invokevirtual directClass
....................................................................................................
 50.70%   55.69%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 438 (45 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f17451ef9e0: mov    0x8(%rsi),%r10d
                     0x00007f17451ef9e4: shl    $0x3,%r10
                     0x00007f17451ef9e8: cmp    %r10,%rax
                     0x00007f17451ef9eb: jne    0x00007f1745045b60  ;   {runtime_call}
                     0x00007f17451ef9f1: xchg   %ax,%ax
                     0x00007f17451ef9f4: nopl   0x0(%rax,%rax,1)
                     0x00007f17451ef9fc: xchg   %ax,%ax
                   [Verified Entry Point]
  3.70%    3.00%     0x00007f17451efa00: mov    %eax,-0x14000(%rsp)
  6.90%    5.33%     0x00007f17451efa07: push   %rbp
  3.81%    2.26%     0x00007f17451efa08: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  5.87%    4.39%     0x00007f17451efa0c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  4.09%    4.40%     0x00007f17451efa13: mov    %edx,%r8d
  3.39%    2.31%     0x00007f17451efa16: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  2.59%    2.71%     0x00007f17451efa1d: mov    %edx,%r9d
  4.73%    5.15%     0x00007f17451efa20: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  1.92%    2.15%     0x00007f17451efa23: cmp    %r8d,%r9d
                  ╭  0x00007f17451efa26: je     0x00007f17451efa34  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  6.09%    5.91%  │  0x00007f17451efa28: add    $0x20,%rsp
                  │  0x00007f17451efa2c: pop    %rbp
  4.37%    5.02%  │  0x00007f17451efa2d: test   %eax,0x16eaa5cd(%rip)        # 0x00007f175c09a000
                  │                                                ;   {poll_return}
                  │  0x00007f17451efa33: retq   
                  ↘  0x00007f17451efa34: mov    %rsi,%rbp
                     0x00007f17451efa37: mov    %edx,(%rsp)
                     0x00007f17451efa3a: mov    %r9d,0x4(%rsp)
                     0x00007f17451efa3f: mov    %r8d,0x8(%rsp)
                     0x00007f17451efa44: mov    $0xffffff65,%esi
                     0x00007f17451efa49: xchg   %ax,%ax
                     0x00007f17451efa4b: callq  0x00007f1745004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
....................................................................................................
 47.46%   42.63%  <total for region 2>

....[Hottest Regions]...............................................................................
 50.70%   55.69%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub, version 478 (82 bytes) 
 47.46%   42.63%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 438 (45 bytes) 
  0.83%    0.82%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.03%    0.01%   [kernel.kallsyms]  [unknown] (26 bytes) 
  0.03%    0.03%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.03%    0.02%   [kernel.kallsyms]  [unknown] (42 bytes) 
  0.03%    0.00%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (9 bytes) 
  0.02%    0.01%         C1, level 3  java.io.DataOutputStream::writeUTF, version 535 (28 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (23 bytes) 
  0.02%    0.01%         C1, level 3  java.io.DataOutputStream::writeUTF, version 535 (23 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (37 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (9 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (20 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.00%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x15d (36 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (5 bytes) 
  0.70%    0.69%  <...other 235 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.70%   55.69%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directClass_jmhTest::directClass_avgt_jmhStub, version 478 
 47.46%   42.63%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 438 
  1.48%    1.24%   [kernel.kallsyms]  [unknown] 
  0.22%    0.25%         C1, level 3  java.io.DataOutputStream::writeUTF, version 535 
  0.01%    0.00%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x15d 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.01%    0.01%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x38 
  0.01%                 libc-2.24.so  __GI___libc_write+0x2d 
  0.00%    0.00%        libc-2.24.so  _IO_fflush+0xf1 
  0.00%                 libc-2.24.so  _IO_fwrite+0x59 
  0.00%                  interpreter  method entry point (kind = native)  
  0.00%    0.00%        libc-2.24.so  _itoa_word+0x61 
  0.00%                  interpreter  method entry point (kind = accessor)  
  0.00%                 libc-2.24.so  __strcpy_sse2_unaligned+0x2d9 
  0.00%                 libc-2.24.so  _itoa_word+0xb5 
  0.00%    0.00%        libc-2.24.so  strlen+0x36 
  0.00%                 libc-2.24.so  __vsnprintf_chk+0x47 
  0.00%                    libjvm.so  _ZN9xmlStream10write_textEPKcm+0x5 
  0.00%                 libc-2.24.so  _IO_file_xsputn@@GLIBC_2.2.5+0x20 
  0.00%                 libc-2.24.so  _IO_file_xsputn@@GLIBC_2.2.5+0x52 
  0.05%    0.02%  <...other 12 warm methods...>
....................................................................................................
100.00%   99.86%  <totals>

....[Distribution by Source]........................................................................
 98.16%   98.33%         C2, level 4
  1.48%    1.24%   [kernel.kallsyms]
  0.22%    0.25%         C1, level 3
  0.08%    0.16%        libc-2.24.so
  0.03%    0.01%           libjvm.so
  0.02%                  interpreter
  0.01%    0.00%  libpthread-2.24.so
  0.00%               perf-25937.map
....................................................................................................
100.00%   99.99%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.directInterfaceImpl

# Run progress: 10.00% complete, ETA 00:12:52
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 2.610 ns/op
# Warmup Iteration   2: 2.570 ns/op
# Warmup Iteration   3: 2.285 ns/op
# Warmup Iteration   4: 2.317 ns/op
# Warmup Iteration   5: 2.286 ns/op
# Warmup Iteration   6: 2.284 ns/op
# Warmup Iteration   7: 2.282 ns/op
# Warmup Iteration   8: 2.283 ns/op
# Warmup Iteration   9: 2.281 ns/op
# Warmup Iteration  10: 2.280 ns/op
# Warmup Iteration  11: 2.282 ns/op
# Warmup Iteration  12: 2.312 ns/op
# Warmup Iteration  13: 2.311 ns/op
# Warmup Iteration  14: 2.307 ns/op
# Warmup Iteration  15: 2.293 ns/op
# Warmup Iteration  16: 2.309 ns/op
# Warmup Iteration  17: 2.284 ns/op
# Warmup Iteration  18: 2.308 ns/op
# Warmup Iteration  19: 2.283 ns/op
# Warmup Iteration  20: 2.283 ns/op
Iteration   1: 2.287 ns/op
Iteration   2: 2.288 ns/op
Iteration   3: 2.321 ns/op
Iteration   4: 2.301 ns/op
Iteration   5: 2.336 ns/op
Iteration   6: 2.312 ns/op
Iteration   7: 2.284 ns/op
Iteration   8: 2.282 ns/op
Iteration   9: 2.344 ns/op
Iteration  10: 2.282 ns/op
Iteration  11: 2.285 ns/op
Iteration  12: 2.286 ns/op
Iteration  13: 2.282 ns/op
Iteration  14: 2.283 ns/op
Iteration  15: 2.285 ns/op
Iteration  16: 2.308 ns/op
Iteration  17: 2.340 ns/op
Iteration  18: 2.283 ns/op
Iteration  19: 2.287 ns/op
Iteration  20: 2.284 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "directInterfaceImpl":
  2.298 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (2.282, 2.298, 2.344), stdev = 0.021
  CI (99.9%): [2.280, 2.316] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 151133 total address lines.
Perf output processed (skipped 20.101 seconds):
 Column 1: cycles (21899 events)
 Column 2: instructions (21847 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub, version 472 (82 bytes) 

                      0x00007f4d151f9f50: mov    0x30(%rsp),%r9
                      0x00007f4d151f9f55: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f4d151fa08d
                      0x00007f4d151f9f5d: mov    $0x1,%ebp
                      0x00007f4d151f9f62: test   %r11d,%r11d
                  ╭   0x00007f4d151f9f65: jne    0x00007f4d151f9fc4  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@28 (line 184)
                  │   0x00007f4d151f9f67: nopw   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@13 (line 182)
  4.34%    5.14%  │↗  0x00007f4d151f9f70: mov    0x40(%rsp),%r10
  0.00%           ││  0x00007f4d151f9f75: mov    0x14(%r10),%r8d    ;*getfield interfaceInstanceImpl
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceImpl@1 (line 93)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@15 (line 182)
  6.22%    7.78%  ││  0x00007f4d151f9f79: mov    0x8(%r12,%r8,8),%r11d  ; implicit exception: dispatches to 0x00007f4d151fa049
  0.09%    0.12%  ││  0x00007f4d151f9f7e: cmp    $0xf8019205,%r11d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooImplA&apos;)}
                  ││  0x00007f4d151f9f85: jne    0x00007f4d151f9ffd
  4.79%    5.70%  ││  0x00007f4d151f9f87: lea    (%r12,%r8,8),%r10  ;*invokeinterface bar
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceImpl@4 (line 93)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││  0x00007f4d151f9f8b: mov    0xc(%r10),%r10d    ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@1 (line 14)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceImpl@4 (line 93)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@15 (line 182)
  6.59%    7.63%  ││  0x00007f4d151f9f8f: test   %r10d,%r10d
                  ││  0x00007f4d151f9f92: je     0x00007f4d151f9fee  ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceImpl@4 (line 93)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.32%    0.43%  ││  0x00007f4d151f9f94: mov    %r9,0x30(%rsp)
  4.39%    5.10%  ││  0x00007f4d151f9f99: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@1 (line 14)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceImpl@4 (line 93)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.00%           ││  0x00007f4d151f9f9d: mov    $0x2a,%edx
  6.50%    6.82%  ││  0x00007f4d151f9fa2: nop    
  0.38%    0.38%  ││  0x00007f4d151f9fa3: callq  0x00007f4d15045d60  ; OopMap{[48]=Oop [56]=Oop [64]=Oop off=200}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceImpl@4 (line 93)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  6.55%    7.63%  ││  0x00007f4d151f9fa8: mov    0x30(%rsp),%r9
  4.45%    4.42%  ││  0x00007f4d151f9fad: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@25 (line 184)
  0.01%           ││  0x00007f4d151f9fb5: add    $0x1,%rbp          ; OopMap{r9=Oop [56]=Oop [64]=Oop off=217}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@28 (line 184)
  6.37%    6.36%  ││  0x00007f4d151f9fb9: test   %eax,0x18064041(%rip)        # 0x00007f4d2d25e000
                  ││                                                ;   {poll}
  0.00%           ││  0x00007f4d151f9fbf: test   %r11d,%r11d
  0.00%           │╰  0x00007f4d151f9fc2: je     0x00007f4d151f9f70  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f4d151f9fc4: mov    $0x7f4d2bda4f60,%r10
                      0x00007f4d151f9fce: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@32 (line 185)
                      0x00007f4d151f9fd1: mov    0x38(%rsp),%r10
                      0x00007f4d151f9fd6: mov    %rbp,0x18(%r10)    ;*putfield measuredOps
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@47 (line 187)
                      0x00007f4d151f9fda: mov    %rax,0x30(%r10)    ;*putfield stopTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub@35 (line 185)
                      0x00007f4d151f9fde: mov    %r12,0x20(%r10)    ;*invokevirtual directInterfaceImpl
....................................................................................................
 51.03%   57.52%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 455 (45 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f4d151f0960: mov    0x8(%rsi),%r10d
                     0x00007f4d151f0964: shl    $0x3,%r10
                     0x00007f4d151f0968: cmp    %r10,%rax
                     0x00007f4d151f096b: jne    0x00007f4d15045b60  ;   {runtime_call}
                     0x00007f4d151f0971: xchg   %ax,%ax
                     0x00007f4d151f0974: nopl   0x0(%rax,%rax,1)
                     0x00007f4d151f097c: xchg   %ax,%ax
                   [Verified Entry Point]
  4.27%    3.14%     0x00007f4d151f0980: mov    %eax,-0x14000(%rsp)
  6.69%    5.07%     0x00007f4d151f0987: push   %rbp
  4.17%    2.51%     0x00007f4d151f0988: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  6.15%    4.44%     0x00007f4d151f098c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  2.78%    3.02%     0x00007f4d151f0993: mov    %edx,%r8d
  3.83%    2.48%     0x00007f4d151f0996: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  2.05%    2.30%     0x00007f4d151f099d: mov    %edx,%r9d
  5.22%    5.47%     0x00007f4d151f09a0: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  1.65%    1.80%     0x00007f4d151f09a3: cmp    %r8d,%r9d
                  ╭  0x00007f4d151f09a6: je     0x00007f4d151f09b4  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  6.32%    5.75%  │  0x00007f4d151f09a8: add    $0x20,%rsp
                  │  0x00007f4d151f09ac: pop    %rbp
  4.58%    5.50%  │  0x00007f4d151f09ad: test   %eax,0x1806d64d(%rip)        # 0x00007f4d2d25e000
                  │                                                ;   {poll_return}
                  │  0x00007f4d151f09b3: retq   
                  ↘  0x00007f4d151f09b4: mov    %rsi,%rbp
                     0x00007f4d151f09b7: mov    %edx,(%rsp)
                     0x00007f4d151f09ba: mov    %r9d,0x4(%rsp)
                     0x00007f4d151f09bf: mov    %r8d,0x8(%rsp)
                     0x00007f4d151f09c4: mov    $0xffffff65,%esi
                     0x00007f4d151f09c9: xchg   %ax,%ax
                     0x00007f4d151f09cb: callq  0x00007f4d15004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
....................................................................................................
 47.70%   41.47%  <total for region 2>

....[Hottest Regions]...............................................................................
 51.03%   57.52%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub, version 472 (82 bytes) 
 47.70%   41.47%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 455 (45 bytes) 
  0.23%    0.22%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.04%    0.00%   [kernel.kallsyms]  [unknown] (27 bytes) 
  0.03%    0.03%   [kernel.kallsyms]  [unknown] (43 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (4 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (25 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (16 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (23 bytes) 
  0.02%    0.01%        libc-2.24.so  __GI___libc_write+0x26 (7 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (21 bytes) 
  0.01%    0.02%         C1, level 3  sun.reflect.ReflectionFactory::copyField, version 534 (79 bytes) 
  0.01%           libpthread-2.24.so  pthread_cond_timedwait@@GLIBC_2.3.2+0x12c (24 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (23 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (12 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (18 bytes) 
  0.75%    0.70%  <...other 238 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.03%   57.52%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceImpl_jmhTest::directInterfaceImpl_avgt_jmhStub, version 472 
 47.70%   41.47%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 455 
  0.76%    0.61%   [kernel.kallsyms]  [unknown] 
  0.23%    0.22%         C1, level 3  sun.reflect.ReflectionFactory::copyField, version 534 
  0.02%    0.01%        libc-2.24.so  __GI___libc_write+0x26 
  0.01%           libpthread-2.24.so  pthread_cond_timedwait@@GLIBC_2.3.2+0x12c 
  0.01%                  interpreter  method entry point (kind = zerolocals)  
  0.01%                  interpreter  getstatic  178 getstatic  
  0.01%    0.00%        libc-2.24.so  _IO_default_xsputn+0x0 
  0.01%           libpthread-2.24.so  pthread_cond_init@@GLIBC_2.3.2+0x3 
  0.01%                 libc-2.24.so  strlen+0x2a 
  0.01%                    libjvm.so  _ZN6Thread10muxAcquireEPVlPKc+0x0 
  0.00%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.00%    0.01%        libc-2.24.so  _IO_fwrite+0x11 
  0.00%                    libjvm.so  _ZN6Thread10muxReleaseEPVl+0x91 
  0.00%                 libc-2.24.so  pthread_mutex_lock+0x0 
  0.00%                 libc-2.24.so  vfprintf+0x389 
  0.00%    0.00%        libc-2.24.so  __strchr_sse2+0x2f 
  0.00%                    libjvm.so  _ZN13WatcherThread3runEv+0x183 
  0.00%                 libc-2.24.so  __clock_gettime+0x1 
  0.14%    0.03%  <...other 31 warm methods...>
....................................................................................................
 99.99%   99.88%  <totals>

....[Distribution by Source]........................................................................
 98.74%   98.98%         C2, level 4
  0.76%    0.61%   [kernel.kallsyms]
  0.23%    0.22%         C1, level 3
  0.14%    0.15%        libc-2.24.so
  0.05%    0.01%  libpthread-2.24.so
  0.04%                    libjvm.so
  0.04%    0.01%         interpreter
....................................................................................................
 99.99%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.directInterfaceLambda

# Run progress: 15.00% complete, ETA 00:12:09
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 2.621 ns/op
# Warmup Iteration   2: 2.639 ns/op
# Warmup Iteration   3: 2.597 ns/op
# Warmup Iteration   4: 2.324 ns/op
# Warmup Iteration   5: 2.319 ns/op
# Warmup Iteration   6: 2.327 ns/op
# Warmup Iteration   7: 2.290 ns/op
# Warmup Iteration   8: 2.297 ns/op
# Warmup Iteration   9: 2.289 ns/op
# Warmup Iteration  10: 2.287 ns/op
# Warmup Iteration  11: 2.296 ns/op
# Warmup Iteration  12: 2.291 ns/op
# Warmup Iteration  13: 2.312 ns/op
# Warmup Iteration  14: 2.318 ns/op
# Warmup Iteration  15: 2.336 ns/op
# Warmup Iteration  16: 2.347 ns/op
# Warmup Iteration  17: 2.286 ns/op
# Warmup Iteration  18: 2.288 ns/op
# Warmup Iteration  19: 2.287 ns/op
# Warmup Iteration  20: 2.298 ns/op
Iteration   1: 2.286 ns/op
Iteration   2: 2.288 ns/op
Iteration   3: 2.287 ns/op
Iteration   4: 2.290 ns/op
Iteration   5: 2.286 ns/op
Iteration   6: 2.285 ns/op
Iteration   7: 2.333 ns/op
Iteration   8: 2.278 ns/op
Iteration   9: 2.281 ns/op
Iteration  10: 2.280 ns/op
Iteration  11: 2.276 ns/op
Iteration  12: 2.284 ns/op
Iteration  13: 2.280 ns/op
Iteration  14: 2.278 ns/op
Iteration  15: 2.279 ns/op
Iteration  16: 2.286 ns/op
Iteration  17: 2.279 ns/op
Iteration  18: 2.279 ns/op
Iteration  19: 2.277 ns/op
Iteration  20: 2.278 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "directInterfaceLambda":
  2.284 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (2.276, 2.284, 2.333), stdev = 0.012
  CI (99.9%): [2.274, 2.295] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 152260 total address lines.
Perf output processed (skipped 20.130 seconds):
 Column 1: cycles (22003 events)
 Column 2: instructions (21972 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub, version 472 (79 bytes) 

                      0x00007f1809200a90: mov    0x30(%rsp),%r9
                      0x00007f1809200a95: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f1809200bcd
                      0x00007f1809200a9d: mov    $0x1,%ebp
                      0x00007f1809200aa2: test   %r11d,%r11d
                  ╭   0x00007f1809200aa5: jne    0x00007f1809200b04  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@28 (line 184)
                  │   0x00007f1809200aa7: nopw   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@13 (line 182)
  4.49%    5.05%  │↗  0x00007f1809200ab0: mov    0x40(%rsp),%r10
           0.00%  ││  0x00007f1809200ab5: mov    0x18(%r10),%r8d    ;*getfield interfaceInstanceLambda
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceLambda@1 (line 88)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@15 (line 182)
  6.55%    7.73%  ││  0x00007f1809200ab9: mov    0x8(%r12,%r8,8),%r11d  ; implicit exception: dispatches to 0x00007f1809200b89
  0.15%    0.15%  ││  0x00007f1809200abe: cmp    $0xf8019185,%r11d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/ProtocolsBenchmark$$Lambda$9&apos;)}
                  ││  0x00007f1809200ac5: jne    0x00007f1809200b3d
  4.28%    5.50%  ││  0x00007f1809200ac7: lea    (%r12,%r8,8),%r10  ;*invokeinterface bar
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceLambda@4 (line 88)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││  0x00007f1809200acb: mov    0xc(%r10),%r10d    ;*getfield arg$1
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/1185525141::bar@1
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceLambda@4 (line 88)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@15 (line 182)
  6.31%    7.44%  ││  0x00007f1809200acf: test   %r10d,%r10d
                  ││  0x00007f1809200ad2: je     0x00007f1809200b2e  ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::lambda$setup$0@3 (line 32)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/1185525141::bar@4
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceLambda@4 (line 88)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.42%    0.53%  ││  0x00007f1809200ad4: mov    %r9,0x30(%rsp)
  4.35%    5.01%  ││  0x00007f1809200ad9: lea    (%r12,%r10,8),%rsi  ;*getfield arg$1
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/1185525141::bar@1
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceLambda@4 (line 88)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││  0x00007f1809200add: mov    $0x2a,%edx
  6.14%    6.56%  ││  0x00007f1809200ae2: nop    
  0.46%    0.33%  ││  0x00007f1809200ae3: callq  0x00007f1809045d60  ; OopMap{[48]=Oop [56]=Oop [64]=Oop off=200}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::lambda$setup$0@3 (line 32)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/1185525141::bar@4
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::directInterfaceLambda@4 (line 88)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  6.49%    7.76%  ││  0x00007f1809200ae8: mov    0x30(%rsp),%r9
  4.62%    4.43%  ││  0x00007f1809200aed: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@25 (line 184)
  0.01%           ││  0x00007f1809200af5: add    $0x1,%rbp          ; OopMap{r9=Oop [56]=Oop [64]=Oop off=217}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@28 (line 184)
  6.05%    6.12%  ││  0x00007f1809200af9: test   %eax,0x177d0501(%rip)        # 0x00007f18209d1000
                  ││                                                ;   {poll}
  0.00%           ││  0x00007f1809200aff: test   %r11d,%r11d
                  │╰  0x00007f1809200b02: je     0x00007f1809200ab0  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f1809200b04: mov    $0x7f181f517f60,%r10
                      0x00007f1809200b0e: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@32 (line 185)
                      0x00007f1809200b11: mov    0x38(%rsp),%r10
                      0x00007f1809200b16: mov    %rbp,0x18(%r10)    ;*putfield measuredOps
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub@47 (line 187)
                      0x00007f1809200b1a: mov    %rax,0x30(%r10)    ;*putfield stopTime
....................................................................................................
 50.31%   56.61%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 442 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f18091edf60: mov    0x8(%rsi),%r10d
                     0x00007f18091edf64: shl    $0x3,%r10
                     0x00007f18091edf68: cmp    %r10,%rax
                     0x00007f18091edf6b: jne    0x00007f1809045b60  ;   {runtime_call}
                     0x00007f18091edf71: xchg   %ax,%ax
                     0x00007f18091edf74: nopl   0x0(%rax,%rax,1)
                     0x00007f18091edf7c: xchg   %ax,%ax
                   [Verified Entry Point]
  4.24%    3.15%     0x00007f18091edf80: mov    %eax,-0x14000(%rsp)
  6.49%    5.48%     0x00007f18091edf87: push   %rbp
  4.37%    2.20%     0x00007f18091edf88: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  6.00%    4.41%     0x00007f18091edf8c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  2.99%    2.96%     0x00007f18091edf93: mov    %edx,%r8d
  3.79%    2.42%     0x00007f18091edf96: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.89%    2.01%     0x00007f18091edf9d: mov    %edx,%r9d
  5.13%    5.19%     0x00007f18091edfa0: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  1.63%    1.93%     0x00007f18091edfa3: cmp    %r8d,%r9d
  0.00%           ╭  0x00007f18091edfa6: je     0x00007f18091edfb4  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  6.44%    6.03%  │  0x00007f18091edfa8: add    $0x20,%rsp
                  │  0x00007f18091edfac: pop    %rbp
  4.47%    5.61%  │  0x00007f18091edfad: test   %eax,0x177e304d(%rip)        # 0x00007f18209d1000
                  │                                                ;   {poll_return}
  0.00%           │  0x00007f18091edfb3: retq   
                  ↘  0x00007f18091edfb4: mov    %rsi,%rbp
                     0x00007f18091edfb7: mov    %edx,(%rsp)
                     0x00007f18091edfba: mov    %r9d,0x4(%rsp)
                     0x00007f18091edfbf: mov    %r8d,0x8(%rsp)
                     0x00007f18091edfc4: mov    $0xffffff65,%esi
                     0x00007f18091edfc9: xchg   %ax,%ax
                     0x00007f18091edfcb: callq  0x00007f1809004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 47.46%   41.40%  <total for region 2>

....[Hottest Regions]...............................................................................
 50.31%   56.61%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub, version 472 (79 bytes) 
 47.46%   41.40%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 442 (51 bytes) 
  1.04%    1.03%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.05%    0.05%   [kernel.kallsyms]  [unknown] (40 bytes) 
  0.04%            [kernel.kallsyms]  [unknown] (31 bytes) 
  0.03%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (50 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (34 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (4 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (6 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (26 bytes) 
  0.01%    0.02%   [kernel.kallsyms]  [unknown] (9 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%                    libjvm.so  _ZN15PerfLongVariant6sampleEv+0x0 (0 bytes) 
  0.01%    0.01%        libc-2.24.so  _IO_fwrite+0xde (0 bytes) 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x22 (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (15 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (32 bytes) 
  0.86%    0.79%  <...other 264 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.31%   56.61%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_directInterfaceLambda_jmhTest::directInterfaceLambda_avgt_jmhStub, version 472 
 47.46%   41.40%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 442 
  1.74%    1.54%   [kernel.kallsyms]  [unknown] 
  0.06%    0.05%         C1, level 3  java.io.DataOutputStream::writeUTF, version 531 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.01%                    libjvm.so  _ZN15PerfLongVariant6sampleEv+0x0 
  0.01%    0.01%        libc-2.24.so  _IO_fwrite+0xde 
  0.01%                    libjvm.so  _ZN13defaultStream5writeEPKcm+0xc8 
  0.01%    0.02%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x4c 
  0.01%    0.00%        libc-2.24.so  _IO_fflush+0x7e 
  0.01%    0.00%           libjvm.so  _ZN7Monitor6unlockEv+0x19 
  0.01%    0.01%        libc-2.24.so  __libc_enable_asynccancel+0x0 
  0.01%    0.02%           libjvm.so  _ZN12outputStream15update_positionEPKcm+0x2b 
  0.01%    0.00%        libc-2.24.so  __strchrnul+0xb 
  0.01%    0.01%           libjvm.so  _ZN13RelocIterator10initializeEP7nmethodPhS2_+0xea 
  0.01%    0.00%        libc-2.24.so  __GI___libc_write+0x2d 
  0.00%    0.00%        libc-2.24.so  _itoa_word+0x57 
  0.00%                 libc-2.24.so  _IO_fwrite+0x11a 
  0.00%                    libjvm.so  _ZNK6Method14print_value_onEP12outputStream+0x6d 
  0.00%                    libjvm.so  _ZN9xmlStream10write_textEPKcm+0x148 
  0.28%    0.08%  <...other 62 warm methods...>
....................................................................................................
 99.99%   99.78%  <totals>

....[Distribution by Source]........................................................................
 97.77%   98.02%         C2, level 4
  1.74%    1.54%   [kernel.kallsyms]
  0.23%    0.21%           libjvm.so
  0.15%    0.17%        libc-2.24.so
  0.07%    0.05%         C1, level 3
  0.02%    0.01%  libpthread-2.24.so
  0.01%    0.00%         interpreter
....................................................................................................
 99.99%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.indyChild

# Run progress: 20.00% complete, ETA 00:11:25
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 7.251 ns/op
# Warmup Iteration   2: 5.792 ns/op
# Warmup Iteration   3: 5.899 ns/op
# Warmup Iteration   4: 5.898 ns/op
# Warmup Iteration   5: 5.771 ns/op
# Warmup Iteration   6: 5.850 ns/op
# Warmup Iteration   7: 5.755 ns/op
# Warmup Iteration   8: 5.746 ns/op
# Warmup Iteration   9: 5.746 ns/op
# Warmup Iteration  10: 5.762 ns/op
# Warmup Iteration  11: 5.751 ns/op
# Warmup Iteration  12: 5.746 ns/op
# Warmup Iteration  13: 5.886 ns/op
# Warmup Iteration  14: 5.747 ns/op
# Warmup Iteration  15: 5.750 ns/op
# Warmup Iteration  16: 5.825 ns/op
# Warmup Iteration  17: 4.932 ns/op
# Warmup Iteration  18: 4.937 ns/op
# Warmup Iteration  19: 4.926 ns/op
# Warmup Iteration  20: 4.929 ns/op
Iteration   1: 4.936 ns/op
Iteration   2: 4.929 ns/op
Iteration   3: 4.929 ns/op
Iteration   4: 4.933 ns/op
Iteration   5: 4.929 ns/op
Iteration   6: 4.934 ns/op
Iteration   7: 4.927 ns/op
Iteration   8: 4.922 ns/op
Iteration   9: 4.963 ns/op
Iteration  10: 4.925 ns/op
Iteration  11: 4.927 ns/op
Iteration  12: 4.945 ns/op
Iteration  13: 5.047 ns/op
Iteration  14: 4.943 ns/op
Iteration  15: 4.935 ns/op
Iteration  16: 4.930 ns/op
Iteration  17: 4.941 ns/op
Iteration  18: 4.928 ns/op
Iteration  19: 4.931 ns/op
Iteration  20: 4.930 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyChild":
  4.939 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (4.922, 4.939, 5.047), stdev = 0.027
  CI (99.9%): [4.916, 4.963] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 160481 total address lines.
Perf output processed (skipped 20.107 seconds):
 Column 1: cycles (21825 events)
 Column 2: instructions (21795 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub, version 515 (169 bytes) 

                      0x00007fd4e8be8f70: mov    0x40(%rsp),%r11
                      0x00007fd4e8be8f75: movzbl 0x94(%r11),%r10d   ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007fd4e8be9265
                      0x00007fd4e8be8f7d: mov    $0x1,%ebp
                      0x00007fd4e8be8f82: test   %r10d,%r10d
                  ╭   0x00007fd4e8be8f85: jne    0x00007fd4e8be9048  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@28 (line 184)
                  │   0x00007fd4e8be8f8b: nopl   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@13 (line 182)
  4.00%    5.24%  │↗  0x00007fd4e8be8f90: mov    0x50(%rsp),%r10
  0.00%           ││  0x00007fd4e8be8f95: mov    0x10(%r10),%r10d   ;*getfield childInstance
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@1 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  1.15%    1.25%  ││  0x00007fd4e8be8f99: mov    0x8(%r12,%r10,8),%r9d  ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007fd4e8be91bd
  0.00%           ││  0x00007fd4e8be8f9e: mov    $0x71a3f8dd0,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.93%    5.31%  ││  0x00007fd4e8be8fa8: mov    0x18(%r8),%r8d     ;*getfield cache
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@6 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││  0x00007fd4e8be8fac: shl    $0x3,%r9
  1.21%    1.91%  ││  0x00007fd4e8be8fb0: mov    0x68(%r9),%r9      ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  0.03%    0.01%  ││  0x00007fd4e8be8fb4: test   %r8d,%r8d
                  ││  0x00007fd4e8be8fb7: je     0x00007fd4e8be9099  ;*ifnull
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@9 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  3.82%    5.15%  ││  0x00007fd4e8be8fbd: mov    %r8,%rcx
                  ││  0x00007fd4e8be8fc0: shl    $0x3,%rcx
  1.29%    1.49%  ││  0x00007fd4e8be8fc4: cmp    %r9,%rcx
                  ││  0x00007fd4e8be8fc7: jne    0x00007fd4e8be90bd  ;*if_acmpeq
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@17 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││  0x00007fd4e8be8fcd: mov    $0x71a3f8dd0,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.53%    4.53%  ││  0x00007fd4e8be8fd7: mov    0x1c(%r8),%ecx     ;*getfield handle
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@44 (line 28)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  0.00%           ││  0x00007fd4e8be8fdb: mov    0x10(%r12,%rcx,8),%r8d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@2 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007fd4e8be91cd
  1.10%    1.53%  ││  0x00007fd4e8be8fe0: cmp    $0xe320b263,%r8d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007fd4e8be8fe7: je     0x00007fd4e8be90e1  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@5 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  0.00%           ││  0x00007fd4e8be8fed: mov    0x18(%r12,%rcx,8),%r8d  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  3.75%    4.10%  ││  0x00007fd4e8be8ff2: mov    0x10(%r12,%r8,8),%r9d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@11 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007fd4e8be91ed
                  ││  0x00007fd4e8be8ff7: cmp    $0xe320b263,%r9d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007fd4e8be8ffe: jne    0x00007fd4e8be9072  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@14 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  1.11%    1.58%  ││  0x00007fd4e8be9000: mov    0x14(%r12,%r8,8),%ecx  ;*getfield form
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@6 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  0.00%           ││  0x00007fd4e8be9005: mov    0x1c(%r12,%rcx,8),%r9d  ;*getfield customized
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@9 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007fd4e8be91dd
  3.99%    3.45%  ││  0x00007fd4e8be900a: test   %r9d,%r9d
                  ││  0x00007fd4e8be900d: je     0x00007fd4e8be9105  ;*ifnonnull
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@12 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
           0.00%  ││  0x00007fd4e8be9013: mov    %r11,0x40(%rsp)
  1.17%    1.03%  ││  0x00007fd4e8be9018: lea    (%r12,%r8,8),%rsi  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││  0x00007fd4e8be901c: lea    (%r12,%r10,8),%rdx  ;*getfield childInstance
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@1 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
  4.02%    2.69%  ││  0x00007fd4e8be9020: xchg   %ax,%ax
                  ││  0x00007fd4e8be9023: callq  0x00007fd4e8a1ed60  ; OopMap{[64]=Oop [72]=Oop [80]=Oop off=392}
                  ││                                                ;*invokevirtual invokeBasic
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@17
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyChild@4 (line 43)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  1.15%    1.07%  ││  0x00007fd4e8be9028: mov    0x40(%rsp),%r11
  3.85%    4.78%  ││  0x00007fd4e8be902d: movzbl 0x94(%r11),%r8d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@25 (line 184)
                  ││  0x00007fd4e8be9035: add    $0x1,%rbp          ; OopMap{r11=Oop [72]=Oop [80]=Oop off=409}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@28 (line 184)
  1.16%    1.61%  ││  0x00007fd4e8be9039: test   %eax,0x16686fc1(%rip)        # 0x00007fd4ff270000
                  ││                                                ;   {poll}
                  ││  0x00007fd4e8be903f: test   %r8d,%r8d
                  │╰  0x00007fd4e8be9042: je     0x00007fd4e8be8f90  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@31 (line 185)
                  ↘   0x00007fd4e8be9048: mov    $0x7fd4fddb6f60,%r10
                      0x00007fd4e8be9052: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub@32 (line 185)
                      0x00007fd4e8be9055: mov    0x48(%rsp),%r10
....................................................................................................
 40.28%   46.73%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, java.lang.invoke.LambdaForm$BMH::reinvoke, version 493 (59 bytes) 

                   </print_nmethod>
                   Decoding compiled method 0x00007fd4e8bdaa90:
                   Code:
                   [Entry Point]
                   [Verified Entry Point]
                   [Constants]
                     # {method} {0x00007fd4e4f76a50} &apos;reinvoke&apos; &apos;(Ljava/lang/Object;Ljava/lang/Object;)V&apos; in &apos;java/lang/invoke/LambdaForm$BMH&apos;
                     # parm0:    rsi:rsi   = &apos;java/lang/Object&apos;
                     # parm1:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x30]  (sp of caller)
  7.64%    7.29%     0x00007fd4e8bdabe0: mov    %eax,-0x14000(%rsp)
  1.18%    1.22%     0x00007fd4e8bdabe7: push   %rbp
                     0x00007fd4e8bdabe8: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@-1
  3.86%    3.12%     0x00007fd4e8bdabec: mov    0x8(%rdx),%r10d    ; implicit exception: dispatches to 0x00007fd4e8bdac4e
  1.15%    1.26%     0x00007fd4e8bdabf0: cmp    $0xf80179e3,%r10d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooChildA&apos;)}
                     0x00007fd4e8bdabf7: jne    0x00007fd4e8bdac2d  ;*invokevirtual isInstance
                                                                   ; - java.lang.invoke.MethodHandleImpl::castReference@6 (line 355)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1229416514::invokeStatic_LL_L@11
                                                                   ; - java.lang.invoke.LambdaForm$BMH/81628611::reinvoke@21
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@21
                     0x00007fd4e8bdabf9: mov    0xc(%rdx),%r10d    ;*getfield blackhole
                                                                   ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@1 (line 13)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
  3.72%    3.03%     0x00007fd4e8bdabfd: test   %r10d,%r10d
  0.00%           ╭  0x00007fd4e8bdac00: je     0x00007fd4e8bdac1c  ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
  1.26%    0.54%  │  0x00007fd4e8bdac02: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@1 (line 13)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
  0.00%           │  0x00007fd4e8bdac06: mov    $0x2a,%edx
  3.90%    3.79%  │  0x00007fd4e8bdac0b: callq  0x00007fd4e8a1ed60  ; OopMap{off=48}
                  │                                                ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
                  │                                                ;   {optimized virtual_call}
  0.00%           │  0x00007fd4e8bdac10: add    $0x20,%rsp
  1.15%    0.94%  │  0x00007fd4e8bdac14: pop    %rbp
  3.96%    4.30%  │  0x00007fd4e8bdac15: test   %eax,0x166953e5(%rip)        # 0x00007fd4ff270000
                  │                                                ;   {poll_return}
  0.00%           │  0x00007fd4e8bdac1b: retq   
                  ↘  0x00007fd4e8bdac1c: mov    $0xfffffff6,%esi
                     0x00007fd4e8bdac21: xchg   %ax,%ax
                     0x00007fd4e8bdac23: callq  0x00007fd4e89ddee0  ; OopMap{off=72}
                                                                   ;*invokevirtual consume
                                                                   ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
                                                                   ;   {runtime_call}
                     0x00007fd4e8bdac28: callq  0x00007fd4fddb5d40  ;*invokevirtual consume
....................................................................................................
 27.84%   25.48%  <total for region 2>

....[Hottest Region 3]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 491 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007fd4e8bda8e0: mov    0x8(%rsi),%r10d
                     0x00007fd4e8bda8e4: shl    $0x3,%r10
                     0x00007fd4e8bda8e8: cmp    %r10,%rax
                     0x00007fd4e8bda8eb: jne    0x00007fd4e8a1eb60  ;   {runtime_call}
                     0x00007fd4e8bda8f1: xchg   %ax,%ax
                     0x00007fd4e8bda8f4: nopl   0x0(%rax,%rax,1)
                     0x00007fd4e8bda8fc: xchg   %ax,%ax
                   [Verified Entry Point]
  1.05%    0.97%     0x00007fd4e8bda900: mov    %eax,-0x14000(%rsp)
  3.99%    3.93%     0x00007fd4e8bda907: push   %rbp
  0.00%    0.00%     0x00007fd4e8bda908: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  1.08%    1.28%     0x00007fd4e8bda90c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  4.00%    3.70%     0x00007fd4e8bda913: mov    %edx,%r8d
                     0x00007fd4e8bda916: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.13%    1.41%     0x00007fd4e8bda91d: mov    %edx,%r9d
           0.00%     0x00007fd4e8bda920: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  3.62%    3.51%     0x00007fd4e8bda923: cmp    %r8d,%r9d
                  ╭  0x00007fd4e8bda926: je     0x00007fd4e8bda934  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  0.00%           │  0x00007fd4e8bda928: add    $0x20,%rsp
  1.15%    0.99%  │  0x00007fd4e8bda92c: pop    %rbp
                  │  0x00007fd4e8bda92d: test   %eax,0x166956cd(%rip)        # 0x00007fd4ff270000
                  │                                                ;   {poll_return}
  4.00%    3.68%  │  0x00007fd4e8bda933: retq   
                  ↘  0x00007fd4e8bda934: mov    %rsi,%rbp
                     0x00007fd4e8bda937: mov    %edx,(%rsp)
                     0x00007fd4e8bda93a: mov    %r9d,0x4(%rsp)
                     0x00007fd4e8bda93f: mov    %r8d,0x8(%rsp)
                     0x00007fd4e8bda944: mov    $0xffffff65,%esi
                     0x00007fd4e8bda949: xchg   %ax,%ax
                     0x00007fd4e8bda94b: callq  0x00007fd4e89ddee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 20.03%   19.48%  <total for region 3>

....[Hottest Region 4]..............................................................................
Unknown, level 0, java.lang.invoke.MethodHandle::invokeBasic, version 453 (27 bytes) 

                     0x00007fd4e8bc7fa7: hlt    
                   </print_native_nmethod>
                   Decoding compiled method 0x00007fd4e8bc7e50:
                   Code:
                   [Entry Point]
                   [Verified Entry Point]
                     # {method} {0x00007fd4e4f69478} &apos;invokeBasic&apos; &apos;(Ljava/lang/Object;)V&apos; in &apos;java/lang/invoke/MethodHandle&apos;
                     # this:     rsi:rsi   = &apos;java/lang/invoke/MethodHandle&apos;
                     # parm0:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x0]  (sp of caller)
  1.22%    1.12%     0x00007fd4e8bc7f80: mov    0x14(%rsi),%ebx
  3.92%    1.40%     0x00007fd4e8bc7f83: shl    $0x3,%rbx
  0.01%              0x00007fd4e8bc7f87: mov    0x28(%rbx),%ebx
  1.20%    1.20%     0x00007fd4e8bc7f8a: shl    $0x3,%rbx
                     0x00007fd4e8bc7f8e: mov    0x18(%rbx),%rbx
  3.98%    3.23%     0x00007fd4e8bc7f92: test   %rbx,%rbx
                  ╭  0x00007fd4e8bc7f95: je     0x00007fd4e8bc7f9e
  0.00%    0.02%  │  0x00007fd4e8bc7f9b: jmpq   *0x40(%rbx)
                  ↘  0x00007fd4e8bc7f9e: jmpq   0x00007fd4e8a30b20  ;   {runtime_call}
                     0x00007fd4e8bc7fa3: hlt    
                     0x00007fd4e8bc7fa4: hlt    
                     0x00007fd4e8bc7fa5: hlt    
                     0x00007fd4e8bc7fa6: hlt    
                     0x00007fd4e8bc7fa7: hlt    
                   <nmethod compile_id='453' compile_kind='c2n' level='0' entry='0x00007fd4e8bc7f80' size='344' address='0x00007fd4e8bc7e50' relocation_offset='296' consts_offset='344' insts_offset='304' method='java/lang/invoke/MethodHandle invokeBasic (Ljava/lang/Object;)V' bytes='0' count='0' iicount='0' stamp='1.557'/>
                      1557  453     n 0       java.lang.invoke.MethodHandle::invokeBasic(L)V (native)   
                   <print_native_nmethod method='java/lang/invoke/MethodHandle linkToSpecial (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/invoke/MemberName;)V' bytes='0' count='0' iicount='0' stamp='1.557' address='0x00007fd4e8bc7fd0'>
                   Compiled method (nm)    1557  454     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLL)V (native)
....................................................................................................
 10.34%    6.96%  <total for region 4>

....[Hottest Regions]...............................................................................
 40.28%   46.73%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub, version 515 (169 bytes) 
 27.84%   25.48%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 493 (59 bytes) 
 20.03%   19.48%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 491 (51 bytes) 
 10.34%    6.96%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 453 (27 bytes) 
  0.51%    0.50%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.04%    0.01%   [kernel.kallsyms]  [unknown] (26 bytes) 
  0.03%    0.03%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (7 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (63 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.02%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (10 bytes) 
  0.01%               hsdis-amd64.so  print_insn+0xde7 (37 bytes) 
  0.01%    0.02%         C1, level 3  sun.misc.Resource::cachedInputStream, version 582 (19 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (57 bytes) 
  0.01%    0.02%   [kernel.kallsyms]  [unknown] (76 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (15 bytes) 
  0.74%    0.67%  <...other 235 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 40.28%   46.73%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyChild_jmhTest::indyChild_avgt_jmhStub, version 515 
 27.84%   25.48%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 493 
 20.03%   19.48%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 491 
 10.34%    6.96%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 453 
  1.06%    0.92%   [kernel.kallsyms]  [unknown] 
  0.03%    0.05%         C1, level 3  sun.misc.Resource::cachedInputStream, version 582 
  0.01%               hsdis-amd64.so  print_insn+0xde7 
  0.01%                    libjvm.so  _ZN20SubstitutionResolver5visitEPP11Instruction+0x40 
  0.01%    0.03%           libjvm.so  _ZN12outputStream15update_positionEPKcm+0x9 
  0.01%               hsdis-amd64.so  get_valid_dis386+0x6c7 
  0.01%           libpthread-2.24.so  pthread_cond_timedwait@@GLIBC_2.3.2+0x12c 
  0.01%                 libc-2.24.so  _itoa_word+0xb8 
  0.01%    0.00%        libc-2.24.so  _IO_fflush+0x7e 
  0.01%    0.02%           libjvm.so  _ZN10fileStream5writeEPKcm+0x48 
  0.01%    0.00%         interpreter  method entry point (kind = zerolocals)  
  0.01%    0.00%        libc-2.24.so  __libc_enable_asynccancel+0x0 
  0.00%                    libjvm.so  _ZN13SharedRuntime23java_calling_conventionEPK9BasicTypeP9VMRegPairii+0xb9 
  0.00%                 libc-2.24.so  vfprintf+0x2d89 
  0.00%               hsdis-amd64.so  print_insn+0xdd 
  0.00%                    libjvm.so  _ZN12MetaspaceObjnwEmP15ClassLoaderDatambNS_4TypeEP6Thread+0x0 
  0.31%    0.07%  <...other 67 warm methods...>
....................................................................................................
100.00%   99.76%  <totals>

....[Distribution by Source]........................................................................
 88.15%   91.69%         C2, level 4
 10.34%    6.96%    Unknown, level 0
  1.06%    0.92%   [kernel.kallsyms]
  0.19%    0.18%           libjvm.so
  0.11%    0.15%        libc-2.24.so
  0.06%    0.02%      hsdis-amd64.so
  0.03%    0.01%  libpthread-2.24.so
  0.03%    0.05%         C1, level 3
  0.02%    0.00%         interpreter
  0.00%                 libverify.so
....................................................................................................
100.00%   99.99%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.indyClass

# Run progress: 25.00% complete, ETA 00:10:42
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 6.608 ns/op
# Warmup Iteration   2: 5.803 ns/op
# Warmup Iteration   3: 4.968 ns/op
# Warmup Iteration   4: 4.958 ns/op
# Warmup Iteration   5: 4.964 ns/op
# Warmup Iteration   6: 5.135 ns/op
# Warmup Iteration   7: 5.394 ns/op
# Warmup Iteration   8: 4.942 ns/op
# Warmup Iteration   9: 4.947 ns/op
# Warmup Iteration  10: 4.941 ns/op
# Warmup Iteration  11: 4.939 ns/op
# Warmup Iteration  12: 4.951 ns/op
# Warmup Iteration  13: 4.945 ns/op
# Warmup Iteration  14: 5.214 ns/op
# Warmup Iteration  15: 5.059 ns/op
# Warmup Iteration  16: 5.713 ns/op
# Warmup Iteration  17: 5.051 ns/op
# Warmup Iteration  18: 5.298 ns/op
# Warmup Iteration  19: 4.948 ns/op
# Warmup Iteration  20: 5.049 ns/op
Iteration   1: 5.144 ns/op
Iteration   2: 5.299 ns/op
Iteration   3: 5.826 ns/op
Iteration   4: 6.105 ns/op
Iteration   5: 6.881 ns/op
Iteration   6: 6.919 ns/op
Iteration   7: 6.029 ns/op
Iteration   8: 6.099 ns/op
Iteration   9: 6.884 ns/op
Iteration  10: 6.667 ns/op
Iteration  11: 5.840 ns/op
Iteration  12: 6.188 ns/op
Iteration  13: 6.752 ns/op
Iteration  14: 6.880 ns/op
Iteration  15: 5.216 ns/op
Iteration  16: 6.063 ns/op
Iteration  17: 6.895 ns/op
Iteration  18: 6.591 ns/op
Iteration  19: 5.802 ns/op
Iteration  20: 6.083 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyClass":
  6.208 ±(99.9%) 0.507 ns/op [Average]
  (min, avg, max) = (5.144, 6.208, 6.919), stdev = 0.584
  CI (99.9%): [5.701, 6.715] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 156783 total address lines.
Perf output processed (skipped 20.117 seconds):
 Column 1: cycles (21910 events)
 Column 2: instructions (21857 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub, version 512 (175 bytes) 

                      0x00007f41d12072b0: mov    0x40(%rsp),%r11
                      0x00007f41d12072b5: movzbl 0x94(%r11),%r10d   ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f41d12075a5
                      0x00007f41d12072bd: mov    $0x1,%ebp
                      0x00007f41d12072c2: test   %r10d,%r10d
                  ╭   0x00007f41d12072c5: jne    0x00007f41d1207388  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@28 (line 184)
                  │   0x00007f41d12072cb: nopl   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@13 (line 182)
  3.11%    2.84%  │↗  0x00007f41d12072d0: mov    0x50(%rsp),%r10
  0.09%    0.03%  ││  0x00007f41d12072d5: mov    0xc(%r10),%r10d    ;*getfield classInstance
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@1 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.68%    0.68%  ││  0x00007f41d12072d9: mov    0x8(%r12,%r10,8),%r9d  ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f41d12074fd
  0.02%    0.03%  ││  0x00007f41d12072de: mov    $0x71a3f8e28,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.71%    2.66%  ││  0x00007f41d12072e8: mov    0x18(%r8),%r8d     ;*getfield cache
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@6 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.08%    0.04%  ││  0x00007f41d12072ec: shl    $0x3,%r9
  0.74%    0.95%  ││  0x00007f41d12072f0: mov    0x68(%r9),%r9      ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  2.43%    0.85%  ││  0x00007f41d12072f4: test   %r8d,%r8d
                  ││  0x00007f41d12072f7: je     0x00007f41d12073d9  ;*ifnull
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@9 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  2.41%    2.47%  ││  0x00007f41d12072fd: mov    %r8,%rcx
  0.11%    0.03%  ││  0x00007f41d1207300: shl    $0x3,%rcx
  0.59%    0.75%  ││  0x00007f41d1207304: cmp    %r9,%rcx
                  ││  0x00007f41d1207307: jne    0x00007f41d12073fd  ;*if_acmpeq
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@17 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  1.05%    0.51%  ││  0x00007f41d120730d: mov    $0x71a3f8e28,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  2.61%    2.51%  ││  0x00007f41d1207317: mov    0x1c(%r8),%ecx     ;*getfield handle
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@44 (line 28)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.06%    0.03%  ││  0x00007f41d120731b: mov    0x10(%r12,%rcx,8),%r8d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@2 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f41d120750d
  0.55%    0.76%  ││  0x00007f41d1207320: cmp    $0xe320b253,%r8d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007f41d1207327: je     0x00007f41d1207421  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@5 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  1.10%    0.37%  ││  0x00007f41d120732d: mov    0x18(%r12,%rcx,8),%r8d  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  2.47%    2.21%  ││  0x00007f41d1207332: mov    0x10(%r12,%r8,8),%r9d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@11 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f41d120752d
  0.05%    0.05%  ││  0x00007f41d1207337: cmp    $0xe320b253,%r9d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007f41d120733e: jne    0x00007f41d12073b2  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@14 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.57%    0.75%  ││  0x00007f41d1207340: mov    0x14(%r12,%r8,8),%ecx  ;*getfield form
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@6 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.99%    0.32%  ││  0x00007f41d1207345: mov    0x1c(%r12,%rcx,8),%r9d  ;*getfield customized
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@9 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f41d120751d
  2.80%    1.85%  ││  0x00007f41d120734a: test   %r9d,%r9d
                  ││  0x00007f41d120734d: je     0x00007f41d1207445  ;*ifnonnull
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@12 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.53%    0.36%  ││  0x00007f41d1207353: mov    %r11,0x40(%rsp)
  0.63%    0.53%  ││  0x00007f41d1207358: lea    (%r12,%r8,8),%rsi  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  0.78%    0.38%  ││  0x00007f41d120735c: lea    (%r12,%r10,8),%rdx  ;*getfield classInstance
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@1 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
  2.37%    0.97%  ││  0x00007f41d1207360: xchg   %ax,%ax
  0.56%    0.47%  ││  0x00007f41d1207363: callq  0x00007f41d1045d60  ; OopMap{[64]=Oop [72]=Oop [80]=Oop off=392}
                  ││                                                ;*invokevirtual invokeBasic
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/414736253::invoke_MT@17
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyClass@4 (line 38)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  1.27%    1.18%  ││  0x00007f41d1207368: mov    0x40(%rsp),%r11
  3.31%    2.99%  ││  0x00007f41d120736d: movzbl 0x94(%r11),%r8d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@25 (line 184)
  0.11%    0.01%  ││  0x00007f41d1207375: add    $0x1,%rbp          ; OopMap{r11=Oop [72]=Oop [80]=Oop off=409}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@28 (line 184)
  0.70%    0.81%  ││  0x00007f41d1207379: test   %eax,0x18946c81(%rip)        # 0x00007f41e9b4e000
                  ││                                                ;   {poll}
  0.00%           ││  0x00007f41d120737f: test   %r8d,%r8d
                  │╰  0x00007f41d1207382: je     0x00007f41d12072d0  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f41d1207388: mov    $0x7f41e8694f60,%r10
                      0x00007f41d1207392: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@32 (line 185)
                      0x00007f41d1207395: mov    0x48(%rsp),%r10
                      0x00007f41d120739a: mov    %rbp,0x18(%r10)    ;*putfield measuredOps
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub@47 (line 187)
                      0x00007f41d120739e: mov    %rax,0x30(%r10)    ;*putfield stopTime
....................................................................................................
 36.49%   28.39%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, java.lang.invoke.LambdaForm$BMH::reinvoke, version 486 (59 bytes) 

                   </print_nmethod>
                   Decoding compiled method 0x00007f41d11f3450:
                   Code:
                   [Entry Point]
                   [Verified Entry Point]
                   [Constants]
                     # {method} {0x00007f41d08b7a50} &apos;reinvoke&apos; &apos;(Ljava/lang/Object;Ljava/lang/Object;)V&apos; in &apos;java/lang/invoke/LambdaForm$BMH&apos;
                     # parm0:    rsi:rsi   = &apos;java/lang/Object&apos;
                     # parm1:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x30]  (sp of caller)
 11.53%   14.20%     0x00007f41d11f35a0: mov    %eax,-0x14000(%rsp)
  0.46%    0.44%     0x00007f41d11f35a7: push   %rbp
  0.00%              0x00007f41d11f35a8: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@-1
  3.73%    3.85%     0x00007f41d11f35ac: mov    0x8(%rdx),%r10d    ; implicit exception: dispatches to 0x00007f41d11f360e
  0.47%    0.58%     0x00007f41d11f35b0: cmp    $0xf80179a5,%r10d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooClassA&apos;)}
                     0x00007f41d11f35b7: jne    0x00007f41d11f35ed  ;*invokevirtual isInstance
                                                                   ; - java.lang.invoke.MethodHandleImpl::castReference@6 (line 355)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1229416514::invokeStatic_LL_L@11
                                                                   ; - java.lang.invoke.LambdaForm$BMH/81628611::reinvoke@21
                                                                   ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@21
                     0x00007f41d11f35b9: mov    0xc(%rdx),%r10d    ;*getfield blackhole
                                                                   ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@1 (line 13)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/205468187::invokeVirtual_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@37
  3.66%    3.78%     0x00007f41d11f35bd: test   %r10d,%r10d
  0.00%           ╭  0x00007f41d11f35c0: je     0x00007f41d11f35dc  ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@6 (line 13)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/205468187::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@37
  0.52%    0.25%  │  0x00007f41d11f35c2: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@1 (line 13)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/205468187::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@37
  0.01%           │  0x00007f41d11f35c6: mov    $0x2a,%edx
  3.83%    4.34%  │  0x00007f41d11f35cb: callq  0x00007f41d1045d60  ; OopMap{off=48}
                  │                                                ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@6 (line 13)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/205468187::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@37
                  │                                                ;   {optimized virtual_call}
  0.45%    0.44%  │  0x00007f41d11f35d0: add    $0x20,%rsp
  0.52%    0.38%  │  0x00007f41d11f35d4: pop    %rbp
  3.51%    4.34%  │  0x00007f41d11f35d5: test   %eax,0x1895aa25(%rip)        # 0x00007f41e9b4e000
                  │                                                ;   {poll_return}
  0.12%    0.10%  │  0x00007f41d11f35db: retq   
                  ↘  0x00007f41d11f35dc: mov    $0xfffffff6,%esi
                     0x00007f41d11f35e1: xchg   %ax,%ax
                     0x00007f41d11f35e3: callq  0x00007f41d1004ee0  ; OopMap{off=72}
                                                                   ;*invokevirtual consume
                                                                   ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@6 (line 13)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/205468187::invokeVirtual_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/1939036866::reinvoke@37
                                                                   ;   {runtime_call}
                     0x00007f41d11f35e8: callq  0x00007f41e8693d40  ;*invokevirtual consume
....................................................................................................
 28.82%   32.70%  <total for region 2>

....[Hottest Region 3]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 485 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f41d11f4020: mov    0x8(%rsi),%r10d
                     0x00007f41d11f4024: shl    $0x3,%r10
                     0x00007f41d11f4028: cmp    %r10,%rax
                     0x00007f41d11f402b: jne    0x00007f41d1045b60  ;   {runtime_call}
                     0x00007f41d11f4031: xchg   %ax,%ax
                     0x00007f41d11f4034: nopl   0x0(%rax,%rax,1)
                     0x00007f41d11f403c: xchg   %ax,%ax
                   [Verified Entry Point]
  0.42%    0.37%     0x00007f41d11f4040: mov    %eax,-0x14000(%rsp)
  3.76%    4.77%     0x00007f41d11f4047: push   %rbp
                     0x00007f41d11f4048: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  0.45%    0.47%     0x00007f41d11f404c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  3.80%    4.75%     0x00007f41d11f4053: mov    %edx,%r8d
  0.00%              0x00007f41d11f4056: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  0.57%    0.61%     0x00007f41d11f405d: mov    %edx,%r9d
                     0x00007f41d11f4060: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  3.53%    4.67%     0x00007f41d11f4063: cmp    %r8d,%r9d
                  ╭  0x00007f41d11f4066: je     0x00007f41d11f4074  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  0.00%           │  0x00007f41d11f4068: add    $0x20,%rsp
  0.37%    0.48%  │  0x00007f41d11f406c: pop    %rbp
                  │  0x00007f41d11f406d: test   %eax,0x18959f8d(%rip)        # 0x00007f41e9b4e000
                  │                                                ;   {poll_return}
  3.56%    4.41%  │  0x00007f41d11f4073: retq   
                  ↘  0x00007f41d11f4074: mov    %rsi,%rbp
                     0x00007f41d11f4077: mov    %edx,(%rsp)
                     0x00007f41d11f407a: mov    %r9d,0x4(%rsp)
                     0x00007f41d11f407f: mov    %r8d,0x8(%rsp)
                     0x00007f41d11f4084: mov    $0xffffff65,%esi
                     0x00007f41d11f4089: xchg   %ax,%ax
                     0x00007f41d11f408b: callq  0x00007f41d1004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 16.46%   20.54%  <total for region 3>

....[Hottest Region 4]..............................................................................
Unknown, level 0, java.lang.invoke.MethodHandle::invokeBasic, version 448 (27 bytes) 

                   d
                    java.lang.invoke.MethodType::
                   H
                   insertParameterTypes
                   a
                    (106 bytes)   callee is too large
                   ndle&apos;
                     # this:     rsi:rsi   = &apos;java/lang/invoke/MethodHandle&apos;
                     # parm0:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x0]  (sp of caller)
  1.27%    1.28%     0x00007f41d11e7f80: mov    0x14(%rsi),%ebx
  2.37%    0.65%     0x00007f41d11e7f83: shl    $0x3,%rbx
  0.54%    0.65%     0x00007f41d11e7f87: mov    0x28(%rbx),%ebx
  0.50%    0.50%     0x00007f41d11e7f8a: shl    $0x3,%rbx
  0.73%    1.00%     0x00007f41d11e7f8e: mov    0x18(%rbx),%rbx
  8.90%   10.02%     0x00007f41d11e7f92: test   %rbx,%rbx
                  ╭  0x00007f41d11e7f95: je     0x00007f41d11e7f9e
  1.76%    2.33%  │  0x00007f41d11e7f9b: jmpq   *0x40(%rbx)
                  ↘  0x00007f41d11e7f9e: jmpq   0x00007f41d1057b20  ;   {runtime_call}
                     0x00007f41d11e7fa3: hlt    
                     0x00007f41d11e7fa4: hlt    
                     0x00007f41d11e7fa5: hlt    
                     0x00007f41d11e7fa6: hlt    
                     0x00007f41d11e7fa7: hlt    
                   <nmethod compile_id='448' compile_kind='c2n' level='0' entry='0x00007f41d11e7f80' size='344' address='0x00007f41d11e7e50' relocation_offset='296' consts_offset='344' insts_offset='304' method='java/lang/invoke/MethodHandle invokeBasic (Ljava/lang/Object;)V' bytes='0' count='0' iicount='0' stamp='1.525'/>
                      1524  448     n 0       java.lang.invoke.MethodHandle::invokeBasic(L)V (native)   
                   <print_native_nmethod method='java/lang/invoke/MethodHandle linkToSpecial (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/invoke/MemberName;)V' bytes='0' count='0' iicount='0' stamp='1.525' address='0x00007f41d11e7fd0'>
                   Compiled method (nm)    1524  449     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLL)V (native)
....................................................................................................
 16.07%   16.42%  <total for region 4>

....[Hottest Regions]...............................................................................
 36.49%   28.39%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub, version 512 (175 bytes) 
 28.82%   32.70%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 486 (59 bytes) 
 16.46%   20.54%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 485 (51 bytes) 
 16.07%   16.42%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 448 (27 bytes) 
  0.68%    0.68%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.13%    0.13%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (36 bytes) 
  0.02%    0.03%           libjvm.so  _ZN13RelocIterator10initializeEP7nmethodPhS2_+0xdf (61 bytes) 
  0.02%    0.05%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 577 (78 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (37 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (36 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (60 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (15 bytes) 
  0.02%    0.02%  libpthread-2.24.so  pthread_getspecific+0x0 (53 bytes) 
  0.02%                 libc-2.24.so  __libc_disable_asynccancel+0x22 (5 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (15 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (18 bytes) 
  1.09%    0.96%  <...other 271 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 36.49%   28.39%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyClass_jmhTest::indyClass_avgt_jmhStub, version 512 
 28.82%   32.70%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 486 
 16.46%   20.54%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 485 
 16.07%   16.42%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 448 
  1.49%    1.32%   [kernel.kallsyms]  [unknown] 
  0.18%    0.09%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 577 
  0.02%    0.03%           libjvm.so  _ZN13RelocIterator10initializeEP7nmethodPhS2_+0xdf 
  0.02%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.02%    0.02%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.01%    0.01%           libjvm.so  _ZN12outputStream5printEPKcz+0x11e 
  0.01%    0.00%        libc-2.24.so  __strchr_sse2+0xb 
  0.01%    0.00%           libjvm.so  _ZN12outputStream5printEPKcz+0x5c 
  0.01%    0.00%        libc-2.24.so  __GI___libc_write+0x2d 
  0.01%    0.01%        libc-2.24.so  _IO_default_xsputn+0x0 
  0.01%    0.00%        libc-2.24.so  _IO_no_init+0x0 
  0.01%    0.04%           libjvm.so  _ZN12outputStream15update_positionEPKcm+0x1 
  0.01%    0.00%           libjvm.so  _ZN13defaultStream5writeEPKcm+0xdc 
  0.01%                    libjvm.so  _ZNK6Method14print_value_onEP12outputStream+0xc2 
  0.01%                    libjvm.so  jio_print+0x55 
  0.01%    0.02%           libjvm.so  _ZN13RelocIterator10initializeEP7nmethodPhS2_+0x144 
  0.29%    0.15%  <...other 58 warm methods...>
....................................................................................................
100.00%   99.76%  <totals>

....[Distribution by Source]........................................................................
 81.78%   81.63%         C2, level 4
 16.07%   16.42%    Unknown, level 0
  1.49%    1.32%   [kernel.kallsyms]
  0.25%    0.27%           libjvm.so
  0.19%    0.25%        libc-2.24.so
  0.18%    0.09%         C1, level 3
  0.03%    0.02%  libpthread-2.24.so
  0.01%                  interpreter
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.indyInterfaceImpl

# Run progress: 30.00% complete, ETA 00:09:58
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 6.484 ns/op
# Warmup Iteration   2: 5.684 ns/op
# Warmup Iteration   3: 4.943 ns/op
# Warmup Iteration   4: 4.941 ns/op
# Warmup Iteration   5: 4.952 ns/op
# Warmup Iteration   6: 4.959 ns/op
# Warmup Iteration   7: 4.944 ns/op
# Warmup Iteration   8: 4.941 ns/op
# Warmup Iteration   9: 4.936 ns/op
# Warmup Iteration  10: 5.033 ns/op
# Warmup Iteration  11: 4.942 ns/op
# Warmup Iteration  12: 4.937 ns/op
# Warmup Iteration  13: 4.937 ns/op
# Warmup Iteration  14: 4.945 ns/op
# Warmup Iteration  15: 4.938 ns/op
# Warmup Iteration  16: 4.941 ns/op
# Warmup Iteration  17: 4.944 ns/op
# Warmup Iteration  18: 4.949 ns/op
# Warmup Iteration  19: 5.039 ns/op
# Warmup Iteration  20: 4.937 ns/op
Iteration   1: 4.983 ns/op
Iteration   2: 4.944 ns/op
Iteration   3: 5.050 ns/op
Iteration   4: 4.940 ns/op
Iteration   5: 4.941 ns/op
Iteration   6: 4.941 ns/op
Iteration   7: 4.943 ns/op
Iteration   8: 5.064 ns/op
Iteration   9: 4.936 ns/op
Iteration  10: 4.939 ns/op
Iteration  11: 5.518 ns/op
Iteration  12: 4.940 ns/op
Iteration  13: 4.948 ns/op
Iteration  14: 5.290 ns/op
Iteration  15: 4.944 ns/op
Iteration  16: 4.967 ns/op
Iteration  17: 4.941 ns/op
Iteration  18: 4.938 ns/op
Iteration  19: 5.523 ns/op
Iteration  20: 4.938 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyInterfaceImpl":
  5.031 ±(99.9%) 0.162 ns/op [Average]
  (min, avg, max) = (4.936, 5.031, 5.523), stdev = 0.186
  CI (99.9%): [4.870, 5.193] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 156950 total address lines.
Perf output processed (skipped 20.112 seconds):
 Column 1: cycles (21926 events)
 Column 2: instructions (21868 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub, version 502 (178 bytes) 

                      0x00007f894920bdb0: mov    0x40(%rsp),%r11
                      0x00007f894920bdb5: movzbl 0x94(%r11),%r10d   ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f894920c0a5
                      0x00007f894920bdbd: mov    $0x1,%ebp
                      0x00007f894920bdc2: test   %r10d,%r10d
                  ╭   0x00007f894920bdc5: jne    0x00007f894920be88  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@28 (line 184)
                  │   0x00007f894920bdcb: nopl   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@13 (line 182)
  3.84%    4.73%  │↗  0x00007f894920bdd0: mov    0x50(%rsp),%r10
  0.01%           ││  0x00007f894920bdd5: mov    0x14(%r10),%r10d   ;*getfield interfaceInstanceImpl
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@1 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  1.15%    1.19%  ││  0x00007f894920bdd9: mov    0x8(%r12,%r10,8),%r9d  ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f894920bffd
           0.00%  ││  0x00007f894920bdde: mov    $0x71a3f8688,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.74%    4.80%  ││  0x00007f894920bde8: mov    0x18(%r8),%r8d     ;*getfield cache
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@6 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││  0x00007f894920bdec: shl    $0x3,%r9
  1.04%    1.69%  ││  0x00007f894920bdf0: mov    0x68(%r9),%r9      ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.26%    0.05%  ││  0x00007f894920bdf4: test   %r8d,%r8d
                  ││  0x00007f894920bdf7: je     0x00007f894920bed9  ;*ifnull
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@9 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  3.78%    4.72%  ││  0x00007f894920bdfd: mov    %r8,%rcx
  0.01%           ││  0x00007f894920be00: shl    $0x3,%rcx
  1.14%    1.34%  ││  0x00007f894920be04: cmp    %r9,%rcx
                  ││  0x00007f894920be07: jne    0x00007f894920befd  ;*if_acmpeq
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@17 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.08%    0.03%  ││  0x00007f894920be0d: mov    $0x71a3f8688,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.50%    4.60%  ││  0x00007f894920be17: mov    0x1c(%r8),%ecx     ;*getfield handle
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@44 (line 28)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.01%    0.01%  ││  0x00007f894920be1b: mov    0x10(%r12,%rcx,8),%r8d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@2 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f894920c00d
  1.19%    1.66%  ││  0x00007f894920be20: cmp    $0xe320b253,%r8d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007f894920be27: je     0x00007f894920bf21  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@5 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.08%    0.05%  ││  0x00007f894920be2d: mov    0x18(%r12,%rcx,8),%r8d  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  3.63%    4.11%  ││  0x00007f894920be32: mov    0x10(%r12,%r8,8),%r9d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@11 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f894920c02d
  0.00%    0.00%  ││  0x00007f894920be37: cmp    $0xe320b253,%r9d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007f894920be3e: jne    0x00007f894920beb2  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@14 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  1.23%    1.49%  ││  0x00007f894920be40: mov    0x14(%r12,%r8,8),%ecx  ;*getfield form
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@6 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.07%    0.04%  ││  0x00007f894920be45: mov    0x1c(%r12,%rcx,8),%r9d  ;*getfield customized
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@9 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f894920c01d
  3.63%    3.40%  ││  0x00007f894920be4a: test   %r9d,%r9d
                  ││  0x00007f894920be4d: je     0x00007f894920bf45  ;*ifnonnull
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@12 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.05%    0.02%  ││  0x00007f894920be53: mov    %r11,0x40(%rsp)
  1.22%    0.78%  ││  0x00007f894920be58: lea    (%r12,%r8,8),%rsi  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.05%    0.02%  ││  0x00007f894920be5c: lea    (%r12,%r10,8),%rdx  ;*getfield interfaceInstanceImpl
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@1 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
  3.65%    2.47%  ││  0x00007f894920be60: xchg   %ax,%ax
  0.08%    0.06%  ││  0x00007f894920be63: callq  0x00007f8949045d60  ; OopMap{[64]=Oop [72]=Oop [80]=Oop off=392}
                  ││                                                ;*invokevirtual invokeBasic
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/2004566104::invoke_MT@17
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceImpl@4 (line 53)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  1.32%    1.10%  ││  0x00007f894920be68: mov    0x40(%rsp),%r11
  3.81%    4.92%  ││  0x00007f894920be6d: movzbl 0x94(%r11),%r8d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@25 (line 184)
  0.01%    0.00%  ││  0x00007f894920be75: add    $0x1,%rbp          ; OopMap{r11=Oop [72]=Oop [80]=Oop off=409}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@28 (line 184)
  1.27%    1.61%  ││  0x00007f894920be79: test   %eax,0x18d26181(%rip)        # 0x00007f8961f32000
                  ││                                                ;   {poll}
                  ││  0x00007f894920be7f: test   %r8d,%r8d
  0.00%    0.00%  │╰  0x00007f894920be82: je     0x00007f894920bdd0  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f894920be88: mov    $0x7f8960a78f60,%r10
                      0x00007f894920be92: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@32 (line 185)
                      0x00007f894920be95: mov    0x48(%rsp),%r10
                      0x00007f894920be9a: mov    %rbp,0x18(%r10)    ;*putfield measuredOps
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@47 (line 187)
                      0x00007f894920be9e: mov    %rax,0x30(%r10)    ;*putfield stopTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub@35 (line 185)
                      0x00007f894920bea2: mov    %r12,0x20(%r10)    ;*invokevirtual indyInterfaceImpl
....................................................................................................
 39.86%   44.91%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, java.lang.invoke.LambdaForm$BMH::reinvoke, version 482 (59 bytes) 

                   </print_nmethod>
                   Decoding compiled method 0x00007f89491ffd90:
                   Code:
                   [Entry Point]
                   [Verified Entry Point]
                   [Constants]
                     # {method} {0x00007f8948cbba50} &apos;reinvoke&apos; &apos;(Ljava/lang/Object;Ljava/lang/Object;)V&apos; in &apos;java/lang/invoke/LambdaForm$BMH&apos;
                     # parm0:    rsi:rsi   = &apos;java/lang/Object&apos;
                     # parm1:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x30]  (sp of caller)
  7.80%    7.60%     0x00007f89491ffee0: mov    %eax,-0x14000(%rsp)
  1.04%    1.03%     0x00007f89491ffee7: push   %rbp
  0.00%              0x00007f89491ffee8: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@-1
  3.84%    3.13%     0x00007f89491ffeec: mov    0x8(%rdx),%r10d    ; implicit exception: dispatches to 0x00007f89491fff4e
  1.14%    1.17%     0x00007f89491ffef0: cmp    $0xf8019205,%r10d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooImplA&apos;)}
                     0x00007f89491ffef7: jne    0x00007f89491fff2d  ;*invokevirtual isInstance
                                                                   ; - java.lang.invoke.MethodHandleImpl::castReference@6 (line 355)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1229416514::invokeStatic_LL_L@11
                                                                   ; - java.lang.invoke.LambdaForm$BMH/81628611::reinvoke@21
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@21
                     0x00007f89491ffef9: mov    0xc(%rdx),%r10d    ;*getfield blackhole
                                                                   ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@1 (line 14)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
  3.89%    3.01%     0x00007f89491ffefd: test   %r10d,%r10d
  0.01%           ╭  0x00007f89491fff00: je     0x00007f89491fff1c  ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
  1.15%    0.55%  │  0x00007f89491fff02: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@1 (line 14)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
                  │  0x00007f89491fff06: mov    $0x2a,%edx
  3.79%    3.97%  │  0x00007f89491fff0b: callq  0x00007f8949045d60  ; OopMap{off=48}
                  │                                                ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
                  │                                                ;   {optimized virtual_call}
  0.03%    0.03%  │  0x00007f89491fff10: add    $0x20,%rsp
  1.22%    0.82%  │  0x00007f89491fff14: pop    %rbp
  3.80%    4.38%  │  0x00007f89491fff15: test   %eax,0x18d320e5(%rip)        # 0x00007f8961f32000
                  │                                                ;   {poll_return}
  0.01%    0.00%  │  0x00007f89491fff1b: retq   
                  ↘  0x00007f89491fff1c: mov    $0xfffffff6,%esi
                     0x00007f89491fff21: xchg   %ax,%ax
                     0x00007f89491fff23: callq  0x00007f8949004ee0  ; OopMap{off=72}
                                                                   ;*invokevirtual consume
                                                                   ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1429623768::invokeVirtual_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/245336421::reinvoke@37
                                                                   ;   {runtime_call}
                     0x00007f89491fff28: callq  0x00007f8960a77d40  ;*invokevirtual consume
....................................................................................................
 27.73%   25.71%  <total for region 2>

....[Hottest Region 3]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 479 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f89491f9020: mov    0x8(%rsi),%r10d
                     0x00007f89491f9024: shl    $0x3,%r10
                     0x00007f89491f9028: cmp    %r10,%rax
                     0x00007f89491f902b: jne    0x00007f8949045b60  ;   {runtime_call}
                     0x00007f89491f9031: xchg   %ax,%ax
                     0x00007f89491f9034: nopl   0x0(%rax,%rax,1)
                     0x00007f89491f903c: xchg   %ax,%ax
                   [Verified Entry Point]
  1.20%    0.90%     0x00007f89491f9040: mov    %eax,-0x14000(%rsp)
  3.89%    4.47%     0x00007f89491f9047: push   %rbp
                     0x00007f89491f9048: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  1.07%    1.07%     0x00007f89491f904c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  3.83%    4.03%     0x00007f89491f9053: mov    %edx,%r8d
  0.00%              0x00007f89491f9056: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.22%    1.44%     0x00007f89491f905d: mov    %edx,%r9d
                     0x00007f89491f9060: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  3.80%    3.49%     0x00007f89491f9063: cmp    %r8d,%r9d
                  ╭  0x00007f89491f9066: je     0x00007f89491f9074  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
           0.00%  │  0x00007f89491f9068: add    $0x20,%rsp
  1.10%    0.90%  │  0x00007f89491f906c: pop    %rbp
                  │  0x00007f89491f906d: test   %eax,0x18d38f8d(%rip)        # 0x00007f8961f32000
                  │                                                ;   {poll_return}
  3.61%    3.92%  │  0x00007f89491f9073: retq   
                  ↘  0x00007f89491f9074: mov    %rsi,%rbp
                     0x00007f89491f9077: mov    %edx,(%rsp)
                     0x00007f89491f907a: mov    %r9d,0x4(%rsp)
                     0x00007f89491f907f: mov    %r8d,0x8(%rsp)
                     0x00007f89491f9084: mov    $0xffffff65,%esi
                     0x00007f89491f9089: xchg   %ax,%ax
                     0x00007f89491f908b: callq  0x00007f8949004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 19.73%   20.22%  <total for region 3>

....[Hottest Region 4]..............................................................................
Unknown, level 0, java.lang.invoke.MethodHandle::invokeBasic, version 443 (27 bytes) 

                   @ 15  
                   j
                    java.lang.ClassLoader::
                   ava/lan
                   isAncestor
                   g/in
                    (20 bytes)
                   voke/MethodHandle&apos;
                     # parm0:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x0]  (sp of caller)
  1.19%    1.26%     0x00007f89491ee480: mov    0x14(%rsi),%ebx
  3.64%    1.17%     0x00007f89491ee483: shl    $0x3
                   ,%rbx
                                        @ 25  
  0.08%    0.05%     0x00007f89491ee487: 
                    java.lang.SecurityManager::
                   mov    0x28(%rbx),%ebx
  1.14%    1.12%     0x00007f89491ee48a: 
                   checkPermission
                   shl    
                    (5 bytes)
                   $0x3,%rbx
                      not inlineable
  0.05%    0.10%     0x00007f89491ee48e: mov    0x18(%rbx),%rbx
  4.31%    3.42%     0x00007f89491ee492: 
                   test   %rbx,%rbx
                  ╭  0x00007f89491ee495: 
                  │@ 40  
                  │je     
                  │ java.lang.Class::
                  ↘0x00007f89491ee49e
                   getClassLoader
  0.13%    0.24%  │  0x00007f89491ee49b: jmpq   *0x40(%rbx)
                  │ (28 bytes)
                  ↘  0x00007f89491ee49e: jmpq   0x00007f8949057b20  ;   {runtime_call}
                     0x00007f89491ee4a3: hlt    
                     0x00007f89491ee4a4: hlt    
                     0x00007f89491ee4a5: 
....................................................................................................
 10.55%    7.35%  <total for region 4>

....[Hottest Regions]...............................................................................
 39.86%   44.91%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub, version 502 (178 bytes) 
 27.73%   25.71%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 482 (59 bytes) 
 19.73%   20.22%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 479 (51 bytes) 
 10.55%    7.35%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 443 (27 bytes) 
  0.77%    0.76%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.06%    0.06%   [kernel.kallsyms]  [unknown] (41 bytes) 
  0.03%    0.04%   [kernel.kallsyms]  [unknown] (15 bytes) 
  0.03%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.03%            [kernel.kallsyms]  [unknown] (19 bytes) 
  0.03%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.03%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (17 bytes) 
  0.02%    0.03%         C1, level 3  java.net.URLClassLoader$1::run, version 560 (54 bytes) 
  0.02%    0.01%        libc-2.24.so  _IO_fwrite+0x46 (19 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (22 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (68 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (6 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (3 bytes) 
  0.99%    0.87%  <...other 284 warm regions...>
....................................................................................................
 99.98%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 39.86%   44.91%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceImpl_jmhTest::indyInterfaceImpl_avgt_jmhStub, version 502 
 27.73%   25.71%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 482 
 19.73%   20.22%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 479 
 10.55%    7.35%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 443 
  1.55%    1.28%   [kernel.kallsyms]  [unknown] 
  0.33%    0.25%         C1, level 3  java.net.URLClassLoader$1::run, version 560 
  0.02%    0.01%        libc-2.24.so  _IO_fwrite+0x46 
  0.01%    0.00%        libc-2.24.so  __GI___libc_write+0x2d 
  0.01%    0.02%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x45 
  0.01%    0.01%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.01%    0.00%        libc-2.24.so  __libc_enable_asynccancel+0x1f 
  0.01%                 libc-2.24.so  __strchr_sse2+0xf 
  0.00%                  interpreter  getstatic  178 getstatic  
  0.00%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.00%           libpthread-2.24.so  pthread_cond_timedwait@@GLIBC_2.3.2+0x46 
  0.00%                    libjvm.so  _ZN10JavaThread4exitEbNS_8ExitTypeE+0xc68 
  0.00%                    libjvm.so  Unsafe_Park+0x14a 
  0.00%                 libc-2.24.so  __strcpy_sse2_unaligned+0x2b7 
  0.00%                 libc-2.24.so  pthread_cond_init@@GLIBC_2.3.2+0x17 
  0.00%    0.00%        libc-2.24.so  _IO_no_init+0x1b 
  0.13%    0.05%  <...other 29 warm methods...>
....................................................................................................
 99.98%   99.82%  <totals>

....[Distribution by Source]........................................................................
 87.32%   90.84%         C2, level 4
 10.55%    7.35%    Unknown, level 0
  1.55%    1.28%   [kernel.kallsyms]
  0.33%    0.26%         C1, level 3
  0.17%    0.20%        libc-2.24.so
  0.03%    0.01%  libpthread-2.24.so
  0.02%    0.04%           libjvm.so
  0.01%    0.00%         interpreter
....................................................................................................
 99.98%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.indyInterfaceLambda

# Run progress: 35.00% complete, ETA 00:09:15
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 6.556 ns/op
# Warmup Iteration   2: 5.598 ns/op
# Warmup Iteration   3: 5.170 ns/op
# Warmup Iteration   4: 5.076 ns/op
# Warmup Iteration   5: 4.955 ns/op
# Warmup Iteration   6: 5.298 ns/op
# Warmup Iteration   7: 4.945 ns/op
# Warmup Iteration   8: 4.946 ns/op
# Warmup Iteration   9: 4.936 ns/op
# Warmup Iteration  10: 5.066 ns/op
# Warmup Iteration  11: 4.943 ns/op
# Warmup Iteration  12: 4.939 ns/op
# Warmup Iteration  13: 4.949 ns/op
# Warmup Iteration  14: 4.945 ns/op
# Warmup Iteration  15: 4.941 ns/op
# Warmup Iteration  16: 4.949 ns/op
# Warmup Iteration  17: 4.945 ns/op
# Warmup Iteration  18: 4.945 ns/op
# Warmup Iteration  19: 5.046 ns/op
# Warmup Iteration  20: 4.938 ns/op
Iteration   1: 4.945 ns/op
Iteration   2: 4.941 ns/op
Iteration   3: 5.055 ns/op
Iteration   4: 4.951 ns/op
Iteration   5: 4.943 ns/op
Iteration   6: 4.941 ns/op
Iteration   7: 4.971 ns/op
Iteration   8: 4.956 ns/op
Iteration   9: 4.943 ns/op
Iteration  10: 4.957 ns/op
Iteration  11: 5.162 ns/op
Iteration  12: 5.054 ns/op
Iteration  13: 5.122 ns/op
Iteration  14: 5.215 ns/op
Iteration  15: 4.969 ns/op
Iteration  16: 5.380 ns/op
Iteration  17: 5.250 ns/op
Iteration  18: 5.095 ns/op
Iteration  19: 5.151 ns/op
Iteration  20: 5.237 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyInterfaceLambda":
  5.062 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (4.941, 5.062, 5.380), stdev = 0.133
  CI (99.9%): [4.946, 5.177] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 160213 total address lines.
Perf output processed (skipped 20.111 seconds):
 Column 1: cycles (21854 events)
 Column 2: instructions (21811 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub, version 516 (178 bytes) 

                      0x00007f97b1211170: mov    0x40(%rsp),%r11
                      0x00007f97b1211175: movzbl 0x94(%r11),%r10d   ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f97b1211465
                      0x00007f97b121117d: mov    $0x1,%ebp
                      0x00007f97b1211182: test   %r10d,%r10d
                  ╭   0x00007f97b1211185: jne    0x00007f97b1211248  ;*ifeq
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@28 (line 184)
                  │   0x00007f97b121118b: nopl   0x0(%rax,%rax,1)   ;*aload
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@13 (line 182)
  3.88%    4.77%  │↗  0x00007f97b1211190: mov    0x50(%rsp),%r10
  0.00%           ││  0x00007f97b1211195: mov    0x18(%r10),%r10d   ;*getfield interfaceInstanceLambda
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@1 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  1.25%    1.05%  ││  0x00007f97b1211199: mov    0x8(%r12,%r10,8),%r9d  ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f97b12113bd
  0.01%    0.00%  ││  0x00007f97b121119e: mov    $0x71a3f8648,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.79%    4.75%  ││  0x00007f97b12111a8: mov    0x18(%r8),%r8d     ;*getfield cache
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@6 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.01%           ││  0x00007f97b12111ac: shl    $0x3,%r9
  1.02%    1.90%  ││  0x00007f97b12111b0: mov    0x68(%r9),%r9      ;*invokevirtual getClass
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@1 (line 22)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.30%    0.10%  ││  0x00007f97b12111b4: test   %r8d,%r8d
  0.00%           ││  0x00007f97b12111b7: je     0x00007f97b1211299  ;*ifnull
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@9 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  3.69%    5.01%  ││  0x00007f97b12111bd: mov    %r8,%rcx
  0.01%           ││  0x00007f97b12111c0: shl    $0x3,%rcx
  1.24%    1.54%  ││  0x00007f97b12111c4: cmp    %r9,%rcx
                  ││  0x00007f97b12111c7: jne    0x00007f97b12112bd  ;*if_acmpeq
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@17 (line 23)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.10%    0.03%  ││  0x00007f97b12111cd: mov    $0x71a3f8648,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  3.72%    4.52%  ││  0x00007f97b12111d7: mov    0x1c(%r8),%ecx     ;*getfield handle
                  ││                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getMethod@44 (line 28)
                  ││                                                ; - caller.Caller::foo@6
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.00%    0.01%  ││  0x00007f97b12111db: mov    0x10(%r12,%rcx,8),%r8d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@2 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f97b12113cd
  1.14%    1.53%  ││  0x00007f97b12111e0: cmp    $0xe320b263,%r8d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007f97b12111e7: je     0x00007f97b12112e1  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@5 (line 753)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.09%    0.04%  ││  0x00007f97b12111ed: mov    0x18(%r12,%rcx,8),%r8d  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  3.67%    4.03%  ││  0x00007f97b12111f2: mov    0x10(%r12,%r8,8),%r9d  ;*getfield type
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@11 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f97b12113ed
  0.01%    0.00%  ││  0x00007f97b12111f7: cmp    $0xe320b263,%r9d   ;   {oop(a &apos;java/lang/invoke/MethodType&apos; = (Ljava/lang/Object;)V)}
                  ││  0x00007f97b12111fe: jne    0x00007f97b1211272  ;*if_acmpne
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@14 (line 766)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  1.13%    1.45%  ││  0x00007f97b1211200: mov    0x14(%r12,%r8,8),%ecx  ;*getfield form
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@6 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.15%    0.03%  ││  0x00007f97b1211205: mov    0x1c(%r12,%rcx,8),%r9d  ;*getfield customized
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@9 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││                                                ; implicit exception: dispatches to 0x00007f97b12113dd
  3.85%    3.28%  ││  0x00007f97b121120a: test   %r9d,%r9d
                  ││  0x00007f97b121120d: je     0x00007f97b1211305  ;*ifnonnull
                  ││                                                ; - java.lang.invoke.Invokers::checkCustomized@12 (line 397)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@7
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.08%    0.06%  ││  0x00007f97b1211213: mov    %r11,0x40(%rsp)
  1.09%    0.77%  ││  0x00007f97b1211218: lea    (%r12,%r8,8),%rsi  ;*getfield asTypeCache
                  ││                                                ; - java.lang.invoke.MethodHandle::asTypeCached@1 (line 765)
                  ││                                                ; - java.lang.invoke.MethodHandle::asType@12 (line 757)
                  ││                                                ; - java.lang.invoke.Invokers::checkGenericType@12 (line 321)
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@2
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.05%    0.04%  ││  0x00007f97b121121c: lea    (%r12,%r10,8),%rdx  ;*getfield interfaceInstanceLambda
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@1 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
  3.66%    2.25%  ││  0x00007f97b1211220: xchg   %ax,%ax
  0.05%    0.05%  ││  0x00007f97b1211223: callq  0x00007f97b1045d60  ; OopMap{[64]=Oop [72]=Oop [80]=Oop off=392}
                  ││                                                ;*invokevirtual invokeBasic
                  ││                                                ; - java.lang.invoke.LambdaForm$MH/1429623768::invoke_MT@17
                  ││                                                ; - caller.Caller::foo@10
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::indyInterfaceLambda@4 (line 48)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  1.16%    1.16%  ││  0x00007f97b1211228: mov    0x40(%rsp),%r11
  3.64%    4.45%  ││  0x00007f97b121122d: movzbl 0x94(%r11),%r8d    ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@25 (line 184)
  0.01%    0.00%  ││  0x00007f97b1211235: add    $0x1,%rbp          ; OopMap{r11=Oop [72]=Oop [80]=Oop off=409}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@28 (line 184)
  0.96%    1.45%  ││  0x00007f97b1211239: test   %eax,0x16fc7dc1(%rip)        # 0x00007f97c81d9000
                  ││                                                ;   {poll}
                  ││  0x00007f97b121123f: test   %r8d,%r8d
  0.00%           │╰  0x00007f97b1211242: je     0x00007f97b1211190  ;*aload_1
                  │                                                 ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@31 (line 185)
                  ↘   0x00007f97b1211248: mov    $0x7f97c6d1ff60,%r10
                      0x00007f97b1211252: callq  *%r10              ;*invokestatic nanoTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@32 (line 185)
                      0x00007f97b1211255: mov    0x48(%rsp),%r10
                      0x00007f97b121125a: mov    %rbp,0x18(%r10)    ;*putfield measuredOps
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@47 (line 187)
                      0x00007f97b121125e: mov    %rax,0x30(%r10)    ;*putfield stopTime
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub@35 (line 185)
                      0x00007f97b1211262: mov    %r12,0x20(%r10)    ;*invokevirtual indyInterfaceLambda
....................................................................................................
 39.80%   44.24%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, java.lang.invoke.LambdaForm$BMH::reinvoke, version 495 (59 bytes) 

                                                           @ 12   java.lang.invoke.MethodHandle::asTypeCached (21 bytes)   inline (hot)
                                                       @ 7   java.lang.invoke.Invokers::checkCustomized (20 bytes)   force inline by annotation
                                                       @ 17   java.lang.invoke.MethodHandle::invokeBasic(L)V (0 bytes)   receiver not constant
                   [Entry Point]
                   [Verified Entry Point]
                   [Constants]
                     # {method} {0x00007f97adef3650} &apos;reinvoke&apos; &apos;(Ljava/lang/Object;Ljava/lang/Object;)V&apos; in &apos;java/lang/invoke/LambdaForm$BMH&apos;
                     # parm0:    rsi:rsi   = &apos;java/lang/Object&apos;
                     # parm1:    rdx:rdx   = &apos;java/lang/Object&apos;
                     #           [sp+0x30]  (sp of caller)
  8.13%    7.79%     0x00007f97b11ff620: mov    %eax,-0x14000(%rsp)
  1.20%    1.12%     0x00007f97b11ff627: push   %rbp
                     0x00007f97b11ff628: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@-1
  3.97%    3.43%     0x00007f97b11ff62c: mov    0x8(%rdx),%r10d    ; implicit exception: dispatches to 0x00007f97b11ff68e
  1.20%    1.09%     0x00007f97b11ff630: cmp    $0xf8019185,%r10d  ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/ProtocolsBenchmark$$Lambda$9&apos;)}
                     0x00007f97b11ff637: jne    0x00007f97b11ff66d  ;*invokevirtual isInstance
                                                                   ; - java.lang.invoke.MethodHandleImpl::castReference@6 (line 355)
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1229416514::invokeStatic_LL_L@11
                                                                   ; - java.lang.invoke.LambdaForm$BMH/81628611::reinvoke@21
                                                                   ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@21
                     0x00007f97b11ff639: mov    0xc(%rdx),%r10d    ;*getfield arg$1
                                                                   ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/631379203::bar@1
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1355531311::invokeSpecial_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@37
  3.78%    3.13%     0x00007f97b11ff63d: test   %r10d,%r10d
                  ╭  0x00007f97b11ff640: je     0x00007f97b11ff65c  ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::lambda$setup$0@3 (line 32)
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/631379203::bar@4
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1355531311::invokeSpecial_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@37
  1.13%    0.69%  │  0x00007f97b11ff642: lea    (%r12,%r10,8),%rsi  ;*getfield arg$1
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/631379203::bar@1
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1355531311::invokeSpecial_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@37
                  │  0x00007f97b11ff646: mov    $0x2a,%edx
  3.79%    4.20%  │  0x00007f97b11ff64b: callq  0x00007f97b1045d60  ; OopMap{off=48}
                  │                                                ;*invokevirtual consume
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::lambda$setup$0@3 (line 32)
                  │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/631379203::bar@4
                  │                                                ; - java.lang.invoke.LambdaForm$DMH/1355531311::invokeSpecial_L_V@10
                  │                                                ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@37
                  │                                                ;   {optimized virtual_call}
  0.09%    0.06%  │  0x00007f97b11ff650: add    $0x20,%rsp
  1.10%    0.95%  │  0x00007f97b11ff654: pop    %rbp
  3.85%    4.18%  │  0x00007f97b11ff655: test   %eax,0x16fd99a5(%rip)        # 0x00007f97c81d9000
                  │                                                ;   {poll_return}
  0.01%           │  0x00007f97b11ff65b: retq   
                  ↘  0x00007f97b11ff65c: mov    $0xfffffff6,%esi
                     0x00007f97b11ff661: xchg   %ax,%ax
                     0x00007f97b11ff663: callq  0x00007f97b1004ee0  ; OopMap{off=72}
                                                                   ;*invokevirtual consume
                                                                   ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::lambda$setup$0@3 (line 32)
                                                                   ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9/631379203::bar@4
                                                                   ; - java.lang.invoke.LambdaForm$DMH/1355531311::invokeSpecial_L_V@10
                                                                   ; - java.lang.invoke.LambdaForm$BMH/693495552::reinvoke@37
                                                                   ;   {runtime_call}
....................................................................................................
 28.26%   26.63%  <total for region 2>

....[Hottest Region 3]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 493 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f97b1203f60: mov    0x8(%rsi),%r10d
                     0x00007f97b1203f64: shl    $0x3,%r10
                     0x00007f97b1203f68: cmp    %r10,%rax
                     0x00007f97b1203f6b: jne    0x00007f97b1045b60  ;   {runtime_call}
                     0x00007f97b1203f71: xchg   %ax,%ax
                     0x00007f97b1203f74: nopl   0x0(%rax,%rax,1)
                     0x00007f97b1203f7c: xchg   %ax,%ax
                   [Verified Entry Point]
  1.08%    0.82%     0x00007f97b1203f80: mov    %eax,-0x14000(%rsp)
  3.80%    4.20%     0x00007f97b1203f87: push   %rbp
                     0x00007f97b1203f88: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  1.10%    1.16%     0x00007f97b1203f8c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  3.88%    4.06%     0x00007f97b1203f93: mov    %edx,%r8d
  0.00%              0x00007f97b1203f96: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.10%    1.41%     0x00007f97b1203f9d: mov    %edx,%r9d
                     0x00007f97b1203fa0: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  3.77%    3.42%     0x00007f97b1203fa3: cmp    %r8d,%r9d
                  ╭  0x00007f97b1203fa6: je     0x00007f97b1203fb4  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
                  │  0x00007f97b1203fa8: add    $0x20,%rsp
  1.18%    0.87%  │  0x00007f97b1203fac: pop    %rbp
                  │  0x00007f97b1203fad: test   %eax,0x16fd504d(%rip)        # 0x00007f97c81d9000
                  │                                                ;   {poll_return}
  3.83%    3.93%  │  0x00007f97b1203fb3: retq   
                  ↘  0x00007f97b1203fb4: mov    %rsi,%rbp
                     0x00007f97b1203fb7: mov    %edx,(%rsp)
                     0x00007f97b1203fba: mov    %r9d,0x4(%rsp)
                     0x00007f97b1203fbf: mov    %r8d,0x8(%rsp)
                     0x00007f97b1203fc4: mov    $0xffffff65,%esi
                     0x00007f97b1203fc9: xchg   %ax,%ax
                     0x00007f97b1203fcb: callq  0x00007f97b1004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 19.74%   19.87%  <total for region 3>

....[Hottest Region 4]..............................................................................
Unknown, level 0, java.lang.invoke.MethodHandle::invokeBasic, version 454 (27 bytes) 

                   ang/i
                   &lt;init&gt;
                   n
                    (82 bytes)
                   v
                      callee is too large
                   oke/MethodHandle&apos;
                     # parm0:    rdx:rdx   = &apos;java/lan
                   g/Object&apos;
                     #           [sp+0x0]  (sp of caller)
  1.15%    1.17%     0x00007f97b11eb3c0: 
                   @ 155   java.lang.invoke.MethodHandleStatics::newInternalError
                   mov    
                    (9 bytes)
                   0x14(%rsi),%ebx
  3.77%    1.18%     0x00007f97b11eb3c3: shl    $0x3,%rbx
  0.07%    0.09%     0x00007f97b11eb3c7: mov    0x28(%rbx),%ebx
  1.04%    1.02%     0x00007f97b11eb3ca: shl    $0x3,%rbx
  0.11%    0.08%     0x00007f97b11eb3ce: mov    0x18(%rbx),%rbx
                   @ 5  
  4.21%    4.03%     0x00007f97b11eb3d2: test   
                   java/lang/InternalError
                   %rbx,%rbx
                   ::
                  ╭  0x00007f97b11eb3d5: je     
                  │&lt;init&gt; (not loaded)
                  ↘0x00007f97b11eb3de
  0.22%    0.22%  │  0x00007f97b11eb3db: jmpq   *0x40(%rbx)
                  │   not inlineable
                  ↘  0x00007f97b11eb3de: jmpq   0x00007f97b1057b20  ;   {runtime_call}
                     0x00007f97b11eb3e3: hlt    
                     0x00007f97b11eb3e4: hlt    
                     0x00007f97b11eb3e5: hlt    
                     0x00007f97b11eb3e6: hlt    
                     0x00007f97b11eb3e7: hlt    
                   <nmethod compile_id='454' compile_kind='c2n' level='0' entry='0x00007f97b11eb3c0' size='344' address='0x00007f97b11eb290' relocation_offset='296' consts_offset='344' insts_offset='304' method='java/lang/invoke/MethodHandle invokeBasic (Ljava/lang/Object;)V' bytes='0' count='0' iicount='0' stamp='1.573'/>
....................................................................................................
 10.56%    7.80%  <total for region 4>

....[Hottest Regions]...............................................................................
 39.80%   44.24%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub, version 516 (178 bytes) 
 28.26%   26.63%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 495 (59 bytes) 
 19.74%   19.87%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 493 (51 bytes) 
 10.56%    7.80%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 454 (27 bytes) 
  0.31%    0.29%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.05%            [kernel.kallsyms]  [unknown] (3 bytes) 
  0.03%    0.03%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.03%    0.01%   [kernel.kallsyms]  [unknown] (15 bytes) 
  0.03%    0.01%   [kernel.kallsyms]  [unknown] (38 bytes) 
  0.02%    0.03%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.01%        libc-2.24.so  __GI___libc_write+0x2d (0 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (9 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (16 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (25 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (2 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (50 bytes) 
  0.01%    0.01%   [kernel.kallsyms]  [unknown] (23 bytes) 
  0.01%            [kernel.kallsyms]  [unknown] (0 bytes) 
  0.01%                    libjvm.so  _ZN13defaultStream5writeEPKcm+0x0 (6 bytes) 
  1.02%    1.00%  <...other 302 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 39.80%   44.24%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_indyInterfaceLambda_jmhTest::indyInterfaceLambda_avgt_jmhStub, version 516 
 28.26%   26.63%         C2, level 4  java.lang.invoke.LambdaForm$BMH::reinvoke, version 495 
 19.74%   19.87%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 493 
 10.56%    7.80%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 454 
  1.04%    0.86%   [kernel.kallsyms]  [unknown] 
  0.23%    0.13%         C1, level 3  java.security.CodeSource::getCertificates, version 580 
  0.02%    0.01%        libc-2.24.so  __GI___libc_write+0x2d 
  0.01%                    libjvm.so  _ZN13defaultStream5writeEPKcm+0x0 
  0.01%    0.04%           libjvm.so  _ZN13RelocIterator10initializeEP7nmethodPhS2_+0x140 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.01%    0.04%           libjvm.so  _ZN12outputStream15update_positionEPKcm+0x1 
  0.01%    0.00%        libc-2.24.so  _IO_fflush+0x7e 
  0.01%    0.01%        libc-2.24.so  __libc_enable_asynccancel+0x1f 
  0.01%                  interpreter  invokespecial  183 invokespecial  
  0.01%    0.01%        libc-2.24.so  strlen+0x10 
  0.01%    0.04%           libjvm.so  _ZN13RelocIterator10initializeEP7nmethodPhS2_+0xdf 
  0.01%                    libjvm.so  _ZN10fileStream5writeEPKcm+0x0 
  0.01%                  interpreter  new  187 new  
  0.00%                  interpreter  ifne  154 ifne  
  0.00%                 libc-2.24.so  _IO_fflush+0xbe 
  0.22%    0.17%  <...other 49 warm methods...>
....................................................................................................
100.00%   99.85%  <totals>

....[Distribution by Source]........................................................................
 87.80%   90.74%         C2, level 4
 10.56%    7.80%    Unknown, level 0
  1.04%    0.86%   [kernel.kallsyms]
  0.24%    0.14%         C1, level 3
  0.19%    0.21%        libc-2.24.so
  0.11%    0.23%           libjvm.so
  0.04%    0.01%         interpreter
  0.01%    0.01%  libpthread-2.24.so
  0.00%                  C1, level 1
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.reflectChild

# Run progress: 40.00% complete, ETA 00:08:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 4.190 ns/op
# Warmup Iteration   2: 6.038 ns/op
# Warmup Iteration   3: 4.993 ns/op
# Warmup Iteration   4: 4.749 ns/op
# Warmup Iteration   5: 4.751 ns/op
# Warmup Iteration   6: 4.765 ns/op
# Warmup Iteration   7: 4.745 ns/op
# Warmup Iteration   8: 5.002 ns/op
# Warmup Iteration   9: 4.748 ns/op
# Warmup Iteration  10: 4.771 ns/op
# Warmup Iteration  11: 4.769 ns/op
# Warmup Iteration  12: 4.791 ns/op
# Warmup Iteration  13: 5.112 ns/op
# Warmup Iteration  14: 4.730 ns/op
# Warmup Iteration  15: 4.893 ns/op
# Warmup Iteration  16: 4.936 ns/op
# Warmup Iteration  17: 4.750 ns/op
# Warmup Iteration  18: 4.773 ns/op
# Warmup Iteration  19: 4.767 ns/op
# Warmup Iteration  20: 4.741 ns/op
Iteration   1: 4.754 ns/op
Iteration   2: 4.758 ns/op
Iteration   3: 4.819 ns/op
Iteration   4: 4.735 ns/op
Iteration   5: 4.772 ns/op
Iteration   6: 4.773 ns/op
Iteration   7: 5.241 ns/op
Iteration   8: 5.432 ns/op
Iteration   9: 5.636 ns/op
Iteration  10: 5.193 ns/op
Iteration  11: 5.056 ns/op
Iteration  12: 5.126 ns/op
Iteration  13: 5.798 ns/op
Iteration  14: 5.768 ns/op
Iteration  15: 6.252 ns/op
Iteration  16: 5.773 ns/op
Iteration  17: 5.173 ns/op
Iteration  18: 4.776 ns/op
Iteration  19: 4.761 ns/op
Iteration  20: 4.743 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectChild":
  5.167 ±(99.9%) 0.402 ns/op [Average]
  (min, avg, max) = (4.735, 5.167, 6.252), stdev = 0.463
  CI (99.9%): [4.765, 5.569] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 161978 total address lines.
Perf output processed (skipped 20.113 seconds):
 Column 1: cycles (22468 events)
 Column 2: instructions (22062 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub, version 490 (308 bytes) 

                      0x00007fbdbc9cf689: movzbl 0x94(%r8),%r10d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007fbdbc9cfd65
                      0x00007fbdbc9cf691: test   %r10d,%r10d
                      0x00007fbdbc9cf694: jne    0x00007fbdbc9cf902  ;*ifeq
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@28 (line 184)
                      0x00007fbdbc9cf69a: mov    $0x1,%ebx
                  ╭   0x00007fbdbc9cf69f: jmp    0x00007fbdbc9cf6ee
                  │   0x00007fbdbc9cf6a1: nopw   0x0(%rax,%rax,1)
                  │   0x00007fbdbc9cf6ac: xchg   %ax,%ax
  1.66%    2.76%  │↗  0x00007fbdbc9cf6b0: mov    %rbx,(%rsp)
  1.83%    2.28%  ││  0x00007fbdbc9cf6b4: mov    %r8,%rbp
  0.66%    0.93%  ││  0x00007fbdbc9cf6b7: mov    %rcx,0x60(%rsp)
  0.99%    1.16%  ││  0x00007fbdbc9cf6bc: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@1 (line 13)
                  ││                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                  ││                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                  ││                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                  ││                                                ; - caller.Caller::reflectFoo@14
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  4.62%    1.66%  ││  0x00007fbdbc9cf6c0: mov    $0x2a,%edx
  1.83%    1.45%  ││  0x00007fbdbc9cf6c5: xchg   %ax,%ax
  0.69%    0.61%  ││  0x00007fbdbc9cf6c7: callq  0x00007fbdbc805d60  ; OopMap{rbp=Oop [88]=Oop [96]=Oop off=396}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
                  ││                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                  ││                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                  ││                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                  ││                                                ; - caller.Caller::reflectFoo@14
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  1.20%    1.10%  ││  0x00007fbdbc9cf6cc: mov    %rbp,%r8
  1.37%    1.50%  ││  0x00007fbdbc9cf6cf: movzbl 0x94(%rbp),%r10d   ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@25 (line 184)
  1.72%    1.63%  ││  0x00007fbdbc9cf6d7: mov    (%rsp),%rbx
  1.63%    1.25%  ││  0x00007fbdbc9cf6db: add    $0x1,%rbx          ; OopMap{r8=Oop rbp=Oop [88]=Oop [96]=Oop off=415}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@28 (line 184)
  1.46%    1.32%  ││  0x00007fbdbc9cf6df: test   %eax,0x164db91b(%rip)        # 0x00007fbdd2eab000
                  ││                                                ;   {poll}
  1.64%    1.83%  ││  0x00007fbdbc9cf6e5: test   %r10d,%r10d
                  ││  0x00007fbdbc9cf6e8: jne    0x00007fbdbc9cf907  ;*aload
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@13 (line 182)
  0.62%    0.93%  ↘│  0x00007fbdbc9cf6ee: mov    0x60(%rsp),%rcx
  0.86%    1.16%   │  0x00007fbdbc9cf6f3: mov    0x10(%rcx),%r9d    ;*getfield childInstance
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@1 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  1.41%    1.91%   │  0x00007fbdbc9cf6f7: mov    0x8(%r12,%r9,8),%edx  ;*invokevirtual getClass
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
                   │                                                ; implicit exception: dispatches to 0x00007fbdbc9cfc79
  1.81%    1.76%   │  0x00007fbdbc9cf6fc: mov    $0x71a3f8e40,%r10  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.63%    0.79%   │  0x00007fbdbc9cf706: mov    0x18(%r10),%r10d   ;*getfield cache
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@6 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.93%    0.91%   │  0x00007fbdbc9cf70a: mov    $0x0,%r11
  1.70%    1.60%   │  0x00007fbdbc9cf714: lea    (%r11,%rdx,8),%r11
  1.84%    0.95%   │  0x00007fbdbc9cf718: mov    0x68(%r11),%r11    ;*invokevirtual getClass
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  2.94%    3.14%   │  0x00007fbdbc9cf71c: test   %r10d,%r10d
                   │  0x00007fbdbc9cf71f: je     0x00007fbdbc9cf9b6  ;*ifnull
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@9 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.73%    0.97%   │  0x00007fbdbc9cf725: mov    %r10,%rdi
  0.86%    1.09%   │  0x00007fbdbc9cf728: shl    $0x3,%rdi
  1.57%    2.07%   │  0x00007fbdbc9cf72c: cmp    %r11,%rdi
  0.01%    0.00%   │  0x00007fbdbc9cf72f: jne    0x00007fbdbc9cf9f1  ;*if_acmpeq
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@17 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  1.75%    2.29%   │  0x00007fbdbc9cf735: mov    0x60(%r15),%rdi
  0.75%    1.00%   │  0x00007fbdbc9cf739: mov    $0x71a3f8e40,%r10  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.76%    1.17%   │  0x00007fbdbc9cf743: mov    0x20(%r10),%ebp    ;*getfield reflectMethod
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@35 (line 38)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  1.57%    1.92%   │  0x00007fbdbc9cf747: mov    %rdi,%r10
  1.55%    2.07%   │  0x00007fbdbc9cf74a: add    $0x10,%r10
  0.73%    0.78%   │  0x00007fbdbc9cf74e: lea    (%r12,%r9,8),%rax  ;*getfield childInstance
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@1 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.94%    0.92%   │  0x00007fbdbc9cf752: cmp    0x70(%r15),%r10
                   │  0x00007fbdbc9cf756: jae    0x00007fbdbc9cf811
  1.65%    2.04%   │  0x00007fbdbc9cf75c: mov    %r10,0x60(%r15)
  1.75%    2.09%   │  0x00007fbdbc9cf760: prefetchw 0xc0(%r10)
  0.73%    0.83%   │  0x00007fbdbc9cf768: movq   $0x1,(%rdi)
  0.85%    1.28%   │  0x00007fbdbc9cf76f: prefetchw 0x100(%r10)
  1.54%    1.62%   │  0x00007fbdbc9cf777: movl   $0xf8002213,0x8(%rdi)  ;   {metadata(&apos;java/lang/Object&apos;[])}
  1.94%    1.99%   │  0x00007fbdbc9cf77e: prefetchw 0x140(%r10)
  0.70%    0.72%   │  0x00007fbdbc9cf786: mov    %r12d,0xc(%rdi)
  1.18%    0.97%   │  0x00007fbdbc9cf78a: prefetchw 0x180(%r10)     ;*anewarray
                   │                                                ; - caller.Caller::reflectFoo@11
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  2.73%    1.71%   │  0x00007fbdbc9cf792: movzbl 0xc(%r12,%rbp,8),%r11d  ; implicit exception: dispatches to 0x00007fbdbc9cfc89
  1.75%    2.04%   │  0x00007fbdbc9cf798: test   %r11d,%r11d
                   │  0x00007fbdbc9cf79b: je     0x00007fbdbc9cf891  ;*ifne
                   │                                                ; - java.lang.reflect.Method::invoke@4 (line 488)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.77%    0.97%   │  0x00007fbdbc9cf7a1: mov    0x50(%r12,%rbp,8),%r10d  ;*getfield methodAccessor
                   │                                                ; - java.lang.reflect.Method::invoke@40 (line 494)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.81%    1.09%   │  0x00007fbdbc9cf7a6: mov    0x8(%r12,%r10,8),%r11d  ; implicit exception: dispatches to 0x00007fbdbc9cfcb9
  1.64%    1.93%   │  0x00007fbdbc9cf7ab: cmp    $0xf80088c5,%r11d  ;   {metadata(&apos;sun/reflect/DelegatingMethodAccessorImpl&apos;)}
  0.00%            │  0x00007fbdbc9cf7b2: jne    0x00007fbdbc9cf931
  1.88%    2.34%   │  0x00007fbdbc9cf7b8: shl    $0x3,%r10          ;*invokeinterface invoke
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.65%    0.85%   │  0x00007fbdbc9cf7bc: mov    0xc(%r10),%r10d    ;*getfield delegate
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@1 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.87%    1.25%   │  0x00007fbdbc9cf7c0: mov    0x8(%r12,%r10,8),%esi  ; implicit exception: dispatches to 0x00007fbdbc9cfca1
  1.92%    2.33%   │  0x00007fbdbc9cf7c5: cmp    $0xf801a485,%esi   ;   {metadata(&apos;sun/reflect/GeneratedMethodAccessor1&apos;)}
                   │  0x00007fbdbc9cf7cb: jne    0x00007fbdbc9cf864  ;*invokevirtual invoke
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  1.76%    2.38%   │  0x00007fbdbc9cf7d1: cmp    $0xf80179e3,%edx   ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooChildA&apos;)}
                   │  0x00007fbdbc9cf7d7: jne    0x00007fbdbc9cfc19  ;*checkcast
                   │                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@13
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.79%    1.10%   │  0x00007fbdbc9cf7dd: mov    0xc(%rax),%r10d    ;*getfield blackhole
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@1 (line 13)
                   │                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectChild@4 (line 63)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub@15 (line 182)
  0.97%    1.32%   │  0x00007fbdbc9cf7e1: test   %r10d,%r10d
  0.01%            ╰  0x00007fbdbc9cf7e4: jne    0x00007fbdbc9cf6b0
                      0x00007fbdbc9cf7ea: mov    $0xfffffff6,%esi
                      0x00007fbdbc9cf7ef: mov    %r8,%rbp
                      0x00007fbdbc9cf7f2: rex.W pushq  0x58(%rsp)
                      0x00007fbdbc9cf7f7: rex.W popq   0x50(%rsp)
                      0x00007fbdbc9cf7fc: mov    %rcx,0x58(%rsp)
                      0x00007fbdbc9cf801: mov    %rbx,0x60(%rsp)
                      0x00007fbdbc9cf806: nop    
                      0x00007fbdbc9cf807: callq  0x00007fbdbc7c4ee0  ; OopMap{rbp=Oop [80]=Oop [88]=Oop off=716}
                                                                    ;*invokevirtual consume
                                                                    ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooChildA::bar@6 (line 13)
....................................................................................................
 72.14%   77.76%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 467 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007fbdbc9b7a60: mov    0x8(%rsi),%r10d
                     0x00007fbdbc9b7a64: shl    $0x3,%r10
                     0x00007fbdbc9b7a68: cmp    %r10,%rax
                     0x00007fbdbc9b7a6b: jne    0x00007fbdbc805b60  ;   {runtime_call}
                     0x00007fbdbc9b7a71: xchg   %ax,%ax
                     0x00007fbdbc9b7a74: nopl   0x0(%rax,%rax,1)
                     0x00007fbdbc9b7a7c: xchg   %ax,%ax
                   [Verified Entry Point]
  4.98%    2.11%     0x00007fbdbc9b7a80: mov    %eax,-0x14000(%rsp)
  2.59%    1.65%     0x00007fbdbc9b7a87: push   %rbp
  0.90%    0.62%     0x00007fbdbc9b7a88: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  3.54%    2.36%     0x00007fbdbc9b7a8c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  0.72%    0.56%     0x00007fbdbc9b7a93: mov    %edx,%r8d
  0.90%    0.66%     0x00007fbdbc9b7a96: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.42%    1.63%     0x00007fbdbc9b7a9d: mov    %edx,%r9d
  1.83%    1.94%     0x00007fbdbc9b7aa0: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  0.70%    0.73%     0x00007fbdbc9b7aa3: cmp    %r8d,%r9d
           0.00%  ╭  0x00007fbdbc9b7aa6: je     0x00007fbdbc9b7ab4  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  0.91%    1.16%  │  0x00007fbdbc9b7aa8: add    $0x20,%rsp
  1.57%    1.91%  │  0x00007fbdbc9b7aac: pop    %rbp
  1.70%    1.93%  │  0x00007fbdbc9b7aad: test   %eax,0x164f354d(%rip)        # 0x00007fbdd2eab000
                  │                                                ;   {poll_return}
  0.69%    0.85%  │  0x00007fbdbc9b7ab3: retq   
                  ↘  0x00007fbdbc9b7ab4: mov    %rsi,%rbp
                     0x00007fbdbc9b7ab7: mov    %edx,(%rsp)
                     0x00007fbdbc9b7aba: mov    %r9d,0x4(%rsp)
                     0x00007fbdbc9b7abf: mov    %r8d,0x8(%rsp)
                     0x00007fbdbc9b7ac4: mov    $0xffffff65,%esi
                     0x00007fbdbc9b7ac9: xchg   %ax,%ax
                     0x00007fbdbc9b7acb: callq  0x00007fbdbc7c4ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 22.46%   18.09%  <total for region 2>

....[Hottest Regions]...............................................................................
 72.14%   77.76%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub, version 490 (308 bytes) 
 22.46%   18.09%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 467 (51 bytes) 
  2.22%    1.07%         C1, level 3  java.security.CodeSource::getCertificates, version 565 (9 bytes) 
  0.53%    0.53%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.30%    0.31%   [kernel.kallsyms]  [unknown] (43 bytes) 
  0.10%    0.16%         C1, level 3  java.security.CodeSource::getCertificates, version 565 (39 bytes) 
  0.08%    0.01%         C1, level 3  java.security.CodeSource::getCertificates, version 565 (76 bytes) 
  0.08%    0.03%   [kernel.kallsyms]  [unknown] (11 bytes) 
  0.07%    0.02%   [kernel.kallsyms]  [unknown] (108 bytes) 
  0.05%    0.05%   [kernel.kallsyms]  [unknown] (1 bytes) 
  0.04%    0.05%   [kernel.kallsyms]  [unknown] (13 bytes) 
  0.04%    0.02%   [kernel.kallsyms]  [unknown] (9 bytes) 
  0.03%    0.00%        libc-2.24.so  strlen+0x0 (67 bytes) 
  0.03%    0.01%        libc-2.24.so  __GI___libc_write+0x0 (49 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (12 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.03%         C1, level 3  java.security.CodeSource::getCertificates, version 565 (26 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (4 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (5 bytes) 
  1.72%    1.82%  <...other 490 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 72.14%   77.76%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectChild_jmhTest::reflectChild_avgt_jmhStub, version 490 
 22.46%   18.09%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 467 
  2.88%    1.82%         C1, level 3  java.security.CodeSource::getCertificates, version 565 
  2.06%    1.90%   [kernel.kallsyms]  [unknown] 
  0.03%    0.00%        libc-2.24.so  strlen+0x0 
  0.03%    0.01%        libc-2.24.so  __GI___libc_write+0x0 
  0.02%    0.00%        libc-2.24.so  __libc_disable_asynccancel+0x10 
  0.02%           libpthread-2.24.so  pthread_cond_timedwait@@GLIBC_2.3.2+0x12c 
  0.01%    0.00%      hsdis-amd64.so  oappend+0x13 
  0.01%    0.00%        libc-2.24.so  vfprintf+0x2d8 
  0.01%    0.01%         interpreter  method entry point (kind = zerolocals)  
  0.01%    0.00%        libc-2.24.so  __strchr_sse2+0x0 
  0.01%    0.02%        libc-2.24.so  __strchrnul+0x27 
  0.01%           libpthread-2.24.so  pthread_cond_wait@@GLIBC_2.3.2+0xc0 
  0.01%    0.00%        libc-2.24.so  _IO_old_init+0x3a 
  0.01%    0.01%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.01%                 libc-2.24.so  _IO_default_xsputn+0xf5 
  0.01%    0.03%        libc-2.24.so  _IO_default_xsputn+0x24 
  0.01%               hsdis-amd64.so  print_insn+0xc78 
  0.01%               perf-26430.map  [unknown] 
  0.25%    0.11%  <...other 52 warm methods...>
....................................................................................................
100.00%   99.79%  <totals>

....[Distribution by Source]........................................................................
 94.60%   95.84%         C2, level 4
  2.88%    1.82%         C1, level 3
  2.06%    1.90%   [kernel.kallsyms]
  0.27%    0.29%        libc-2.24.so
  0.07%    0.03%      hsdis-amd64.so
  0.06%    0.04%  libpthread-2.24.so
  0.03%    0.05%           libjvm.so
  0.02%    0.02%         interpreter
  0.01%               perf-26430.map
....................................................................................................
100.00%   99.99%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.reflectClass

# Run progress: 45.00% complete, ETA 00:07:50
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 4.200 ns/op
# Warmup Iteration   2: 3.623 ns/op
# Warmup Iteration   3: 5.993 ns/op
# Warmup Iteration   4: 5.220 ns/op
# Warmup Iteration   5: 4.783 ns/op
# Warmup Iteration   6: 5.007 ns/op
# Warmup Iteration   7: 4.727 ns/op
# Warmup Iteration   8: 4.713 ns/op
# Warmup Iteration   9: 4.727 ns/op
# Warmup Iteration  10: 4.824 ns/op
# Warmup Iteration  11: 4.730 ns/op
# Warmup Iteration  12: 4.741 ns/op
# Warmup Iteration  13: 4.740 ns/op
# Warmup Iteration  14: 4.733 ns/op
# Warmup Iteration  15: 4.736 ns/op
# Warmup Iteration  16: 5.005 ns/op
# Warmup Iteration  17: 4.740 ns/op
# Warmup Iteration  18: 4.754 ns/op
# Warmup Iteration  19: 4.756 ns/op
# Warmup Iteration  20: 4.767 ns/op
Iteration   1: 4.791 ns/op
Iteration   2: 4.774 ns/op
Iteration   3: 4.772 ns/op
Iteration   4: 4.743 ns/op
Iteration   5: 4.747 ns/op
Iteration   6: 4.760 ns/op
Iteration   7: 4.742 ns/op
Iteration   8: 4.787 ns/op
Iteration   9: 4.751 ns/op
Iteration  10: 4.764 ns/op
Iteration  11: 4.876 ns/op
Iteration  12: 4.773 ns/op
Iteration  13: 4.782 ns/op
Iteration  14: 4.727 ns/op
Iteration  15: 4.734 ns/op
Iteration  16: 4.804 ns/op
Iteration  17: 4.761 ns/op
Iteration  18: 4.747 ns/op
Iteration  19: 4.784 ns/op
Iteration  20: 4.759 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectClass":
  4.769 ±(99.9%) 0.028 ns/op [Average]
  (min, avg, max) = (4.727, 4.769, 4.876), stdev = 0.032
  CI (99.9%): [4.741, 4.797] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 157967 total address lines.
Perf output processed (skipped 20.113 seconds):
 Column 1: cycles (22500 events)
 Column 2: instructions (22275 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub, version 497 (305 bytes) 

                      0x00007f5fa520a8c9: movzbl 0x94(%r9),%r11d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007f5fa520afb9
                      0x00007f5fa520a8d1: test   %r11d,%r11d
                      0x00007f5fa520a8d4: jne    0x00007f5fa520ab42  ;*ifeq
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@28 (line 184)
                      0x00007f5fa520a8da: mov    $0x1,%ebx
                  ╭   0x00007f5fa520a8df: jmp    0x00007f5fa520a92e
                  │   0x00007f5fa520a8e1: nopw   0x0(%rax,%rax,1)
                  │   0x00007f5fa520a8ec: xchg   %ax,%ax
  1.68%    2.79%  │↗  0x00007f5fa520a8f0: mov    %rbx,(%rsp)
  1.92%    2.17%  ││  0x00007f5fa520a8f4: mov    %r9,%rbp
  0.79%    0.90%  ││  0x00007f5fa520a8f7: mov    %rcx,0x60(%rsp)
  0.97%    1.14%  ││  0x00007f5fa520a8fc: lea    (%r12,%r11,8),%rsi  ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@1 (line 13)
                  ││                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                  ││                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                  ││                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                  ││                                                ; - caller.Caller::reflectFoo@14
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  2.44%    1.53%  ││  0x00007f5fa520a900: mov    $0x2a,%edx
  1.72%    1.62%  ││  0x00007f5fa520a905: xchg   %ax,%ax
  0.79%    0.72%  ││  0x00007f5fa520a907: callq  0x00007f5fa5045d60  ; OopMap{rbp=Oop [88]=Oop [96]=Oop off=396}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@6 (line 13)
                  ││                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                  ││                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                  ││                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                  ││                                                ; - caller.Caller::reflectFoo@14
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  1.03%    1.00%  ││  0x00007f5fa520a90c: mov    %rbp,%r9
  1.76%    1.68%  ││  0x00007f5fa520a90f: movzbl 0x94(%rbp),%r11d   ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@25 (line 184)
  1.60%    1.74%  ││  0x00007f5fa520a917: mov    (%rsp),%rbx
  1.64%    1.29%  ││  0x00007f5fa520a91b: add    $0x1,%rbx          ; OopMap{r9=Oop rbp=Oop [88]=Oop [96]=Oop off=415}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@28 (line 184)
  1.70%    1.31%  ││  0x00007f5fa520a91f: test   %eax,0x16b826db(%rip)        # 0x00007f5fbbd8d000
                  ││                                                ;   {poll}
  1.87%    1.57%  ││  0x00007f5fa520a925: test   %r11d,%r11d
                  ││  0x00007f5fa520a928: jne    0x00007f5fa520ab47  ;*aload
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@13 (line 182)
  0.70%    0.88%  ↘│  0x00007f5fa520a92e: mov    0x60(%rsp),%rcx
  0.99%    1.24%   │  0x00007f5fa520a933: mov    0xc(%rcx),%r8d     ;*getfield classInstance
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@1 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.55%    2.05%   │  0x00007f5fa520a937: mov    0x8(%r12,%r8,8),%edx  ;*invokevirtual getClass
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
                   │                                                ; implicit exception: dispatches to 0x00007f5fa520aecd
  1.89%    1.78%   │  0x00007f5fa520a93c: mov    $0x71a3f8dd0,%r10  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.84%    0.70%   │  0x00007f5fa520a946: mov    0x18(%r10),%r11d   ;*getfield cache
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@6 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.00%    0.93%   │  0x00007f5fa520a94a: mov    $0x0,%r10
  1.44%    1.51%   │  0x00007f5fa520a954: lea    (%r10,%rdx,8),%r10
  1.84%    1.04%   │  0x00007f5fa520a958: mov    0x68(%r10),%r10    ;*invokevirtual getClass
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  2.74%    3.09%   │  0x00007f5fa520a95c: test   %r11d,%r11d
                   │  0x00007f5fa520a95f: je     0x00007f5fa520ac22  ;*ifnull
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@9 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  0.87%    0.93%   │  0x00007f5fa520a965: mov    %r11,%rdi
  1.09%    1.19%   │  0x00007f5fa520a968: shl    $0x3,%rdi
  1.56%    2.06%   │  0x00007f5fa520a96c: cmp    %r10,%rdi
                   │  0x00007f5fa520a96f: jne    0x00007f5fa520ac5d  ;*if_acmpeq
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@17 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.74%    2.08%   │  0x00007f5fa520a975: mov    0x60(%r15),%rdi
  0.72%    1.00%   │  0x00007f5fa520a979: mov    $0x71a3f8dd0,%r10  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.86%    1.14%   │  0x00007f5fa520a983: mov    0x20(%r10),%ebp    ;*getfield reflectMethod
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@35 (line 38)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.43%    2.14%   │  0x00007f5fa520a987: mov    %rdi,%r10
  1.71%    1.78%   │  0x00007f5fa520a98a: add    $0x10,%r10
  0.85%    0.88%   │  0x00007f5fa520a98e: lea    (%r12,%r8,8),%rax  ;*getfield classInstance
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@1 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  0.96%    1.00%   │  0x00007f5fa520a992: cmp    0x70(%r15),%r10
                   │  0x00007f5fa520a996: jae    0x00007f5fa520aa51
  1.76%    1.96%   │  0x00007f5fa520a99c: mov    %r10,0x60(%r15)
  1.77%    2.07%   │  0x00007f5fa520a9a0: prefetchw 0xc0(%r10)
  0.78%    0.94%   │  0x00007f5fa520a9a8: movq   $0x1,(%rdi)
  0.95%    1.19%   │  0x00007f5fa520a9af: prefetchw 0x100(%r10)
  1.70%    1.58%   │  0x00007f5fa520a9b7: movl   $0xf8002213,0x8(%rdi)  ;   {metadata(&apos;java/lang/Object&apos;[])}
  1.71%    1.90%   │  0x00007f5fa520a9be: prefetchw 0x140(%r10)
  0.79%    0.80%   │  0x00007f5fa520a9c6: mov    %r12d,0xc(%rdi)
  1.26%    0.97%   │  0x00007f5fa520a9ca: prefetchw 0x180(%r10)     ;*anewarray
                   │                                                ; - caller.Caller::reflectFoo@11
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  2.64%    1.54%   │  0x00007f5fa520a9d2: movzbl 0xc(%r12,%rbp,8),%r10d  ; implicit exception: dispatches to 0x00007f5fa520aedd
  1.77%    1.96%   │  0x00007f5fa520a9d8: test   %r10d,%r10d
                   │  0x00007f5fa520a9db: je     0x00007f5fa520aad1  ;*ifne
                   │                                                ; - java.lang.reflect.Method::invoke@4 (line 488)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  0.69%    1.05%   │  0x00007f5fa520a9e1: mov    0x50(%r12,%rbp,8),%r11d  ;*getfield methodAccessor
                   │                                                ; - java.lang.reflect.Method::invoke@40 (line 494)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  0.96%    1.15%   │  0x00007f5fa520a9e6: mov    0x8(%r12,%r11,8),%esi  ; implicit exception: dispatches to 0x00007f5fa520af0d
  1.63%    1.92%   │  0x00007f5fa520a9eb: cmp    $0xf80088c5,%esi   ;   {metadata(&apos;sun/reflect/DelegatingMethodAccessorImpl&apos;)}
                   │  0x00007f5fa520a9f1: jne    0x00007f5fa520ab71
  1.67%    2.41%   │  0x00007f5fa520a9f7: lea    (%r12,%r11,8),%r10  ;*invokeinterface invoke
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  0.83%    1.04%   │  0x00007f5fa520a9fb: mov    0xc(%r10),%r10d    ;*getfield delegate
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@1 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.00%    1.10%   │  0x00007f5fa520a9ff: mov    0x8(%r12,%r10,8),%r11d  ; implicit exception: dispatches to 0x00007f5fa520aef5
  1.89%    2.26%   │  0x00007f5fa520aa04: cmp    $0xf801a485,%r11d  ;   {metadata(&apos;sun/reflect/GeneratedMethodAccessor1&apos;)}
                   │  0x00007f5fa520aa0b: jne    0x00007f5fa520aaa4  ;*invokevirtual invoke
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.73%    1.99%   │  0x00007f5fa520aa11: cmp    $0xf80179a5,%edx   ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooClassA&apos;)}
                   │  0x00007f5fa520aa17: jne    0x00007f5fa520aba5  ;*invokevirtual bar
                   │                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  0.79%    1.05%   │  0x00007f5fa520aa1d: mov    0xc(%rax),%r11d    ;*getfield blackhole
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar@1 (line 13)
                   │                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectClass@4 (line 58)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub@15 (line 182)
  1.08%    1.37%   │  0x00007f5fa520aa21: test   %r11d,%r11d
                   ╰  0x00007f5fa520aa24: jne    0x00007f5fa520a8f0
                      0x00007f5fa520aa2a: mov    $0xfffffff6,%esi
                      0x00007f5fa520aa2f: mov    %r9,%rbp
....................................................................................................
 72.10%   77.11%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 461 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007f5fa51f1ce0: mov    0x8(%rsi),%r10d
                     0x00007f5fa51f1ce4: shl    $0x3,%r10
                     0x00007f5fa51f1ce8: cmp    %r10,%rax
                     0x00007f5fa51f1ceb: jne    0x00007f5fa5045b60  ;   {runtime_call}
                     0x00007f5fa51f1cf1: xchg   %ax,%ax
                     0x00007f5fa51f1cf4: nopl   0x0(%rax,%rax,1)
                     0x00007f5fa51f1cfc: xchg   %ax,%ax
                   [Verified Entry Point]
  4.42%    1.98%     0x00007f5fa51f1d00: mov    %eax,-0x14000(%rsp)
  2.46%    1.70%     0x00007f5fa51f1d07: push   %rbp
  1.01%    0.69%     0x00007f5fa51f1d08: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  3.46%    2.46%     0x00007f5fa51f1d0c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  0.82%    0.55%     0x00007f5fa51f1d13: mov    %edx,%r8d
  0.99%    0.62%     0x00007f5fa51f1d16: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.53%    1.57%     0x00007f5fa51f1d1d: mov    %edx,%r9d
  1.84%    1.87%     0x00007f5fa51f1d20: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  0.87%    0.83%     0x00007f5fa51f1d23: cmp    %r8d,%r9d
                  ╭  0x00007f5fa51f1d26: je     0x00007f5fa51f1d34  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  0.84%    1.23%  │  0x00007f5fa51f1d28: add    $0x20,%rsp
  1.65%    1.93%  │  0x00007f5fa51f1d2c: pop    %rbp
  1.82%    1.98%  │  0x00007f5fa51f1d2d: test   %eax,0x16b9b2cd(%rip)        # 0x00007f5fbbd8d000
                  │                                                ;   {poll_return}
  0.63%    0.91%  │  0x00007f5fa51f1d33: retq   
                  ↘  0x00007f5fa51f1d34: mov    %rsi,%rbp
                     0x00007f5fa51f1d37: mov    %edx,(%rsp)
                     0x00007f5fa51f1d3a: mov    %r9d,0x4(%rsp)
                     0x00007f5fa51f1d3f: mov    %r8d,0x8(%rsp)
                     0x00007f5fa51f1d44: mov    $0xffffff65,%esi
                     0x00007f5fa51f1d49: xchg   %ax,%ax
                     0x00007f5fa51f1d4b: callq  0x00007f5fa5004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 22.33%   18.32%  <total for region 2>

....[Hottest Regions]...............................................................................
 72.10%   77.11%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub, version 497 (305 bytes) 
 22.33%   18.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 461 (51 bytes) 
  2.17%    1.04%         C1, level 3  java.security.CodeSource::getCertificates, version 567 (9 bytes) 
  1.37%    1.38%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.28%    0.28%   [kernel.kallsyms]  [unknown] (41 bytes) 
  0.10%    0.09%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0x54 (35 bytes) 
  0.09%                    libjvm.so  _ZN22ParallelTaskTerminator17offer_terminationEP20TerminatorTerminator+0xc8 (9 bytes) 
  0.04%    0.06%   [kernel.kallsyms]  [unknown] (29 bytes) 
  0.04%    0.03%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0x9d (31 bytes) 
  0.03%    0.03%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.03%    0.01%         C1, level 3  java.security.CodeSource::getCertificates, version 567 (0 bytes) 
  0.03%    0.01%        libc-2.24.so  __strchr_sse2+0x27 (43 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (1 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (1 bytes) 
  0.02%    0.01%   [kernel.kallsyms]  [unknown] (27 bytes) 
  0.02%    0.04%         C1, level 3  java.security.CodeSource::getCertificates, version 567 (54 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.02%    0.02%   [kernel.kallsyms]  [unknown] (68 bytes) 
  0.02%    0.00%   [kernel.kallsyms]  [unknown] (48 bytes) 
  1.24%    1.49%  <...other 415 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 72.10%   77.11%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectClass_jmhTest::reflectClass_avgt_jmhStub, version 497 
 22.33%   18.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 461 
  2.52%    1.62%         C1, level 3  java.security.CodeSource::getCertificates, version 567 
  2.51%    2.49%   [kernel.kallsyms]  [unknown] 
  0.10%    0.09%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0x54 
  0.09%                    libjvm.so  _ZN22ParallelTaskTerminator17offer_terminationEP20TerminatorTerminator+0xc8 
  0.04%    0.03%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0x9d 
  0.03%    0.01%        libc-2.24.so  __strchr_sse2+0x27 
  0.02%    0.00%        libc-2.24.so  __GI___libc_write+0x2d 
  0.01%    0.00%        libc-2.24.so  strlen+0x10 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x10 
  0.01%                 libc-2.24.so  _IO_fwrite+0x59 
  0.01%    0.01%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.01%    0.00%        libc-2.24.so  memcpy@GLIBC_2.2.5+0x27 
  0.01%                 libc-2.24.so  pthread_mutex_unlock+0x0 
  0.01%                  interpreter  new  187 new  
  0.00%               hsdis-amd64.so  print_insn+0xdd 
  0.00%                 libc-2.24.so  vfprintf+0x3f3 
  0.00%    0.00%        libc-2.24.so  vfprintf+0x4 
  0.00%                 runtime stub  StubRoutines::multiplyToLen 
  0.18%    0.05%  <...other 41 warm methods...>
....................................................................................................
100.00%   99.75%  <totals>

....[Distribution by Source]........................................................................
 94.44%   95.43%         C2, level 4
  2.52%    1.62%         C1, level 3
  2.51%    2.49%   [kernel.kallsyms]
  0.24%    0.14%           libjvm.so
  0.22%    0.22%        libc-2.24.so
  0.04%    0.05%      hsdis-amd64.so
  0.02%    0.04%  libpthread-2.24.so
  0.02%    0.00%         interpreter
  0.00%                 runtime stub
  0.00%    0.00%    Unknown, level 0
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.reflectInterfaceImpl

# Run progress: 50.00% complete, ETA 00:07:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 4.187 ns/op
# Warmup Iteration   2: 3.581 ns/op
# Warmup Iteration   3: 6.079 ns/op
# Warmup Iteration   4: 5.002 ns/op
# Warmup Iteration   5: 4.747 ns/op
# Warmup Iteration   6: 4.970 ns/op
# Warmup Iteration   7: 4.736 ns/op
# Warmup Iteration   8: 4.886 ns/op
# Warmup Iteration   9: 4.722 ns/op
# Warmup Iteration  10: 4.768 ns/op
# Warmup Iteration  11: 4.746 ns/op
# Warmup Iteration  12: 4.709 ns/op
# Warmup Iteration  13: 4.731 ns/op
# Warmup Iteration  14: 4.767 ns/op
# Warmup Iteration  15: 4.728 ns/op
# Warmup Iteration  16: 4.733 ns/op
# Warmup Iteration  17: 4.738 ns/op
# Warmup Iteration  18: 4.825 ns/op
# Warmup Iteration  19: 4.747 ns/op
# Warmup Iteration  20: 4.737 ns/op
Iteration   1: 4.893 ns/op
Iteration   2: 4.736 ns/op
Iteration   3: 4.780 ns/op
Iteration   4: 4.772 ns/op
Iteration   5: 4.749 ns/op
Iteration   6: 4.708 ns/op
Iteration   7: 4.729 ns/op
Iteration   8: 4.717 ns/op
Iteration   9: 4.722 ns/op
Iteration  10: 4.742 ns/op
Iteration  11: 4.752 ns/op
Iteration  12: 4.767 ns/op
Iteration  13: 4.741 ns/op
Iteration  14: 4.748 ns/op
Iteration  15: 4.740 ns/op
Iteration  16: 4.839 ns/op
Iteration  17: 4.744 ns/op
Iteration  18: 4.984 ns/op
Iteration  19: 4.769 ns/op
Iteration  20: 4.752 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectInterfaceImpl":
  4.769 ±(99.9%) 0.057 ns/op [Average]
  (min, avg, max) = (4.708, 4.769, 4.984), stdev = 0.066
  CI (99.9%): [4.712, 4.826] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 159257 total address lines.
Perf output processed (skipped 20.125 seconds):
 Column 1: cycles (22219 events)
 Column 2: instructions (22337 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub, version 503 (304 bytes) 

                      0x00007fe5e920ef09: movzbl 0x94(%r8),%r10d    ;*getfield isDone
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@25 (line 184)
                                                                    ; implicit exception: dispatches to 0x00007fe5e920f5dd
                      0x00007fe5e920ef11: test   %r10d,%r10d
                      0x00007fe5e920ef14: jne    0x00007fe5e920f17a  ;*ifeq
                                                                    ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@28 (line 184)
                      0x00007fe5e920ef1a: mov    $0x1,%ebx
                  ╭   0x00007fe5e920ef1f: jmp    0x00007fe5e920ef6e
                  │   0x00007fe5e920ef21: nopw   0x0(%rax,%rax,1)
                  │   0x00007fe5e920ef2c: xchg   %ax,%ax
  1.59%    2.70%  │↗  0x00007fe5e920ef30: mov    %rbx,(%rsp)
  1.85%    2.18%  ││  0x00007fe5e920ef34: mov    %r8,%rbp
  0.68%    0.92%  ││  0x00007fe5e920ef37: mov    %rcx,0x60(%rsp)
  0.95%    1.03%  ││  0x00007fe5e920ef3c: lea    (%r12,%r10,8),%rsi  ;*getfield blackhole
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@1 (line 14)
                  ││                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                  ││                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                  ││                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                  ││                                                ; - caller.Caller::reflectFoo@14
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  3.13%    1.61%  ││  0x00007fe5e920ef40: mov    $0x2a,%edx
  1.95%    1.60%  ││  0x00007fe5e920ef45: xchg   %ax,%ax
  0.68%    0.67%  ││  0x00007fe5e920ef47: callq  0x00007fe5e9045d60  ; OopMap{rbp=Oop [88]=Oop [96]=Oop off=396}
                  ││                                                ;*invokevirtual consume
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
                  ││                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                  ││                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                  ││                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                  ││                                                ; - caller.Caller::reflectFoo@14
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
                  ││                                                ;   {optimized virtual_call}
  0.95%    0.99%  ││  0x00007fe5e920ef4c: mov    %rbp,%r8
  1.41%    1.64%  ││  0x00007fe5e920ef4f: movzbl 0x94(%rbp),%r10d   ;*getfield isDone
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@25 (line 184)
  1.94%    1.62%  ││  0x00007fe5e920ef57: mov    (%rsp),%rbx
  1.69%    1.31%  ││  0x00007fe5e920ef5b: add    $0x1,%rbx          ; OopMap{r8=Oop rbp=Oop [88]=Oop [96]=Oop off=415}
                  ││                                                ;*ifeq
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@28 (line 184)
  1.61%    1.15%  ││  0x00007fe5e920ef5f: test   %eax,0x16afb09b(%rip)        # 0x00007fe5ffd0a000
                  ││                                                ;   {poll}
  1.80%    1.72%  ││  0x00007fe5e920ef65: test   %r10d,%r10d
                  ││  0x00007fe5e920ef68: jne    0x00007fe5e920f17f  ;*aload
                  ││                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@13 (line 182)
  0.69%    0.89%  ↘│  0x00007fe5e920ef6e: mov    0x60(%rsp),%rcx
  0.90%    1.18%   │  0x00007fe5e920ef73: mov    0x14(%rcx),%r9d    ;*getfield interfaceInstanceImpl
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@1 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  1.79%    2.03%   │  0x00007fe5e920ef77: mov    0x8(%r12,%r9,8),%edx  ;*invokevirtual getClass
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
                   │                                                ; implicit exception: dispatches to 0x00007fe5e920f4f1
  1.90%    1.69%   │  0x00007fe5e920ef7c: mov    $0x71a3f85a8,%r10  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.73%    0.61%   │  0x00007fe5e920ef86: mov    0x18(%r10),%r10d   ;*getfield cache
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@6 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.92%    0.96%   │  0x00007fe5e920ef8a: mov    $0x0,%r11
  1.52%    1.63%   │  0x00007fe5e920ef94: lea    (%r11,%rdx,8),%r11
  2.03%    1.06%   │  0x00007fe5e920ef98: mov    0x68(%r11),%r11    ;*invokevirtual getClass
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  2.81%    3.37%   │  0x00007fe5e920ef9c: test   %r10d,%r10d
                   │  0x00007fe5e920ef9f: je     0x00007fe5e920f22e  ;*ifnull
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@9 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.79%    0.90%   │  0x00007fe5e920efa5: mov    %r10,%rdi
  1.02%    1.14%   │  0x00007fe5e920efa8: shl    $0x3,%rdi
  1.64%    2.09%   │  0x00007fe5e920efac: cmp    %r11,%rdi
                   │  0x00007fe5e920efaf: jne    0x00007fe5e920f269  ;*if_acmpeq
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@17 (line 33)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  1.71%    2.32%   │  0x00007fe5e920efb5: mov    0x60(%r15),%rdi
  0.77%    0.91%   │  0x00007fe5e920efb9: mov    $0x71a3f85a8,%r10  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.87%    1.21%   │  0x00007fe5e920efc3: mov    0x20(%r10),%ebp    ;*getfield reflectMethod
                   │                                                ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@35 (line 38)
                   │                                                ; - caller.Caller::reflectFoo@6
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  1.62%    1.95%   │  0x00007fe5e920efc7: mov    %rdi,%r10
  1.78%    1.92%   │  0x00007fe5e920efca: add    $0x10,%r10
  0.75%    0.69%   │  0x00007fe5e920efce: lea    (%r12,%r9,8),%rax  ;*getfield interfaceInstanceImpl
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@1 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.93%    0.91%   │  0x00007fe5e920efd2: cmp    0x70(%r15),%r10
                   │  0x00007fe5e920efd6: jae    0x00007fe5e920f0b9
  1.67%    2.01%   │  0x00007fe5e920efdc: mov    %r10,0x60(%r15)
  1.88%    2.21%   │  0x00007fe5e920efe0: prefetchw 0xc0(%r10)
  0.72%    0.98%   │  0x00007fe5e920efe8: movq   $0x1,(%rdi)
  0.83%    1.09%   │  0x00007fe5e920efef: prefetchw 0x100(%r10)
  1.52%    1.66%   │  0x00007fe5e920eff7: movl   $0xf8002213,0x8(%rdi)  ;   {metadata(&apos;java/lang/Object&apos;[])}
  1.89%    1.84%   │  0x00007fe5e920effe: prefetchw 0x140(%r10)
  0.73%    0.75%   │  0x00007fe5e920f006: mov    %r12d,0xc(%rdi)
  1.13%    1.01%   │  0x00007fe5e920f00a: prefetchw 0x180(%r10)     ;*anewarray
                   │                                                ; - caller.Caller::reflectFoo@11
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  2.75%    1.77%   │  0x00007fe5e920f012: movzbl 0xc(%r12,%rbp,8),%r11d  ; implicit exception: dispatches to 0x00007fe5e920f501
  1.84%    2.02%   │  0x00007fe5e920f018: test   %r11d,%r11d
                   │  0x00007fe5e920f01b: je     0x00007fe5e920f10c  ;*ifne
                   │                                                ; - java.lang.reflect.Method::invoke@4 (line 488)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.73%    0.91%   │  0x00007fe5e920f021: mov    0x50(%r12,%rbp,8),%r10d  ;*getfield methodAccessor
                   │                                                ; - java.lang.reflect.Method::invoke@40 (line 494)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.90%    1.17%   │  0x00007fe5e920f026: mov    0x8(%r12,%r10,8),%r11d  ; implicit exception: dispatches to 0x00007fe5e920f531
  1.77%    2.03%   │  0x00007fe5e920f02b: cmp    $0xf80088c5,%r11d  ;   {metadata(&apos;sun/reflect/DelegatingMethodAccessorImpl&apos;)}
                   │  0x00007fe5e920f032: jne    0x00007fe5e920f1a9
  1.82%    2.39%   │  0x00007fe5e920f038: shl    $0x3,%r10          ;*invokeinterface invoke
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.66%    1.01%   │  0x00007fe5e920f03c: mov    0xc(%r10),%r10d    ;*getfield delegate
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@1 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.89%    1.12%   │  0x00007fe5e920f040: mov    0x8(%r12,%r10,8),%esi  ; implicit exception: dispatches to 0x00007fe5e920f519
  1.83%    2.19%   │  0x00007fe5e920f045: cmp    $0xf801a485,%esi   ;   {metadata(&apos;sun/reflect/GeneratedMethodAccessor1&apos;)}
                   │  0x00007fe5e920f04b: jne    0x00007fe5e920f08d  ;*invokevirtual invoke
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  1.76%    2.35%   │  0x00007fe5e920f04d: cmp    $0xf8019205,%edx   ;   {metadata(&apos;ru/spbau/mit/protocols/benchmarks/testclassesA/FooImplA&apos;)}
                   │  0x00007fe5e920f053: jne    0x00007fe5e920f491  ;*checkcast
                   │                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@13
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.73%    1.00%   │  0x00007fe5e920f059: mov    0xc(%rax),%r10d    ;*getfield blackhole
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@1 (line 14)
                   │                                                ; - sun.reflect.GeneratedMethodAccessor1::invoke@36
                   │                                                ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                   │                                                ; - java.lang.reflect.Method::invoke@56 (line 498)
                   │                                                ; - caller.Caller::reflectFoo@14
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceImpl@4 (line 73)
                   │                                                ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub@15 (line 182)
  0.97%    1.38%   │  0x00007fe5e920f05d: test   %r10d,%r10d
  0.00%            ╰  0x00007fe5e920f060: jne    0x00007fe5e920ef30
                      0x00007fe5e920f066: mov    $0xfffffff6,%esi
                      0x00007fe5e920f06b: mov    %r8,%rbp
                      0x00007fe5e920f06e: rex.W pushq  0x58(%rsp)
                      0x00007fe5e920f073: rex.W popq   0x50(%rsp)
                      0x00007fe5e920f078: mov    %rcx,0x58(%rsp)
                      0x00007fe5e920f07d: mov    %rbx,0x60(%rsp)
                      0x00007fe5e920f082: nop    
                      0x00007fe5e920f083: callq  0x00007fe5e9004ee0  ; OopMap{rbp=Oop [80]=Oop [88]=Oop off=712}
                                                                    ;*invokevirtual consume
                                                                    ; - ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar@6 (line 14)
....................................................................................................
 72.42%   77.46%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 476 (51 bytes) 

                     # parm0:    rdx       = int
                     #           [sp+0x30]  (sp of caller)
                     0x00007fe5e91f2360: mov    0x8(%rsi),%r10d
                     0x00007fe5e91f2364: shl    $0x3,%r10
                     0x00007fe5e91f2368: cmp    %r10,%rax
                     0x00007fe5e91f236b: jne    0x00007fe5e9045b60  ;   {runtime_call}
                     0x00007fe5e91f2371: xchg   %ax,%ax
                     0x00007fe5e91f2374: nopl   0x0(%rax,%rax,1)
                     0x00007fe5e91f237c: xchg   %ax,%ax
                   [Verified Entry Point]
  3.93%    1.89%     0x00007fe5e91f2380: mov    %eax,-0x14000(%rsp)
  2.68%    1.62%     0x00007fe5e91f2387: push   %rbp
  0.87%    0.70%     0x00007fe5e91f2388: sub    $0x20,%rsp         ;*synchronization entry
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 375)
  3.60%    2.34%     0x00007fe5e91f238c: mov    0xb0(%rsi),%r10d   ;*getfield i1
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 375)
  0.77%    0.49%     0x00007fe5e91f2393: mov    %edx,%r8d
  0.89%    0.64%     0x00007fe5e91f2396: xor    0xb8(%rsi),%r8d    ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 377)
  1.38%    1.57%     0x00007fe5e91f239d: mov    %edx,%r9d
  1.76%    2.09%     0x00007fe5e91f23a0: xor    %r10d,%r9d         ;*ixor
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 377)
  0.82%    0.68%     0x00007fe5e91f23a3: cmp    %r8d,%r9d
                  ╭  0x00007fe5e91f23a6: je     0x00007fe5e91f23b4  ;*if_icmpne
                  │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
  0.95%    1.10%  │  0x00007fe5e91f23a8: add    $0x20,%rsp
  1.62%    2.01%  │  0x00007fe5e91f23ac: pop    %rbp
  1.79%    1.79%  │  0x00007fe5e91f23ad: test   %eax,0x16b17c4d(%rip)        # 0x00007fe5ffd0a000
                  │                                                ;   {poll_return}
  0.81%    0.80%  │  0x00007fe5e91f23b3: retq   
                  ↘  0x00007fe5e91f23b4: mov    %rsi,%rbp
                     0x00007fe5e91f23b7: mov    %edx,(%rsp)
                     0x00007fe5e91f23ba: mov    %r9d,0x4(%rsp)
                     0x00007fe5e91f23bf: mov    %r8d,0x8(%rsp)
                     0x00007fe5e91f23c4: mov    $0xffffff65,%esi
                     0x00007fe5e91f23c9: xchg   %ax,%ax
                     0x00007fe5e91f23cb: callq  0x00007fe5e9004ee0  ; OopMap{rbp=Oop off=112}
                                                                   ;*if_icmpne
                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 377)
....................................................................................................
 21.88%   17.71%  <total for region 2>

....[Hottest Regions]...............................................................................
 72.42%   77.46%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub, version 503 (304 bytes) 
 21.88%   17.71%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 476 (51 bytes) 
  1.80%    1.07%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 569 (9 bytes) 
  1.15%    1.13%   [kernel.kallsyms]  [unknown] (5 bytes) 
  0.48%    0.48%   [kernel.kallsyms]  [unknown] (43 bytes) 
  0.18%    0.22%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 569 (40 bytes) 
  0.14%                  C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 569 (9 bytes) 
  0.05%    0.05%   [kernel.kallsyms]  [unknown] (1 bytes) 
  0.05%    0.05%   [kernel.kallsyms]  [unknown] (15 bytes) 
  0.05%    0.05%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 569 (31 bytes) 
  0.04%    0.03%   [kernel.kallsyms]  [unknown] (28 bytes) 
  0.04%    0.04%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.04%    0.04%   [kernel.kallsyms]  [unknown] (9 bytes) 
  0.04%    0.04%   [kernel.kallsyms]  [unknown] (29 bytes) 
  0.04%    0.01%   [kernel.kallsyms]  [unknown] (0 bytes) 
  0.03%    0.03%   [kernel.kallsyms]  [unknown] (4 bytes) 
  0.03%    0.01%   [kernel.kallsyms]  [unknown] (27 bytes) 
  0.03%    0.00%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 569 (0 bytes) 
  0.02%            [kernel.kallsyms]  [unknown] (35 bytes) 
  0.02%    0.03%   [kernel.kallsyms]  [unknown] (76 bytes) 
  1.46%    1.54%  <...other 452 warm regions...>
....................................................................................................
 99.99%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 72.42%   77.46%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub, version 503 
 21.88%   17.71%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 476 
  2.72%    2.58%   [kernel.kallsyms]  [unknown] 
  2.65%    1.96%         C1, level 3  java.util.jar.JarFile::maybeInstantiateVerifier, version 569 
  0.01%    0.01%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.01%           libpthread-2.24.so  pthread_cond_timedwait@@GLIBC_2.3.2+0x12f 
  0.01%    0.00%        libc-2.24.so  pthread_mutex_unlock+0x0 
  0.01%    0.01%        libc-2.24.so  __GI___libc_write+0x2d 
  0.01%    0.02%        libc-2.24.so  _IO_fflush+0x68 
  0.01%                 libc-2.24.so  __vsnprintf_chk+0xa4 
  0.01%    0.01%        libc-2.24.so  __libc_enable_asynccancel+0x1f 
  0.01%                 libc-2.24.so  _IO_fflush+0xd1 
  0.00%    0.00%        libc-2.24.so  _itoa_word+0x57 
  0.00%                 libc-2.24.so  _IO_fwrite+0x11a 
  0.00%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.00%               hsdis-amd64.so  print_insn+0x8f9 
  0.00%                 libc-2.24.so  vfprintf+0xab 
  0.00%                 libc-2.24.so  __strcpy_sse2_unaligned+0x2b7 
  0.00%                 libc-2.24.so  pthread_mutex_lock+0x0 
  0.00%    0.00%        libc-2.24.so  _IO_default_xsputn+0x0 
  0.20%    0.06%  <...other 44 warm methods...>
....................................................................................................
 99.99%   99.83%  <totals>

....[Distribution by Source]........................................................................
 94.30%   95.16%         C2, level 4
  2.72%    2.58%   [kernel.kallsyms]
  2.65%    1.96%         C1, level 3
  0.21%    0.24%        libc-2.24.so
  0.08%    0.01%      hsdis-amd64.so
  0.03%    0.03%  libpthread-2.24.so
  0.01%    0.01%         interpreter
....................................................................................................
 99.99%   99.99%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark.reflectInterfaceLambda

# Run progress: 55.00% complete, ETA 00:06:24
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 176.651 ns/op
# Warmup Iteration   2: 157.372 ns/op
# Warmup Iteration   3: 151.572 ns/op
# Warmup Iteration   4: 151.348 ns/op
# Warmup Iteration   5: 151.299 ns/op
# Warmup Iteration   6: 154.382 ns/op
# Warmup Iteration   7: 151.924 ns/op
# Warmup Iteration   8: 152.462 ns/op
# Warmup Iteration   9: 153.260 ns/op
# Warmup Iteration  10: 154.558 ns/op
# Warmup Iteration  11: 151.428 ns/op
# Warmup Iteration  12: 151.461 ns/op
# Warmup Iteration  13: 154.108 ns/op
# Warmup Iteration  14: 152.228 ns/op
# Warmup Iteration  15: 150.970 ns/op
# Warmup Iteration  16: 153.400 ns/op
# Warmup Iteration  17: 152.883 ns/op
# Warmup Iteration  18: 152.508 ns/op
# Warmup Iteration  19: 151.327 ns/op
# Warmup Iteration  20: 151.253 ns/op
Iteration   1: 151.830 ns/op
Iteration   2: 151.630 ns/op
Iteration   3: 152.364 ns/op
Iteration   4: 152.154 ns/op
Iteration   5: 151.678 ns/op
Iteration   6: 151.551 ns/op
Iteration   7: 151.942 ns/op
Iteration   8: 151.727 ns/op
Iteration   9: 152.067 ns/op
Iteration  10: 151.491 ns/op
Iteration  11: 151.670 ns/op
Iteration  12: 153.132 ns/op
Iteration  13: 151.830 ns/op
Iteration  14: 151.529 ns/op
Iteration  15: 152.174 ns/op
Iteration  16: 153.525 ns/op
Iteration  17: 152.513 ns/op
Iteration  18: 151.826 ns/op
Iteration  19: 152.456 ns/op
Iteration  20: 151.853 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectInterfaceLambda":
  152.047 ±(99.9%) 0.465 ns/op [Average]
  (min, avg, max) = (151.491, 152.047, 153.525), stdev = 0.535
  CI (99.9%): [151.582, 152.512] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 162688 total address lines.
Perf output processed (skipped 20.131 seconds):
 Column 1: cycles (22397 events)
 Column 2: instructions (22331 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub, version 506 (482 bytes) 

                              0x00007fe97d20dfc8: and    $0xfff,%ebx
                              0x00007fe97d20dfce: cmp    $0xff0,%ebx
                  ╭           0x00007fe97d20dfd4: jbe    0x00007fe97d20dfee
                  │           0x00007fe97d20dfd6: sub    $0x10,%rsp
                  │           0x00007fe97d20dfda: mov    %edx,%eax
                  │↗          0x00007fe97d20dfdc: movzwl -0x2(%rdi,%rax,2),%ebx
                  ││          0x00007fe97d20dfe1: mov    %bx,-0x2(%rsp,%rax,2)
                  ││          0x00007fe97d20dfe6: dec    %rax
                  │╰          0x00007fe97d20dfe9: jne    0x00007fe97d20dfdc
                  │           0x00007fe97d20dfeb: mov    %rsp,%rdi
  0.13%    0.09%  ↘           0x00007fe97d20dfee: mov    $0x1,%eax
                              0x00007fe97d20dff3: push   %rcx
                              0x00007fe97d20dff4: mov    %rdi,%rbx
                       ↗↗     0x00007fe97d20dff7: vpcmpestri $0xd,(%rbx),%xmm2
  4.81%    2.01%    ╭  ││     0x00007fe97d20dffd: jb     0x00007fe97d20e01d
  0.68%    0.22%    │  ││     0x00007fe97d20dfff: sub    $0x8,%edx
                    │╭ ││     0x00007fe97d20e002: jle    0x00007fe97d20e023
  0.00%             ││ ││     0x00007fe97d20e004: cmp    %eax,%edx
  0.44%    0.31%    ││╭││     0x00007fe97d20e006: js     0x00007fe97d20e023
                    │││││     0x00007fe97d20e008: add    $0x10,%rbx
  0.65%    0.21%    │││││  ↗  0x00007fe97d20e00c: cmp    $0x8,%edx
                    │││╰│  │  0x00007fe97d20e00f: jge    0x00007fe97d20dff7
                    │││ │  │  0x00007fe97d20e011: lea    -0x10(%rbx,%rdx,2),%rbx
                    │││ │  │  0x00007fe97d20e016: mov    $0x8,%edx
                    │││ ╰  │  0x00007fe97d20e01b: jmp    0x00007fe97d20dff7
  0.10%    0.01%    ↘││    │  0x00007fe97d20e01d: sub    %ecx,%edx
           0.00%     ││    │  0x00007fe97d20e01f: cmp    %eax,%edx
                     ││  ╭ │  0x00007fe97d20e021: jge    0x00007fe97d20e02a
                     ↘↘  │ │  0x00007fe97d20e023: mov    $0xffffffff,%ebx
                         │╭│  0x00007fe97d20e028: jmp    0x00007fe97d20e039
  0.19%    0.08%         ↘││  0x00007fe97d20e02a: lea    (%rbx,%rcx,2),%rbx
                          ││  0x00007fe97d20e02e: cmp    $0x7,%ecx
                          │╰  0x00007fe97d20e031: jg     0x00007fe97d20e00c
           0.01%          │   0x00007fe97d20e033: sub    %rdi,%rbx
                          │   0x00007fe97d20e036: shr    $0x1,%ebx
  0.16%    0.07%          ↘   0x00007fe97d20e039: pop    %rsp
  0.20%    0.11%              0x00007fe97d20e03a: mov    %r10,%rdi
                              0x00007fe97d20e03d: mov    %r11d,%r10d
  0.01%    0.00%              0x00007fe97d20e040: mov    %r9,%rcx
                              0x00007fe97d20e043: vmovq  %xmm0,%r11
  0.19%    0.18%              0x00007fe97d20e048: vmovq  %xmm1,%r9          ;*invokevirtual indexOf
                                                                            ; - sun.reflect.misc.ReflectUtil::isVMAnonymousClass@6 (line 344)
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@24 (line 50)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e04d: cmp    $0xffffffffffffffff,%ebx
                              0x00007fe97d20e050: jle    0x00007fe97d20e4c9  ;*ifne
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@27 (line 50)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e056: mov    %r14,0x70(%rsp)
                              0x00007fe97d20e05b: mov    %rdi,0x60(%rsp)
  0.15%    0.13%              0x00007fe97d20e060: mov    %r13,(%rsp)
                              0x00007fe97d20e064: mov    %rcx,%rdx
                              0x00007fe97d20e067: mov    %r11,%rcx          ;*if_icmple
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@14 (line 49)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e06a: mov    %rbp,%rsi
  0.18%    0.09%              0x00007fe97d20e06d: shl    $0x3,%rsi          ;*getfield method
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@95 (line 62)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e071: mov    $0x718fac3b0,%rbp  ;   {oop([C)}
           0.00%              0x00007fe97d20e07b: callq  0x00007fe97d046160  ; OopMap{rbp=Oop [96]=Oop [104]=Oop [112]=Oop [48]=Derived_oop_rbp off=864}
                                                                            ;*invokestatic invoke0
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@100 (line 62)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                                                                            ;   {static_call}
  0.01%    0.02%              0x00007fe97d20e080: mov    0x60(%rsp),%rdi
  0.13%    0.14%              0x00007fe97d20e085: movzbl 0x94(%rdi),%r11d   ;*getfield isDone
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@25 (line 184)
  0.01%    0.01%              0x00007fe97d20e08d: mov    (%rsp),%r13
  0.01%    0.01%              0x00007fe97d20e091: add    $0x1,%r13          ;*ladd
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@21 (line 183)
           0.00%              0x00007fe97d20e095: mov    $0x718fac3b0,%r10  ; OopMap{r10=Oop rdi=Oop [96]=Oop [104]=Oop [112]=Oop [48]=Derived_oop_r10 off=895}
                                                                            ;*ifeq
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@28 (line 184)
                                                                            ;   {oop([C)}
  0.12%    0.14%              0x00007fe97d20e09f: test   %eax,0x16f45f5b(%rip)        # 0x00007fe994154000
                                                                            ;   {poll}
  0.01%    0.00%              0x00007fe97d20e0a5: test   %r11d,%r11d
                              0x00007fe97d20e0a8: jne    0x00007fe97d20e360  ;*aload
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@13 (line 182)
  0.02%    0.01%              0x00007fe97d20e0ae: mov    0x70(%rsp),%r14
  0.00%                       0x00007fe97d20e0b3: mov    0x18(%r14),%r10d   ;*getfield interfaceInstanceLambda
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@1 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.20%    0.19%              0x00007fe97d20e0b7: mov    0x8(%r12,%r10,8),%r11d  ;*invokevirtual getClass
                                                                            ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                                                                            ; - caller.Caller::reflectFoo@6
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                                                                            ; implicit exception: dispatches to 0x00007fe97d20e751
  0.07%    0.09%              0x00007fe97d20e0bc: mov    $0x71a3f8478,%r8   ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
  0.00%    0.00%              0x00007fe97d20e0c6: mov    0x18(%r8),%r8d     ;*getfield cache
                                                                            ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@6 (line 33)
                                                                            ; - caller.Caller::reflectFoo@6
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.01%                       0x00007fe97d20e0ca: shl    $0x3,%r11
  0.09%    0.22%              0x00007fe97d20e0ce: mov    0x68(%r11),%r11    ;*invokevirtual getClass
                                                                            ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@1 (line 32)
                                                                            ; - caller.Caller::reflectFoo@6
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.32%    0.36%              0x00007fe97d20e0d2: test   %r8d,%r8d
                              0x00007fe97d20e0d5: je     0x00007fe97d20e451  ;*ifnull
                                                                            ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@9 (line 33)
                                                                            ; - caller.Caller::reflectFoo@6
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e0db: mov    %r8,%r9
                              0x00007fe97d20e0de: shl    $0x3,%r9
  0.06%    0.13%              0x00007fe97d20e0e2: cmp    %r11,%r9
                              0x00007fe97d20e0e5: jne    0x00007fe97d20e48d  ;*if_acmpeq
                                                                            ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@17 (line 33)
                                                                            ; - caller.Caller::reflectFoo@6
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.06%    0.12%              0x00007fe97d20e0eb: mov    0x60(%r15),%rax
                              0x00007fe97d20e0ef: mov    $0x71a3f8478,%r11  ;   {oop(a &apos;ru/spbau/mit/protocols/generator/ProtocolCallSite&apos;)}
                              0x00007fe97d20e0f9: mov    0x20(%r11),%r11d   ;*getfield reflectMethod
                                                                            ; - ru.spbau.mit.protocols.generator.ProtocolCallSite::getReflectMethod@35 (line 38)
                                                                            ; - caller.Caller::reflectFoo@6
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.07%    0.07%              0x00007fe97d20e0fd: mov    %r11d,0xc(%rsp)
  0.08%    0.13%              0x00007fe97d20e102: mov    %rax,%r11
                              0x00007fe97d20e105: add    $0x10,%r11
           0.00%              0x00007fe97d20e109: lea    (%r12,%r10,8),%rcx  ;*getfield interfaceInstanceLambda
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@1 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.05%    0.10%              0x00007fe97d20e10d: cmp    0x70(%r15),%r11
                              0x00007fe97d20e111: jae    0x00007fe97d20e29a
  0.09%    0.10%              0x00007fe97d20e117: mov    %r11,0x60(%r15)
                              0x00007fe97d20e11b: prefetchw 0xc0(%r11)
                              0x00007fe97d20e123: movq   $0x1,(%rax)
  0.06%    0.10%              0x00007fe97d20e12a: prefetchw 0x100(%r11)
  0.11%    0.16%              0x00007fe97d20e132: movl   $0xf8002213,0x8(%rax)  ;   {metadata(&apos;java/lang/Object&apos;[])}
                              0x00007fe97d20e139: prefetchw 0x140(%r11)
                              0x00007fe97d20e141: mov    %r12d,0xc(%rax)
  0.09%    0.11%              0x00007fe97d20e145: prefetchw 0x180(%r11)
  0.10%    0.13%              0x00007fe97d20e14d: mov    %rax,%r11          ;*anewarray
                                                                            ; - caller.Caller::reflectFoo@11
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e150: mov    0xc(%rsp),%ebp
  0.00%                       0x00007fe97d20e154: movzbl 0xc(%r12,%rbp,8),%r8d  ; implicit exception: dispatches to 0x00007fe97d20e761
  0.07%    0.01%              0x00007fe97d20e15a: test   %r8d,%r8d
                              0x00007fe97d20e15d: je     0x00007fe97d20e2ed  ;*ifne
                                                                            ; - java.lang.reflect.Method::invoke@4 (line 488)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.09%    0.08%              0x00007fe97d20e163: mov    0xc(%rsp),%ebp
                              0x00007fe97d20e167: mov    0x50(%r12,%rbp,8),%r8d  ;*getfield methodAccessor
                                                                            ; - java.lang.reflect.Method::invoke@40 (line 494)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.00%    0.00%              0x00007fe97d20e16c: mov    0x8(%r12,%r8,8),%r9d  ; implicit exception: dispatches to 0x00007fe97d20e7b1
  0.08%    0.12%              0x00007fe97d20e171: cmp    $0xf80088c5,%r9d   ;   {metadata(&apos;sun/reflect/DelegatingMethodAccessorImpl&apos;)}
                              0x00007fe97d20e178: jne    0x00007fe97d20e3e6
  0.08%    0.12%              0x00007fe97d20e17e: shl    $0x3,%r8           ;*invokeinterface invoke
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                              0x00007fe97d20e182: mov    0xc(%r8),%ebx      ;*getfield delegate
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@1 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.00%                       0x00007fe97d20e186: mov    0x8(%r12,%rbx,8),%r9d  ; implicit exception: dispatches to 0x00007fe97d20e779
  0.30%    0.28%              0x00007fe97d20e18b: cmp    $0xf8008883,%r9d   ;   {metadata(&apos;sun/reflect/NativeMethodAccessorImpl&apos;)}
                              0x00007fe97d20e192: jne    0x00007fe97d20e41d
  0.12%    0.11%              0x00007fe97d20e198: mov    $0x718f869a0,%r8   ;   {oop(a &apos;java/lang/Class&apos; = &apos;sun/reflect/ReflectionFactory&apos;)}
                              0x00007fe97d20e1a2: mov    0x74(%r8),%r8d
                              0x00007fe97d20e1a6: lea    (%r12,%rbx,8),%r9  ;*invokevirtual invoke
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.04%    0.09%              0x00007fe97d20e1aa: mov    0xc(%r9),%ebx
  0.12%    0.13%              0x00007fe97d20e1ae: mov    0x10(%r9),%ebp     ;*getfield method
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@18 (line 49)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.00%    0.00%              0x00007fe97d20e1b2: inc    %ebx               ;*iadd
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@6 (line 49)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.01%    0.01%              0x00007fe97d20e1b4: mov    %ebx,0xc(%r9)      ;*putfield numInvocations
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@8 (line 49)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
  0.26%    0.23%              0x00007fe97d20e1b8: cmp    %r8d,%ebx
                              0x00007fe97d20e1bb: jle    0x00007fe97d20e281  ;*if_icmple
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@14 (line 49)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
           0.00%              0x00007fe97d20e1c1: mov    0x28(%r12,%rbp,8),%r8d  ;*getfield clazz
                                                                            ; - java.lang.reflect.Method::getDeclaringClass@1 (line 185)
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@21 (line 50)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                                                                            ; implicit exception: dispatches to 0x00007fe97d20e791
  0.24%    0.25%              0x00007fe97d20e1c6: mov    %r8d,0xc(%rsp)
  0.31%    0.30%              0x00007fe97d20e1cb: mov    0x14(%r12,%r8,8),%r8d  ;*getfield name
                                                                            ; - java.lang.Class::getName@1 (line 640)
                                                                            ; - sun.reflect.misc.ReflectUtil::isVMAnonymousClass@1 (line 344)
                                                                            ; - sun.reflect.NativeMethodAccessorImpl::invoke@24 (line 50)
                                                                            ; - sun.reflect.DelegatingMethodAccessorImpl::invoke@6 (line 43)
                                                                            ; - java.lang.reflect.Method::invoke@56 (line 498)
                                                                            ; - caller.Caller::reflectFoo@14
                                                                            ; - ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark::reflectInterfaceLambda@4 (line 68)
                                                                            ; - ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub@15 (line 182)
                                                                            ; implicit exception: dispatches to 0x00007fe97d20e7a1
  0.50%    0.56%              0x00007fe97d20e1d0: test   %r8d,%r8d
                              0x00007fe97d20e1d3: jne    0x00007fe97d20df80  ;*ifnonnull
....................................................................................................
 11.90%    8.18%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.90%    8.18%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub, version 506 (482 bytes) 
  6.26%    6.34%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (462 bytes) 
  5.44%    6.31%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (282 bytes) 
  4.07%    5.37%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (280 bytes) 
  4.03%    4.33%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (460 bytes) 
  3.93%    4.18%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (275 bytes) 
  3.50%    3.90%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (305 bytes) 
  2.57%    2.58%        runtime stub  StubRoutines::call_stub (209 bytes) 
  2.54%    2.86%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (201 bytes) 
  2.38%    3.15%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (193 bytes) 
  2.11%    0.80%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (151 bytes) 
  2.04%    2.11%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub, version 506 (55 bytes) 
  1.92%    1.97%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (233 bytes) 
  1.92%    2.41%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (63 bytes) 
  1.82%    2.16%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9::bar, version 474 (47 bytes) 
  1.81%    1.16%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (229 bytes) 
  1.77%    1.77%   [kernel.kallsyms]  [unknown] (5 bytes) 
  1.74%    0.61%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (137 bytes) 
  1.54%    1.13%    Unknown, level 0  sun.reflect.NativeMethodAccessorImpl::invoke0, version 455 (126 bytes) 
  1.54%    1.73%         C1, level 3  java.net.URLClassLoader$1::run, version 575 (124 bytes) 
 35.17%   36.93%  <...other 360 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 74.02%   77.27%         C1, level 3  java.net.URLClassLoader$1::run, version 575 
 13.94%   10.29%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmark_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub, version 506 
  3.41%    3.01%    Unknown, level 0  sun.reflect.NativeMethodAccessorImpl::invoke0, version 455 
  2.89%    2.91%   [kernel.kallsyms]  [unknown] 
  2.57%    2.58%        runtime stub  StubRoutines::call_stub 
  1.82%    2.16%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmark$$Lambda$9::bar, version 474 
  0.77%    0.97%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 476 
  0.42%    0.62%      perf-26641.map  [unknown] 
  0.01%    0.01%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.01%    0.01%        libc-2.24.so  __strchrnul+0x0 
  0.01%    0.00%        libc-2.24.so  pthread_mutex_unlock+0x17 
  0.00%                 libc-2.24.so  _IO_fflush+0xd1 
  0.00%           libpthread-2.24.so  pthread_mutex_unlock+0x2e 
  0.00%    0.01%        libc-2.24.so  _IO_default_xsputn+0x76 
  0.00%                 libc-2.24.so  __GI___libc_read+0x2d 
  0.00%                 libc-2.24.so  __strcpy_sse2_unaligned+0x2b7 
  0.00%    0.00%        libc-2.24.so  _IO_no_init+0x0 
  0.00%                  C1, level 3  java.util.Random::next, version 554 
  0.00%                 libc-2.24.so  _itoa_word+0xc7 
  0.08%    0.05%  <...other 17 warm methods...>
....................................................................................................
100.00%   99.90%  <totals>

....[Distribution by Source]........................................................................
 74.03%   77.27%         C1, level 3
 16.53%   13.42%         C2, level 4
  3.41%    3.01%    Unknown, level 0
  2.89%    2.91%   [kernel.kallsyms]
  2.57%    2.58%        runtime stub
  0.42%    0.62%      perf-26641.map
  0.11%    0.16%        libc-2.24.so
  0.03%    0.01%  libpthread-2.24.so
  0.01%    0.01%         interpreter
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.indyChild

# Run progress: 60.00% complete, ETA 00:05:41
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 4644740.292 ns/op
# Warmup Iteration   2: 578608.709 ns/op
# Warmup Iteration   3: 304537.289 ns/op
# Warmup Iteration   4: 295747.540 ns/op
# Warmup Iteration   5: 289177.455 ns/op
# Warmup Iteration   6: 295147.727 ns/op
# Warmup Iteration   7: 292833.238 ns/op
# Warmup Iteration   8: 304633.887 ns/op
# Warmup Iteration   9: 276842.464 ns/op
# Warmup Iteration  10: 329548.312 ns/op
# Warmup Iteration  11: 379060.606 ns/op
# Warmup Iteration  12: 396156.546 ns/op
# Warmup Iteration  13: 276442.594 ns/op
# Warmup Iteration  14: 291731.570 ns/op
# Warmup Iteration  15: 276680.293 ns/op
# Warmup Iteration  16: 293162.131 ns/op
# Warmup Iteration  17: 293562.165 ns/op
# Warmup Iteration  18: 276593.617 ns/op
# Warmup Iteration  19: 301789.146 ns/op
# Warmup Iteration  20: 277554.264 ns/op
Iteration   1: 310499.804 ns/op
Iteration   2: 307856.240 ns/op
Iteration   3: 297163.063 ns/op
Iteration   4: 296911.979 ns/op
Iteration   5: 276662.433 ns/op
Iteration   6: 300336.452 ns/op
Iteration   7: 276148.843 ns/op
Iteration   8: 300820.202 ns/op
Iteration   9: 298769.047 ns/op
Iteration  10: 276800.011 ns/op
Iteration  11: 300694.420 ns/op
Iteration  12: 276828.445 ns/op
Iteration  13: 301369.888 ns/op
Iteration  14: 277898.801 ns/op
Iteration  15: 301737.357 ns/op
Iteration  16: 309325.510 ns/op
Iteration  17: 276924.271 ns/op
Iteration  18: 304874.285 ns/op
Iteration  19: 276341.361 ns/op
Iteration  20: 306031.758 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyChild":
  293699.708 ±(99.9%) 11478.327 ns/op [Average]
  (min, avg, max) = (276148.843, 293699.708, 310499.804), stdev = 13218.458
  CI (99.9%): [282221.382, 305178.035] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 234774 total address lines.
Perf output processed (skipped 20.221 seconds):
 Column 1: cycles (22243 events)
 Column 2: instructions (22059 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, java.lang.invoke.MethodType::makeImpl, version 764 (639 bytes) 

                      Decoding compiled method 0x00007f7d592b5210:
                      Code:
                      [Entry Point]
                      [Verified Entry Point]
                      [Constants]
                        # {method} {0x00007f7d55ea4f10} &apos;makeImpl&apos; &apos;(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType;&apos; in &apos;java/lang/invoke/MethodType&apos;
                        # parm0:    rsi:rsi   = &apos;java/lang/Class&apos;
                        # parm1:    rdx:rdx   = &apos;[Ljava/lang/Class;&apos;
                        # parm2:    rcx       = boolean
                        #           [sp+0x70]  (sp of caller)
  0.18%    0.19%        0x00007f7d592b5460: mov    %eax,-0x14000(%rsp)
  0.13%    0.06%        0x00007f7d592b5467: push   %rbp
  0.04%    0.08%        0x00007f7d592b5468: sub    $0x60,%rsp         ;*synchronization entry
                                                                      ; - java.lang.invoke.MethodType::makeImpl@-1 (line 301)
  0.09%    0.02%        0x00007f7d592b546c: mov    %ecx,0x10(%rsp)
  0.10%    0.13%        0x00007f7d592b5470: mov    %rdx,0x8(%rsp)
  0.13%    0.18%        0x00007f7d592b5475: mov    %rsi,(%rsp)
  0.08%    0.01%        0x00007f7d592b5479: mov    $0xf80017a8,%r10d  ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
  0.07%                 0x00007f7d592b547f: shl    $0x3,%r10
  0.01%    0.00%        0x00007f7d592b5483: mov    %r10,0x18(%rsp)
  0.13%    0.11%        0x00007f7d592b5488: mov    0x60(%r15),%rbp
  0.02%    0.00%        0x00007f7d592b548c: mov    %rbp,%r10
  0.04%    0.01%        0x00007f7d592b548f: add    $0x28,%r10
  0.02%    0.01%        0x00007f7d592b5493: cmp    0x70(%r15),%r10
                        0x00007f7d592b5497: jae    0x00007f7d592b59c6
  0.06%    0.11%        0x00007f7d592b549d: mov    %r10,0x60(%r15)
  0.04%    0.03%        0x00007f7d592b54a1: prefetchw 0xc0(%r10)
  0.03%    0.01%        0x00007f7d592b54a9: mov    0x18(%rsp),%r10
  0.03%    0.08%        0x00007f7d592b54ae: mov    0xa8(%r10),%r10
  0.38%    0.40%        0x00007f7d592b54b5: mov    %r10,0x0(%rbp)
  0.22%    0.19%        0x00007f7d592b54b9: movl   $0xf80017a8,0x8(%rbp)  ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
  0.05%    0.03%        0x00007f7d592b54c0: mov    %r12d,0x14(%rbp)
  0.03%    0.03%        0x00007f7d592b54c4: mov    %r12,0x18(%rbp)
  0.04%    0.03%        0x00007f7d592b54c8: mov    %r12,0x20(%rbp)    ;*new  ; - java.lang.invoke.MethodType::makeImpl@3 (line 301)
  0.14%    0.10%        0x00007f7d592b54cc: mov    (%rsp),%rcx
  0.02%    0.01%        0x00007f7d592b54d0: mov    %rcx,%r10
           0.01%        0x00007f7d592b54d3: shr    $0x3,%r10
  0.01%    0.02%        0x00007f7d592b54d7: mov    %r10d,0xc(%rbp)    ;*putfield rtype
                                                                      ; - java.lang.invoke.MethodType::&lt;init&gt;@6 (line 121)
                                                                      ; - java.lang.invoke.MethodType::makeImpl@9 (line 301)
  0.13%    0.13%        0x00007f7d592b54db: mov    0x8(%rsp),%r8
  0.02%    0.05%        0x00007f7d592b54e0: mov    %r8,%r10
  0.00%    0.01%        0x00007f7d592b54e3: shr    $0x3,%r10
  0.00%                 0x00007f7d592b54e7: mov    %r10d,0x10(%rbp)   ;*new  ; - java.lang.invoke.MethodType::makeImpl@3 (line 301)
  0.13%    0.07%        0x00007f7d592b54eb: mov    %rbp,%r10
  0.03%    0.03%        0x00007f7d592b54ee: shr    $0x9,%r10
  0.00%                 0x00007f7d592b54f2: mov    $0x7f7d551ff000,%r11
                        0x00007f7d592b54fc: mov    %r12b,(%r11,%r10,1)  ;*synchronization entry
                                                                      ; - java.lang.invoke.MethodType::makeImpl@-1 (line 301)
  0.13%    0.11%        0x00007f7d592b5500: mov    $0x720d810f8,%r10  ;   {oop(a &apos;java/lang/ref/ReferenceQueue&apos;)}
  0.06%    0.04%        0x00007f7d592b550a: mov    0x18(%r10),%r11d   ;*getfield head
                                                                      ; - java.lang.ref.ReferenceQueue::poll@1 (line 105)
                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
                                                                      ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
           0.01%        0x00007f7d592b550e: test   %r11d,%r11d
                  ╭     0x00007f7d592b5511: jne    0x00007f7d592b56e0  ;*ifnull
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@9 (line 1268)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.01%    0.00%  │     0x00007f7d592b5517: mov    0x60(%r15),%rax
  0.13%    0.14%  │     0x00007f7d592b551b: mov    %rax,%r10
  0.03%    0.05%  │     0x00007f7d592b551e: add    $0x20,%r10
  0.01%           │     0x00007f7d592b5522: cmp    0x70(%r15),%r10
                  │     0x00007f7d592b5526: jae    0x00007f7d592b59e4
  0.02%    0.02%  │     0x00007f7d592b552c: mov    %r10,0x60(%r15)
  0.15%    0.07%  │     0x00007f7d592b5530: prefetchw 0xc0(%r10)
  0.07%    0.06%  │     0x00007f7d592b5538: mov    $0xf800b1b8,%r11d  ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
  0.00%           │     0x00007f7d592b553e: mov    $0x0,%r10
  0.02%           │     0x00007f7d592b5548: lea    (%r10,%r11,8),%r10
  0.12%    0.18%  │     0x00007f7d592b554c: mov    0xa8(%r10),%r10
  0.04%    0.11%  │     0x00007f7d592b5553: mov    %r10,(%rax)
  0.04%    0.01%  │     0x00007f7d592b5556: movl   $0xf800b1b8,0x8(%rax)  ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
  0.03%    0.06%  │     0x00007f7d592b555d: mov    %r12,0x10(%rax)
  0.12%    0.12%  │     0x00007f7d592b5561: mov    %r12,0x18(%rax)
  0.05%    0.10%  │     0x00007f7d592b5565: mov    %rbp,%r11
  0.00%    0.02%  │     0x00007f7d592b5568: shr    $0x3,%r11
  0.03%    0.03%  │     0x00007f7d592b556c: mov    %r11d,0xc(%rax)
  0.12%    0.11%  │     0x00007f7d592b5570: mov    %rax,%rbx          ;*new  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@20 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.06%    0.04%  │     0x00007f7d592b5573: mov    %rbx,%r10
  0.01%    0.01%  │     0x00007f7d592b5576: shr    $0x9,%r10
  0.00%    0.02%  │     0x00007f7d592b557a: mov    $0x7f7d551ff000,%r11
  0.11%    0.14%  │     0x00007f7d592b5584: mov    %r12b,(%r11,%r10,1)  ;*putfield referent
                  │                                                   ; - java.lang.ref.Reference::&lt;init&gt;@6 (line 307)
                  │                                                   ; - java.lang.ref.Reference::&lt;init&gt;@3 (line 303)
                  │                                                   ; - java.lang.ref.WeakReference::&lt;init&gt;@2 (line 57)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@2 (line 1283)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.03%    0.04%  │     0x00007f7d592b5588: mov    $0x720d81118,%r10  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/ref/ReferenceQueue&apos;)}
  0.01%           │     0x00007f7d592b5592: mov    0x68(%r10),%r10d
  0.02%    0.02%  │     0x00007f7d592b5596: mov    %r10d,0x10(%rbx)
  0.16%    0.16%  │     0x00007f7d592b559a: mov    %rbx,%r10
  0.03%    0.05%  │     0x00007f7d592b559d: shr    $0x9,%r10
  0.00%    0.02%  │     0x00007f7d592b55a1: mov    %r12b,(%r11,%r10,1)
  0.02%    0.01%  │     0x00007f7d592b55a5: lock addl $0x0,(%rsp)     ;*putfield queue
                  │                                                   ; - java.lang.ref.Reference::&lt;init&gt;@21 (line 308)
                  │                                                   ; - java.lang.ref.Reference::&lt;init&gt;@3 (line 303)
                  │                                                   ; - java.lang.ref.WeakReference::&lt;init&gt;@2 (line 57)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@2 (line 1283)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  4.51%    4.05%  │     0x00007f7d592b55aa: mov    0xc(%rbp),%r11d    ;*getfield rtype
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@3 (line 775)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.00%           │     0x00007f7d592b55ae: test   %r11d,%r11d
                  │     0x00007f7d592b55b1: je     0x00007f7d592b5b01  ;*invokevirtual hashCode
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@6 (line 775)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │     0x00007f7d592b55b7: lea    (%r12,%r11,8),%rsi  ;*getfield rtype
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@3 (line 775)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.18%           │     0x00007f7d592b55bb: mov    (%rsi),%r10
                  │     0x00007f7d592b55be: mov    %r10,%r11
                  │     0x00007f7d592b55c1: and    $0x7,%r11
                  │     0x00007f7d592b55c5: cmp    $0x1,%r11
                  │     0x00007f7d592b55c9: jne    0x00007f7d592b57cb
  0.21%           │     0x00007f7d592b55cf: shr    $0x8,%r10
                  │     0x00007f7d592b55d3: mov    %r10d,%eax
                  │     0x00007f7d592b55d6: and    $0x7fffffff,%eax
                  │     0x00007f7d592b55dc: test   %eax,%eax
                  │     0x00007f7d592b55de: je     0x00007f7d592b57cb  ;*invokevirtual hashCode
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@6 (line 775)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.12%           │     0x00007f7d592b55e4: mov    0x10(%rbp),%r10d   ;*getfield ptypes
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@12 (line 776)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │     0x00007f7d592b55e8: mov    0xc(%r12,%r10,8),%r11d  ;*arraylength
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@17 (line 776)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │                                                   ; implicit exception: dispatches to 0x00007f7d592b60b5
                  │     0x00007f7d592b55ed: add    $0x1f,%eax         ;*iadd
                  │                                                   ; - java.lang.invoke.MethodType::hashCode@9 (line 775)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │     0x00007f7d592b55f0: test   %r11d,%r11d
                  │╭    0x00007f7d592b55f3: jg     0x00007f7d592b5602  ;*if_icmpge
                  ││                                                  ; - java.lang.invoke.MethodType::hashCode@25 (line 776)
                  ││                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  ││                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  ││                                                  ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.03%           ││    0x00007f7d592b55f5: xor    %r10d,%r10d
                  ││    0x00007f7d592b55f8: mov    %r10d,0x14(%rsp)
                  ││╭   0x00007f7d592b55fd: jmpq   0x00007f7d592b567f
  0.13%           │↘│   0x00007f7d592b5602: test   %r11d,%r11d
                  │ │   0x00007f7d592b5605: jbe    0x00007f7d592b5b11
           0.00%  │ │   0x00007f7d592b560b: mov    %r11d,%r9d
                  │ │   0x00007f7d592b560e: dec    %r9d
                  │ │   0x00007f7d592b5611: cmp    %r11d,%r9d
                  │ │   0x00007f7d592b5614: jae    0x00007f7d592b5b11  ;*aload_2
                  │ │                                                 ; - java.lang.invoke.MethodType::hashCode@28 (line 776)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ │                                                 ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.13%           │ │   0x00007f7d592b561a: lea    (%r12,%r10,8),%rdx  ;*getfield ptypes
                  │ │                                                 ; - java.lang.invoke.MethodType::hashCode@12 (line 776)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ │                                                 ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ │   0x00007f7d592b561e: xor    %r9d,%r9d
                  │ │   0x00007f7d592b5621: xor    %r10d,%r10d
                  │ │   0x00007f7d592b5624: nopl   0x0(%rax,%rax,1)
  0.09%           │ │   0x00007f7d592b562c: xchg   %ax,%ax            ;*aload_2
                  │ │                                                 ; - java.lang.invoke.MethodType::hashCode@28 (line 776)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ │                                                 ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ │↗  0x00007f7d592b5630: mov    0x10(%rdx,%r10,4),%edi  ;*aaload
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@31 (line 776)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ ││  0x00007f7d592b5635: test   %edi,%edi
                  │ ││  0x00007f7d592b5637: je     0x00007f7d592b5af1  ;*invokevirtual hashCode
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@40 (line 777)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ ││  0x00007f7d592b563d: lea    (%r12,%rdi,8),%rsi  ;*aaload
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@31 (line 776)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.11%           │ ││  0x00007f7d592b5641: mov    (%rsi),%rdi        ;*invokevirtual hashCode
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@40 (line 777)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.01%    0.00%  │ ││  0x00007f7d592b5644: mov    %eax,%ebp
                  │ ││  0x00007f7d592b5646: shl    $0x5,%ebp
                  │ ││  0x00007f7d592b5649: sub    %eax,%ebp          ;*imul
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@37 (line 777)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.11%           │ ││  0x00007f7d592b564b: mov    %rdi,%rax
                  │ ││  0x00007f7d592b564e: and    $0x7,%rax
                  │ ││  0x00007f7d592b5652: cmp    $0x1,%rax
                  │ ││  0x00007f7d592b5656: jne    0x00007f7d592b577d
                  │ ││  0x00007f7d592b565c: shr    $0x8,%rdi
  0.13%           │ ││  0x00007f7d592b5660: mov    %edi,%eax
                  │ ││  0x00007f7d592b5662: and    $0x7fffffff,%eax
                  │ ││  0x00007f7d592b5668: test   %eax,%eax
                  │ ││  0x00007f7d592b566a: je     0x00007f7d592b577d  ;*invokevirtual hashCode
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@40 (line 777)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ ││  0x00007f7d592b5670: add    %ebp,%eax          ;*iadd
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@43 (line 777)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.13%           │ ││  0x00007f7d592b5672: inc    %r10d              ;*iinc
                  │ ││                                                ; - java.lang.invoke.MethodType::hashCode@45 (line 776)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ ││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ ││                                                ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ ││  0x00007f7d592b5675: cmp    %r11d,%r10d
                  │ │╰  0x00007f7d592b5678: jl     0x00007f7d592b5630
                  │ │   0x00007f7d592b567a: mov    %r9d,0x14(%rsp)    ;*if_icmpge
                  │ │                                                 ; - java.lang.invoke.MethodType::hashCode@25 (line 776)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │ │                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │ │                                                 ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │ ↘   0x00007f7d592b567f: mov    %r8,0x8(%rsp)
  0.19%           │     0x00007f7d592b5684: mov    %rcx,(%rsp)
                  │     0x00007f7d592b5688: mov    %eax,0x1c(%rbx)    ;*putfield hashcode
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@10 (line 1284)
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │     0x00007f7d592b568b: mov    %rbx,%rdx          ;*synchronization entry
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@-1 (line 1227)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │     0x00007f7d592b568e: mov    $0x720d81190,%rsi  ;   {oop(a &apos;java/util/concurrent/ConcurrentHashMap&apos;)}
  0.16%           │     0x00007f7d592b5698: xchg   %ax,%ax
                  │     0x00007f7d592b569b: callq  0x00007f7d59045d60  ; OopMap{[0]=Oop [8]=Oop off=576}
                  │                                                   ;*invokeinterface get
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │                                                   ;   {optimized virtual_call}
  0.02%    0.02%  │     0x00007f7d592b56a0: test   %rax,%rax
                  │     0x00007f7d592b56a3: je     0x00007f7d592b57f3
  0.08%    0.05%  │     0x00007f7d592b56a9: mov    0x8(%rax),%r11d
  0.09%    0.01%  │     0x00007f7d592b56ad: cmp    $0xf800b1b8,%r11d  ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
                  │     0x00007f7d592b56b4: jne    0x00007f7d592b6050  ;*checkcast
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@33 (line 1230)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
  0.08%    0.00%  │     0x00007f7d592b56ba: mov    0xc(%rax),%r10d    ;*invokevirtual get
                  │                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@42 (line 1232)
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                  │     0x00007f7d592b56be: mov    0x8(%r12,%r10,8),%r8d  ; implicit exception: dispatches to 0x00007f7d592b60c5
  0.14%    0.10%  │     0x00007f7d592b56c3: cmp    $0xf80017a8,%r8d   ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
                  │     0x00007f7d592b56ca: jne    0x00007f7d592b6091
  0.05%    0.01%  │     0x00007f7d592b56d0: lea    (%r12,%r10,8),%rax  ;*synchronization entry
                  │                                                   ; - java.lang.invoke.MethodType::makeImpl@-1 (line 301)
  0.03%    0.02%  │     0x00007f7d592b56d4: add    $0x60,%rsp
  0.05%    0.10%  │     0x00007f7d592b56d8: pop    %rbp
  0.08%    0.05%  │     0x00007f7d592b56d9: test   %eax,0x173ee921(%rip)        # 0x00007f7d706a4000
                  │                                                   ;   {poll_return}
  0.04%    0.05%  │     0x00007f7d592b56df: retq   
                  ↘     0x00007f7d592b56e0: mov    0xc(%r10),%r11d    ;*getfield lock
                                                                      ; - java.lang.ref.ReferenceQueue::poll@10 (line 107)
                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
                                                                      ; - java.lang.invoke.MethodType::makeImpl@12 (line 301)
                        0x00007f7d592b56e4: test   %r11d,%r11d
                        0x00007f7d592b56e7: je     0x00007f7d592b5c31  ;*monitorenter
                                                                      ; - java.lang.ref.ReferenceQueue::poll@15 (line 107)
                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
....................................................................................................
 11.04%    8.37%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.04%    8.37%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 764 (639 bytes) 
  6.18%    7.16%         C2, level 4  java.util.concurrent.ConcurrentHashMap::get, version 813 (836 bytes) 
  5.49%    4.37%         C2, level 4  ru.spbau.mit.protocols.generator.ProtocolCallSite::setupAccessible, version 731 (1134 bytes) 
  5.27%    5.14%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 771 (1920 bytes) 
  3.52%    3.64%         C2, level 4  caller.Caller::foo, version 798 (864 bytes) 
  3.48%    2.26%           libjvm.so  _ZN7Monitor6unlockEv+0x0 (52 bytes) 
  3.13%    3.09%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 692 (469 bytes) 
  2.74%    2.34%         C1, level 3  java.lang.reflect.ReflectAccess::copyField, version 872 (201 bytes) 
  2.68%    2.91%           libjvm.so  _ZN14JNIHandleBlock12weak_oops_doEP17BoolObjectClosureP10OopClosure+0x28 (161 bytes) 
  2.48%    3.48%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 801 (514 bytes) 
  2.31%    2.99%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 766 (157 bytes) 
  1.87%    2.38%           libjvm.so  _ZN7Monitor4lockEv+0x0 (83 bytes) 
  1.66%    1.22%           libjvm.so  _ZN16PSIsAliveClosure11do_object_bEP7oopDesc+0x0 (32 bytes) 
  1.30%    1.92%         C2, level 4  caller.Caller::foo, version 798 (607 bytes) 
  1.20%    1.36%  libpthread-2.24.so  pthread_getspecific+0x0 (58 bytes) 
  1.16%    1.16%   [kernel.kallsyms]  [unknown] (5 bytes) 
  1.15%    1.12%           libjvm.so  _ZN8CallInfoC1EP6MethodP5Klass+0x1 (204 bytes) 
  1.13%    1.13%         C2, level 4  caller.Caller::foo, version 798 (538 bytes) 
  1.12%    2.18%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 641 (257 bytes) 
  1.11%    1.21%         C1, level 3  java.lang.reflect.ReflectAccess::copyField, version 872 (246 bytes) 
 39.95%   40.57%  <...other 528 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.20%   13.47%         C2, level 4  caller.Caller::foo, version 798 
 11.04%    8.37%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 764 
  9.81%    9.71%         C1, level 3  java.lang.reflect.ReflectAccess::copyField, version 872 
  6.18%    7.16%         C2, level 4  java.util.concurrent.ConcurrentHashMap::get, version 813 
  5.49%    4.37%         C2, level 4  ru.spbau.mit.protocols.generator.ProtocolCallSite::setupAccessible, version 731 
  5.44%    5.35%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 771 
  3.68%    3.15%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 692 
  3.48%    2.26%           libjvm.so  _ZN7Monitor6unlockEv+0x0 
  3.06%    3.63%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 801 
  2.75%    2.12%   [kernel.kallsyms]  [unknown] 
  2.68%    2.91%           libjvm.so  _ZN14JNIHandleBlock12weak_oops_doEP17BoolObjectClosureP10OopClosure+0x28 
  2.67%    3.24%         C2, level 4  java.lang.invoke.MemberName::getInvocationType, version 672 
  2.31%    2.99%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 766 
  1.87%    2.38%           libjvm.so  _ZN7Monitor4lockEv+0x0 
  1.66%    1.22%           libjvm.so  _ZN16PSIsAliveClosure11do_object_bEP7oopDesc+0x0 
  1.20%    1.36%  libpthread-2.24.so  pthread_getspecific+0x0 
  1.15%    1.12%           libjvm.so  _ZN8CallInfoC1EP6MethodP5Klass+0x1 
  1.12%    2.18%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 641 
  0.94%    0.58%         C2, level 4  ru.spbau.mit.protocols.benchmarks.testclassesB.FooClassB::bar, version 680 
  0.94%    0.67%         C2, level 4  ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar, version 679 
 21.31%   21.54%  <...other 155 warm methods...>
....................................................................................................
100.00%   99.78%  <totals>

....[Distribution by Source]........................................................................
 59.30%   60.73%         C2, level 4
 21.77%   21.26%           libjvm.so
  9.83%    9.71%         C1, level 3
  2.85%    2.95%    Unknown, level 0
  2.75%    2.12%   [kernel.kallsyms]
  1.80%    1.35%        runtime stub
  1.21%    1.37%  libpthread-2.24.so
  0.41%    0.31%        libc-2.24.so
  0.05%    0.20%      perf-26712.map
  0.01%                  interpreter
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.indyClass

# Run progress: 65.00% complete, ETA 00:04:59
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 4799718.464 ns/op
# Warmup Iteration   2: 709978.228 ns/op
# Warmup Iteration   3: 316189.899 ns/op
# Warmup Iteration   4: 317487.484 ns/op
# Warmup Iteration   5: 322981.760 ns/op
# Warmup Iteration   6: 314453.653 ns/op
# Warmup Iteration   7: 317657.519 ns/op
# Warmup Iteration   8: 318084.333 ns/op
# Warmup Iteration   9: 309328.737 ns/op
# Warmup Iteration  10: 298830.337 ns/op
# Warmup Iteration  11: 321294.465 ns/op
# Warmup Iteration  12: 313937.225 ns/op
# Warmup Iteration  13: 313456.266 ns/op
# Warmup Iteration  14: 314298.706 ns/op
# Warmup Iteration  15: 299833.250 ns/op
# Warmup Iteration  16: 370071.626 ns/op
# Warmup Iteration  17: 311260.196 ns/op
# Warmup Iteration  18: 345263.514 ns/op
# Warmup Iteration  19: 297038.709 ns/op
# Warmup Iteration  20: 316345.465 ns/op
Iteration   1: 306684.166 ns/op
Iteration   2: 357496.025 ns/op
Iteration   3: 391952.093 ns/op
Iteration   4: 358136.914 ns/op
Iteration   5: 331357.086 ns/op
Iteration   6: 335182.922 ns/op
Iteration   7: 294788.670 ns/op
Iteration   8: 322241.291 ns/op
Iteration   9: 321037.442 ns/op
Iteration  10: 293255.093 ns/op
Iteration  11: 318442.289 ns/op
Iteration  12: 293851.037 ns/op
Iteration  13: 324128.963 ns/op
Iteration  14: 301378.951 ns/op
Iteration  15: 337062.420 ns/op
Iteration  16: 325744.867 ns/op
Iteration  17: 360105.610 ns/op
Iteration  18: 301342.547 ns/op
Iteration  19: 329275.499 ns/op
Iteration  20: 326655.734 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyClass":
  326505.981 ±(99.9%) 22313.583 ns/op [Average]
  (min, avg, max) = (293255.093, 326505.981, 391952.093), stdev = 25696.356
  CI (99.9%): [304192.398, 348819.564] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 231585 total address lines.
Perf output processed (skipped 20.259 seconds):
 Column 1: cycles (22155 events)
 Column 2: instructions (21831 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  8.33%    7.19%         C2, level 4  java.lang.invoke.MethodType$ConcurrentWeakInternSet::get, version 766 (482 bytes) 
  5.99%    6.07%         C2, level 4  caller.Caller::foo, version 768 (1589 bytes) 
  5.44%    6.33%         C2, level 4  java.util.concurrent.ConcurrentHashMap::get, version 782 (850 bytes) 
  5.22%    5.05%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 753 (1881 bytes) 
  3.63%    1.99%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 (52 bytes) 
  3.31%    3.12%         C2, level 4  caller.Caller::foo, version 768 (837 bytes) 
  2.58%    2.72%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 (161 bytes) 
  2.55%    3.99%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 772 (686 bytes) 
  2.34%    2.24%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 (201 bytes) 
  2.31%    3.04%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 747 (164 bytes) 
  2.19%    2.51%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 (83 bytes) 
  2.04%    1.84%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 662 (307 bytes) 
  1.60%    1.21%         C2, level 4  caller.Caller::foo, version 768 (102 bytes) 
  1.58%    1.85%         C2, level 4  java.lang.invoke.MethodHandles$Lookup::getDirectMethodNoSecurityManager, version 722 (506 bytes) 
  1.52%    1.18%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 (32 bytes) 
  1.47%    1.48%   [kernel.kallsyms]  [unknown] (5 bytes) 
  1.31%    1.85%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 644 (257 bytes) 
  1.30%    1.72%  libpthread-2.24.so  pthread_getspecific+0x0 (58 bytes) 
  1.17%    1.82%         C2, level 4  java.lang.invoke.MemberName::getInvocationType, version 668 (492 bytes) 
  1.07%    1.21%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 (246 bytes) 
 43.05%   41.59%  <...other 601 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 31.93%   30.12%         C1, level 3  java.io.DataOutputStream::writeUTF, version 844 
 10.99%   10.51%         C2, level 4  caller.Caller::foo, version 768 
  8.33%    7.19%         C2, level 4  java.lang.invoke.MethodType$ConcurrentWeakInternSet::get, version 766 
  6.79%    9.11%         C2, level 4  java.lang.invoke.MethodHandles$Lookup::getDirectMethodNoSecurityManager, version 722 
  5.45%    5.25%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 753 
  5.44%    6.33%         C2, level 4  java.util.concurrent.ConcurrentHashMap::get, version 782 
  3.50%    2.71%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 662 
  3.42%    2.50%   [kernel.kallsyms]  [unknown] 
  3.25%    4.14%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 772 
  2.47%    3.33%         C2, level 4  java.lang.invoke.MemberName::getInvocationType, version 668 
  2.31%    3.04%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 747 
  1.31%    1.85%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 644 
  1.30%    1.72%  libpthread-2.24.so  pthread_getspecific+0x0 
  1.02%    0.02%        runtime stub  StubRoutines::oop_disjoint_arraycopy 
  0.99%    0.27%         C2, level 4  ru.spbau.mit.protocols.benchmarks.testclassesB.FooClassB::bar, version 686 
  0.97%    0.71%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches::indyClass, version 734 
  0.82%    0.42%         C2, level 4  ru.spbau.mit.protocols.benchmarks.testclassesA.FooClassA::bar, version 689 
  0.76%    0.95%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 743 
  0.72%    0.78%    Unknown, level 0  java.lang.String::intern, version 237 
  0.69%    0.88%    Unknown, level 0  java.lang.invoke.MethodHandle::invokeBasic, version 475 
  7.53%    7.97%  <...other 92 warm methods...>
....................................................................................................
 99.99%   99.78%  <totals>

....[Distribution by Source]........................................................................
 57.36%   60.72%         C2, level 4
 32.04%   30.13%         C1, level 3
  3.42%    2.50%   [kernel.kallsyms]
  3.26%    3.28%    Unknown, level 0
  1.81%    1.11%        runtime stub
  1.30%    1.73%  libpthread-2.24.so
  0.51%    0.36%        libc-2.24.so
  0.15%    0.06%         C1, level 1
  0.08%    0.05%      hsdis-amd64.so
  0.04%    0.01%         interpreter
  0.02%    0.05%           libjvm.so
  0.01%               perf-26782.map
....................................................................................................
 99.99%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.indyInterfaceImpl

# Run progress: 70.00% complete, ETA 00:04:16
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 13201358.263 ns/op
# Warmup Iteration   2: 903639.025 ns/op
# Warmup Iteration   3: 328755.031 ns/op
# Warmup Iteration   4: 312413.738 ns/op
# Warmup Iteration   5: 317706.207 ns/op
# Warmup Iteration   6: 340325.426 ns/op
# Warmup Iteration   7: 336948.279 ns/op
# Warmup Iteration   8: 326266.055 ns/op
# Warmup Iteration   9: 323626.284 ns/op
# Warmup Iteration  10: 327813.131 ns/op
# Warmup Iteration  11: 303386.087 ns/op
# Warmup Iteration  12: 346915.717 ns/op
# Warmup Iteration  13: 306061.199 ns/op
# Warmup Iteration  14: 318595.158 ns/op
# Warmup Iteration  15: 302650.433 ns/op
# Warmup Iteration  16: 317711.736 ns/op
# Warmup Iteration  17: 320014.055 ns/op
# Warmup Iteration  18: 304959.462 ns/op
# Warmup Iteration  19: 323086.742 ns/op
# Warmup Iteration  20: 301894.100 ns/op
Iteration   1: 331409.520 ns/op
Iteration   2: 341638.853 ns/op
Iteration   3: 322282.463 ns/op
Iteration   4: 323338.696 ns/op
Iteration   5: 304561.609 ns/op
Iteration   6: 326259.332 ns/op
Iteration   7: 304939.253 ns/op
Iteration   8: 323212.793 ns/op
Iteration   9: 330768.469 ns/op
Iteration  10: 304706.602 ns/op
Iteration  11: 333124.920 ns/op
Iteration  12: 304416.093 ns/op
Iteration  13: 331901.938 ns/op
Iteration  14: 301020.374 ns/op
Iteration  15: 339461.519 ns/op
Iteration  16: 341693.035 ns/op
Iteration  17: 301881.042 ns/op
Iteration  18: 335720.036 ns/op
Iteration  19: 318199.017 ns/op
Iteration  20: 377381.445 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyInterfaceImpl":
  324895.850 ±(99.9%) 16230.224 ns/op [Average]
  (min, avg, max) = (301020.374, 324895.850, 377381.445), stdev = 18690.750
  CI (99.9%): [308665.627, 341126.074] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 235940 total address lines.
Perf output processed (skipped 20.137 seconds):
 Column 1: cycles (22275 events)
 Column 2: instructions (22098 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, java.lang.invoke.MethodType$ConcurrentWeakInternSet::get, version 744 (1135 bytes) 

                                        # parm0:    rdx:rdx   = &apos;java/lang/Object&apos;
                                        #           [sp+0x60]  (sp of caller)
                                        0x00007f94ad2b5780: mov    0x8(%rsi),%r10d
                                        0x00007f94ad2b5784: shl    $0x3,%r10
                                        0x00007f94ad2b5788: cmp    %r10,%rax
                                        0x00007f94ad2b578b: jne    0x00007f94ad045b60  ;   {runtime_call}
                                        0x00007f94ad2b5791: xchg   %ax,%ax
                                        0x00007f94ad2b5794: nopl   0x0(%rax,%rax,1)
                                        0x00007f94ad2b579c: xchg   %ax,%ax
                                      [Verified Entry Point]
  0.05%    0.08%                        0x00007f94ad2b57a0: mov    %eax,-0x14000(%rsp)
  0.10%    0.05%                        0x00007f94ad2b57a7: push   %rbp
  0.05%    0.19%                        0x00007f94ad2b57a8: sub    $0x50,%rsp         ;*synchronization entry
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@-1 (line 1227)
  0.05%    0.05%                        0x00007f94ad2b57ac: mov    %rsi,%r10
  0.04%    0.11%                        0x00007f94ad2b57af: mov    0x8(%rdx),%r11d    ;*invokevirtual hashCode
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                                                                                      ; implicit exception: dispatches to 0x00007f94ad2b65f1
  0.07%    0.17%                        0x00007f94ad2b57b3: mov    %rsi,%r8
  0.01%    0.05%                        0x00007f94ad2b57b6: mov    0x10(%rsi),%r10d   ;*getfield stale
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@1 (line 1268)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
  0.03%    0.05%                        0x00007f94ad2b57ba: mov    0x18(%r12,%r10,8),%r9d  ;*getfield head
                                                                                      ; - java.lang.ref.ReferenceQueue::poll@1 (line 105)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
                                                                                      ; implicit exception: dispatches to 0x00007f94ad2b65bd
  0.04%    0.08%                        0x00007f94ad2b57bf: test   %r9d,%r9d
                  ╭                     0x00007f94ad2b57c2: jne    0x00007f94ad2b5c10  ;*ifnull
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@9 (line 1268)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
  0.07%    0.10%  │                     0x00007f94ad2b57c8: mov    0x60(%r15),%rbx
  0.01%    0.04%  │                     0x00007f94ad2b57cc: mov    0xc(%r8),%r8d      ;*getfield map
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@17 (line 1230)
  0.01%    0.09%  │                     0x00007f94ad2b57d0: mov    %rbx,%r10
  0.04%    0.08%  │                     0x00007f94ad2b57d3: add    $0x20,%r10
  0.09%    0.04%  │                     0x00007f94ad2b57d7: cmp    0x70(%r15),%r10
                  │                     0x00007f94ad2b57db: jae    0x00007f94ad2b5d55
  0.02%    0.07%  │                     0x00007f94ad2b57e1: mov    %r10,0x60(%r15)
  0.04%    0.08%  │                     0x00007f94ad2b57e5: prefetchw 0xc0(%r10)
  0.05%    0.10%  │                     0x00007f94ad2b57ed: mov    $0xf800b1b8,%r10d  ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
  0.04%    0.07%  │                     0x00007f94ad2b57f3: shl    $0x3,%r10
  0.03%    0.02%  │                     0x00007f94ad2b57f7: mov    0xa8(%r10),%r10
  0.03%    0.03%  │                     0x00007f94ad2b57fe: mov    %r10,(%rbx)
  0.04%    0.09%  │                     0x00007f94ad2b5801: movl   $0xf800b1b8,0x8(%rbx)  ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
  0.08%    0.05%  │                     0x00007f94ad2b5808: mov    %r12,0x10(%rbx)
  0.03%    0.02%  │                     0x00007f94ad2b580c: mov    %r12,0x18(%rbx)
  0.05%    0.09%  │                     0x00007f94ad2b5810: mov    %rdx,%r10
  0.06%    0.09%  │                     0x00007f94ad2b5813: shr    $0x3,%r10
  0.03%    0.11%  │                     0x00007f94ad2b5817: mov    %r10d,0xc(%rbx)    ;*new  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@20 (line 1230)
  0.02%    0.05%  │                     0x00007f94ad2b581b: mov    %rbx,%r10
  0.07%    0.05%  │                     0x00007f94ad2b581e: shr    $0x9,%r10
  0.03%    0.09%  │                     0x00007f94ad2b5822: mov    $0x720d80b90,%r9   ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/ref/ReferenceQueue&apos;)}
  0.04%    0.06%  │                     0x00007f94ad2b582c: mov    0x68(%r9),%ecx     ;*getstatic NULL
                  │                                                                   ; - java.lang.ref.Reference::&lt;init&gt;@14 (line 308)
                  │                                                                   ; - java.lang.ref.Reference::&lt;init&gt;@3 (line 303)
                  │                                                                   ; - java.lang.ref.WeakReference::&lt;init&gt;@2 (line 57)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@2 (line 1283)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.03%    0.05%  │                     0x00007f94ad2b5830: mov    $0x7f94be1bb000,%r9
  0.04%    0.05%  │                     0x00007f94ad2b583a: mov    %r12b,(%r9,%r10,1)
  0.02%    0.05%  │                     0x00007f94ad2b583e: mov    %ecx,0x10(%rbx)
  0.04%    0.08%  │                     0x00007f94ad2b5841: mov    %rbx,%r10
  0.04%    0.04%  │                     0x00007f94ad2b5844: shr    $0x9,%r10
  0.02%    0.05%  │                     0x00007f94ad2b5848: mov    %r12b,(%r9,%r10,1)
  0.07%    0.08%  │                     0x00007f94ad2b584c: lock addl $0x0,(%rsp)     ;*putfield queue
                  │                                                                   ; - java.lang.ref.Reference::&lt;init&gt;@21 (line 308)
                  │                                                                   ; - java.lang.ref.Reference::&lt;init&gt;@3 (line 303)
                  │                                                                   ; - java.lang.ref.WeakReference::&lt;init&gt;@2 (line 57)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@2 (line 1283)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  4.61%    4.43%  │                     0x00007f94ad2b5851: cmp    $0xf80017a8,%r11d  ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
                  │                     0x00007f94ad2b5858: jne    0x00007f94ad2b5e0d
                  │                     0x00007f94ad2b585e: mov    %rdx,%rbp          ;*invokevirtual hashCode
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                     0x00007f94ad2b5861: mov    0xc(%rbp),%r11d    ;*getfield rtype
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@3 (line 775)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.14%           │                     0x00007f94ad2b5865: test   %r11d,%r11d
                  │                     0x00007f94ad2b5868: je     0x00007f94ad2b5dfd  ;*invokevirtual hashCode
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@6 (line 775)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                     0x00007f94ad2b586e: lea    (%r12,%r11,8),%rsi  ;*getfield rtype
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@3 (line 775)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                     0x00007f94ad2b5872: mov    (%rsi),%r10
                  │                     0x00007f94ad2b5875: mov    %r10,%r11
  0.19%           │                     0x00007f94ad2b5878: and    $0x7,%r11
                  │                     0x00007f94ad2b587c: cmp    $0x1,%r11
  0.00%           │                     0x00007f94ad2b5880: jne    0x00007f94ad2b5cfc
                  │                     0x00007f94ad2b5886: shr    $0x8,%r10
  0.05%           │                     0x00007f94ad2b588a: mov    %r10d,%eax
  0.15%           │                     0x00007f94ad2b588d: and    $0x7fffffff,%eax
                  │                     0x00007f94ad2b5893: test   %eax,%eax
                  │                     0x00007f94ad2b5895: je     0x00007f94ad2b5cfc  ;*invokevirtual hashCode
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@6 (line 775)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                     0x00007f94ad2b589b: mov    0x10(%rbp),%r10d   ;*getfield ptypes
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@12 (line 776)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.04%           │                     0x00007f94ad2b589f: mov    0xc(%r12,%r10,8),%r11d  ;*arraylength
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@17 (line 776)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                                                                   ; implicit exception: dispatches to 0x00007f94ad2b65cd
  0.13%    0.00%  │                     0x00007f94ad2b58a4: add    $0x1f,%eax         ;*iadd
                  │                                                                   ; - java.lang.invoke.MethodType::hashCode@9 (line 775)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │                     0x00007f94ad2b58a7: test   %r11d,%r11d
                  │╭                    0x00007f94ad2b58aa: jle    0x00007f94ad2b591b  ;*if_icmpge
                  ││                                                                  ; - java.lang.invoke.MethodType::hashCode@25 (line 776)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.00%           ││                    0x00007f94ad2b58ac: test   %r11d,%r11d
                  ││                    0x00007f94ad2b58af: jbe    0x00007f94ad2b5e65
  0.03%           ││                    0x00007f94ad2b58b5: mov    %r11d,%r9d
  0.10%           ││                    0x00007f94ad2b58b8: dec    %r9d
                  ││                    0x00007f94ad2b58bb: cmp    %r11d,%r9d
  0.01%           ││                    0x00007f94ad2b58be: jae    0x00007f94ad2b5e65  ;*aload_2
                  ││                                                                  ; - java.lang.invoke.MethodType::hashCode@28 (line 776)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  ││                    0x00007f94ad2b58c4: lea    (%r12,%r10,8),%rdi  ;*getfield ptypes
                  ││                                                                  ; - java.lang.invoke.MethodType::hashCode@12 (line 776)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.03%           ││                    0x00007f94ad2b58c8: xor    %ecx,%ecx
  0.12%           ││                    0x00007f94ad2b58ca: nopw   0x0(%rax,%rax,1)   ;*aload_2
                  ││                                                                  ; - java.lang.invoke.MethodType::hashCode@28 (line 776)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  ││↗                   0x00007f94ad2b58d0: mov    0x10(%rdi,%rcx,4),%r10d  ;*aaload
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@31 (line 776)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.01%           │││                   0x00007f94ad2b58d5: test   %r10d,%r10d
                  │││                   0x00007f94ad2b58d8: je     0x00007f94ad2b5ded  ;*invokevirtual hashCode
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@40 (line 777)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.02%           │││                   0x00007f94ad2b58de: lea    (%r12,%r10,8),%rsi  ;*aaload
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@31 (line 776)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.12%           │││                   0x00007f94ad2b58e2: mov    (%rsi),%r10        ;*invokevirtual hashCode
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@40 (line 777)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.00%    0.00%  │││                   0x00007f94ad2b58e5: mov    %eax,%ebp
                  │││                   0x00007f94ad2b58e7: shl    $0x5,%ebp
  0.00%           │││                   0x00007f94ad2b58ea: sub    %eax,%ebp          ;*imul
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@37 (line 777)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.09%           │││                   0x00007f94ad2b58ec: mov    %r10,%r9
                  │││                   0x00007f94ad2b58ef: and    $0x7,%r9
                  │││                   0x00007f94ad2b58f3: cmp    $0x1,%r9
                  │││                   0x00007f94ad2b58f7: jne    0x00007f94ad2b5cc4
  0.01%    0.00%  │││                   0x00007f94ad2b58fd: shr    $0x8,%r10
  0.12%           │││                   0x00007f94ad2b5901: mov    %r10d,%eax
                  │││                   0x00007f94ad2b5904: and    $0x7fffffff,%eax
                  │││                   0x00007f94ad2b590a: test   %eax,%eax
                  │││                   0x00007f94ad2b590c: je     0x00007f94ad2b5cc4  ;*invokevirtual hashCode
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@40 (line 777)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.04%           │││                   0x00007f94ad2b5912: add    %ebp,%eax          ;*iadd
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@43 (line 777)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
  0.13%           │││                   0x00007f94ad2b5914: inc    %ecx               ;*iinc
                  │││                                                                 ; - java.lang.invoke.MethodType::hashCode@45 (line 776)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  │││                                                                 ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │││                   0x00007f94ad2b5916: cmp    %r11d,%ecx
                  ││╰                   0x00007f94ad2b5919: jl     0x00007f94ad2b58d0  ;*if_icmpge
                  ││                                                                  ; - java.lang.invoke.MethodType::hashCode@25 (line 776)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::&lt;init&gt;@7 (line 1284)
                  ││                                                                  ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@25 (line 1230)
                  │↘                    0x00007f94ad2b591b: mov    %eax,0x1c(%rbx)    ;*synchronization entry
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@-1 (line 1227)
  0.01%           │                     0x00007f94ad2b591e: mov    0x8(%r12,%r8,8),%r11d  ; implicit exception: dispatches to 0x00007f94ad2b65dd
  0.18%           │                     0x00007f94ad2b5923: cmp    $0xf8006074,%r11d  ;   {metadata(&apos;java/util/concurrent/ConcurrentHashMap&apos;)}
                  │                     0x00007f94ad2b592a: jne    0x00007f94ad2b5e29
                  │                     0x00007f94ad2b5930: lea    (%r12,%r8,8),%r10  ;*invokeinterface get
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │                     0x00007f94ad2b5934: mov    0x28(%r10),%r10d   ;*getfield table
                  │                                                                   ; - java.util.concurrent.ConcurrentHashMap::get@10 (line 937)
                  │                                                                   ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.03%           │                     0x00007f94ad2b5938: test   %r10d,%r10d
                  │  ╭                  0x00007f94ad2b593b: je     0x00007f94ad2b5ad1  ;*ifnull
                  │  │                                                                ; - java.util.concurrent.ConcurrentHashMap::get@15 (line 937)
                  │  │                                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.14%           │  │                  0x00007f94ad2b5941: mov    0xc(%r12,%r10,8),%r11d  ;*arraylength
                  │  │                                                                ; - java.util.concurrent.ConcurrentHashMap::get@19 (line 937)
                  │  │                                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │                  0x00007f94ad2b5946: mov    %eax,%r8d
  0.00%           │  │                  0x00007f94ad2b5949: shr    $0x10,%r8d
  0.03%           │  │                  0x00007f94ad2b594d: xor    %eax,%r8d
  0.15%           │  │                  0x00007f94ad2b5950: and    $0x7fffffff,%r8d   ;*iand
                  │  │                                                                ; - java.util.concurrent.ConcurrentHashMap::spread@8 (line 685)
                  │  │                                                                ; - java.util.concurrent.ConcurrentHashMap::get@4 (line 936)
                  │  │                                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │                  0x00007f94ad2b5957: test   %r11d,%r11d
                  │  │                  0x00007f94ad2b595a: jle    0x00007f94ad2b5e8d
                  │  │                  0x00007f94ad2b5960: shl    $0x3,%r10
  0.02%           │  │                  0x00007f94ad2b5964: dec    %r11d
  0.15%           │  │                  0x00007f94ad2b5967: and    %r8d,%r11d
                  │  │                  0x00007f94ad2b596a: movslq %r11d,%r11
  0.00%           │  │                  0x00007f94ad2b596d: mov    0x10(%r10,%r11,4),%r10d  ;*invokevirtual getObjectVolatile
                  │  │                                                                ; - java.util.concurrent.ConcurrentHashMap::tabAt@14 (line 755)
                  │  │                                                                ; - java.util.concurrent.ConcurrentHashMap::get@34 (line 938)
                  │  │                                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.02%  │  │                  0x00007f94ad2b5972: test   %r10d,%r10d
                  │  │╭                 0x00007f94ad2b5975: je     0x00007f94ad2b5ad1  ;*ifnull
                  │  ││                                                               ; - java.util.concurrent.ConcurrentHashMap::get@39 (line 938)
                  │  ││                                                               ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.17%    0.01%  │  ││                 0x00007f94ad2b597b: mov    0xc(%r12,%r10,8),%ecx  ;*getfield hash
                  │  ││                                                               ; - java.util.concurrent.ConcurrentHashMap::get@43 (line 939)
                  │  ││                                                               ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.00%  │  ││                 0x00007f94ad2b5980: mov    $0x1,%r9d
                  │  ││                 0x00007f94ad2b5986: cmp    %r8d,%ecx
                  │  ││╭                0x00007f94ad2b5989: je     0x00007f94ad2b5ad8  ;*if_icmpne
                  │  │││                                                              ; - java.util.concurrent.ConcurrentHashMap::get@51 (line 939)
                  │  │││                                                              ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.02%  │  │││                0x00007f94ad2b598f: test   %ecx,%ecx
                  │  │││                0x00007f94ad2b5991: jl     0x00007f94ad2b6009  ;*ifge
                  │  │││                                                              ; - java.util.concurrent.ConcurrentHashMap::get@86 (line 943)
                  │  │││                                                              ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.09%    0.08%  │  │││                0x00007f94ad2b5997: shl    $0x3,%r10          ;*aload_3
                  │  │││                                                              ; - java.util.concurrent.ConcurrentHashMap::get@112 (line 945)
                  │  │││                                                              ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.00%           │  │││     ↗          0x00007f94ad2b599b: mov    0x18(%r10),%r10d   ;*getfield next
                  │  │││     │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@113 (line 945)
                  │  │││     │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.05%  │  │││     │          0x00007f94ad2b599f: test   %r10d,%r10d
                  │  │││╭    │          0x00007f94ad2b59a2: je     0x00007f94ad2b5ad1  ;*ifnull
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@118 (line 945)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.00%    0.03%  │  ││││    │          0x00007f94ad2b59a8: shl    $0x3,%r10          ;*aload_3
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@121 (line 946)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%           │  ││││    │          0x00007f94ad2b59ac: mov    0xc(%r10),%ecx     ; OopMap{r10=Oop rbx=Oop off=560}
                  │  ││││    │                                                        ;*if_icmpne
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@127 (line 946)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.03%  │  ││││    │          0x00007f94ad2b59b0: test   %eax,0x18b0464a(%rip)        # 0x00007f94c5dba000
                  │  ││││    │                                                        ;   {poll}
                  │  ││││    │          0x00007f94ad2b59b6: cmp    %r8d,%ecx
                  │  ││││    │          0x00007f94ad2b59b9: jne    0x00007f94ad2b5d1a  ;*if_icmpne
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@127 (line 946)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.01%    0.04%  │  ││││    │          0x00007f94ad2b59bf: mov    0x10(%r10),%r11d   ;*getfield key
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@131 (line 946)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.03%  │  ││││    │          0x00007f94ad2b59c3: mov    %r11,%rcx
                  │  ││││    │          0x00007f94ad2b59c6: shl    $0x3,%rcx
  0.02%    0.02%  │  ││││    │          0x00007f94ad2b59ca: cmp    %rbx,%rcx
                  │  ││││    │          0x00007f94ad2b59cd: je     0x00007f94ad2b6029  ;*if_acmpeq
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@138 (line 946)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.03%    0.02%  │  ││││    │          0x00007f94ad2b59d3: mov    0x8(%r12,%r11,8),%ecx  ; implicit exception: dispatches to 0x00007f94ad2b669d
  0.07%    0.11%  │  ││││    │          0x00007f94ad2b59d8: cmp    $0xf800b1b8,%ecx   ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
                  │  ││││    │          0x00007f94ad2b59de: jne    0x00007f94ad2b6514
  0.03%    0.03%  │  ││││    │          0x00007f94ad2b59e4: shl    $0x3,%r11          ;*instanceof
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@1 (line 1289)
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ││││    │          0x00007f94ad2b59e8: mov    0xc(%r11),%edi     ;*invokevirtual get
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@11 (line 1290)
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.06%  │  ││││    │          0x00007f94ad2b59ec: mov    0xc(%rbx),%ecx     ;*invokevirtual get
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@16 (line 1291)
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.01%  │  ││││    │          0x00007f94ad2b59ef: test   %edi,%edi
                  │  ││││    │          0x00007f94ad2b59f1: je     0x00007f94ad2b5d84  ;*ifnull
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@21 (line 1292)
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.05%  │  ││││    │          0x00007f94ad2b59f7: mov    0x8(%r12,%rcx,8),%edx  ; implicit exception: dispatches to 0x00007f94ad2b66bd
                  │  ││││    │          0x00007f94ad2b59fc: cmp    $0xf80017a8,%edx   ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
                  │  ││││    │          0x00007f94ad2b5a02: jne    0x00007f94ad2b5fb5
                  │  ││││    │          0x00007f94ad2b5a08: lea    (%r12,%rcx,8),%rdx  ;*invokevirtual equals
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
           0.02%  │  ││││    │          0x00007f94ad2b5a0c: lea    (%r12,%rdi,8),%rcx
  0.02%    0.02%  │  ││││    │          0x00007f94ad2b5a10: cmp    %rcx,%rdx
                  │  ││││╭   │          0x00007f94ad2b5a13: je     0x00007f94ad2b5aaf  ;*if_acmpeq
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@2 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │││││   │          0x00007f94ad2b5a19: mov    0x8(%r12,%rdi,8),%esi
  0.13%    0.10%  │  │││││   │          0x00007f94ad2b5a1e: cmp    $0xf80017a8,%esi   ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
                  │  │││││   │          0x00007f94ad2b5a24: jne    0x00007f94ad2b6585  ;*instanceof
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@6 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.07%  │  │││││   │          0x00007f94ad2b5a2a: mov    0xc(%rdx),%r11d    ;*getfield rtype
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@1 (line 759)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │││││   │          0x00007f94ad2b5a2e: mov    0xc(%rcx),%edi     ;*getfield rtype
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@5 (line 759)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.00%           │  │││││   │          0x00007f94ad2b5a31: cmp    %edi,%r11d
                  │  │││││   │          0x00007f94ad2b5a34: jne    0x00007f94ad2b5fd9  ;*if_acmpne
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@8 (line 759)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.03%    0.07%  │  │││││   │          0x00007f94ad2b5a3a: mov    0x10(%rcx),%ecx    ;*getfield ptypes
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@16 (line 759)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.01%    0.01%  │  │││││   │          0x00007f94ad2b5a3d: mov    0x10(%rdx),%r11d   ;*getfield ptypes
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@12 (line 759)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││   │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││   │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │││││   │          0x00007f94ad2b5a41: cmp    %ecx,%r11d
                  │  │││││╭  │          0x00007f94ad2b5a44: je     0x00007f94ad2b5aaf  ;*if_acmpne
                  │  ││││││  │                                                        ; - java.util.Arrays::equals@2 (line 2817)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  ││││││  │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.02%    0.02%  │  ││││││  │          0x00007f94ad2b5a46: mov    0xc(%r12,%r11,8),%edi  ;*arraylength
                  │  ││││││  │                                                        ; - java.util.Arrays::equals@18 (line 2822)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  ││││││  │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ││││││  │                                                        ; implicit exception: dispatches to 0x00007f94ad2b66e9
  0.01%    0.02%  │  ││││││  │          0x00007f94ad2b5a4b: mov    0xc(%r12,%rcx,8),%eax  ;*arraylength
                  │  ││││││  │                                                        ; - java.util.Arrays::equals@21 (line 2823)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  ││││││  │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ││││││  │                                                        ; implicit exception: dispatches to 0x00007f94ad2b670d
  0.10%    0.18%  │  ││││││  │          0x00007f94ad2b5a50: cmp    %edi,%eax
                  │  ││││││  │          0x00007f94ad2b5a52: jne    0x00007f94ad2b604d  ;*if_icmpeq
                  │  ││││││  │                                                        ; - java.util.Arrays::equals@23 (line 2823)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  ││││││  │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  ││││││  │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.06%    0.07%  │  ││││││  │          0x00007f94ad2b5a58: test   %edi,%edi
                  │  ││││││╭ │          0x00007f94ad2b5a5a: jle    0x00007f94ad2b5aaf  ;*if_icmpge
                  │  │││││││ │                                                        ; - java.util.Arrays::equals@32 (line 2826)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││ │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │││││││ │          0x00007f94ad2b5a5c: test   %edi,%edi
                  │  │││││││ │          0x00007f94ad2b5a5e: jbe    0x00007f94ad2b6079
                  │  │││││││ │          0x00007f94ad2b5a64: mov    %edi,%edx
  0.00%           │  │││││││ │          0x00007f94ad2b5a66: dec    %edx
  0.04%    0.09%  │  │││││││ │          0x00007f94ad2b5a68: cmp    %edi,%edx
                  │  │││││││ │          0x00007f94ad2b5a6a: jae    0x00007f94ad2b6079
                  │  │││││││ │          0x00007f94ad2b5a70: test   %eax,%eax
                  │  │││││││ │          0x00007f94ad2b5a72: jbe    0x00007f94ad2b6079
                  │  │││││││ │          0x00007f94ad2b5a78: cmp    %eax,%edx
                  │  │││││││ │          0x00007f94ad2b5a7a: jae    0x00007f94ad2b6079
           0.00%  │  │││││││ │          0x00007f94ad2b5a80: lea    (%r12,%rcx,8),%rsi
  0.04%    0.04%  │  │││││││ │          0x00007f94ad2b5a84: lea    (%r12,%r11,8),%r13
                  │  │││││││ │          0x00007f94ad2b5a88: xor    %eax,%eax
                  │  │││││││ │          0x00007f94ad2b5a8a: nopw   0x0(%rax,%rax,1)   ;*aload_0
                  │  │││││││ │                                                        ; - java.util.Arrays::equals@35 (line 2827)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││ │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.00%    0.01%  │  │││││││↗│          0x00007f94ad2b5a90: mov    0x10(%rsi,%rax,4),%ebp  ;*aaload
                  │  │││││││││                                                        ; - java.util.Arrays::equals@42 (line 2828)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││││                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.03%  │  │││││││││          0x00007f94ad2b5a94: mov    0x10(%r13,%rax,4),%edx  ;*aaload
                  │  │││││││││                                                        ; - java.util.Arrays::equals@37 (line 2827)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││││                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  │││││││││          0x00007f94ad2b5a99: test   %edx,%edx
                  │  │││││││││          0x00007f94ad2b5a9b: je     0x00007f94ad2b60a1  ;*ifnonnull
                  │  │││││││││                                                        ; - java.util.Arrays::equals@47 (line 2829)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││││                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
           0.00%  │  │││││││││          0x00007f94ad2b5aa1: cmp    %ebp,%edx
                  │  │││││││││          0x00007f94ad2b5aa3: jne    0x00007f94ad2b60d5  ;*ifne
                  │  │││││││││                                                        ; - java.util.Arrays::equals@65 (line 2829)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││││                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.01%    0.01%  │  │││││││││          0x00007f94ad2b5aa9: inc    %eax               ;*iinc
                  │  │││││││││                                                        ; - java.util.Arrays::equals@70 (line 2826)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││││                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││││                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.05%    0.04%  │  │││││││││          0x00007f94ad2b5aab: cmp    %edi,%eax
                  │  │││││││╰│          0x00007f94ad2b5aad: jl     0x00007f94ad2b5a90  ;*iconst_1
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType::equals@23 (line 755)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │  │││││││ │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@149 (line 947)
                  │  │││││││ │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ││││↘↘↘ │          0x00007f94ad2b5aaf: mov    $0x1,%r11d         ; OopMap{r10=Oop rbx=Oop off=821}
                  │  ││││    │                                                        ;*ifeq
                  │  ││││    │                                                        ; - java.util.concurrent.ConcurrentHashMap::get@152 (line 947)
                  │  ││││    │                                                        ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ││││    │          0x00007f94ad2b5ab5: test   %eax,0x18b04545(%rip)        # 0x00007f94c5dba000
                  │  ││││    │                                                        ;   {poll}
           0.01%  │  ││││    │          0x00007f94ad2b5abb: test   %r11d,%r11d
                  │  ││││    ╰          0x00007f94ad2b5abe: je     0x00007f94ad2b599b  ;*ifeq
                  │  ││││                                                             ; - java.util.concurrent.ConcurrentHashMap::get@152 (line 947)
                  │  ││││                                                             ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.03%    0.08%  │  ││││               0x00007f94ad2b5ac4: mov    0x14(%r10),%r10d   ;*getfield val
                  │  ││││                                                             ; - java.util.concurrent.ConcurrentHashMap::get@156 (line 948)
                  │  ││││                                                             ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ││││               0x00007f94ad2b5ac8: test   %r10d,%r10d
                  │  ││││     ╭         0x00007f94ad2b5acb: jne    0x00007f94ad2b5bdd  ;*invokeinterface get
                  │  ││││     │                                                       ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │  ↘↘│↘     │      ↗  0x00007f94ad2b5ad1: xor    %eax,%eax
                  │    │      │╭     │  0x00007f94ad2b5ad3: jmpq   0x00007f94ad2b5c04
  0.10%    0.16%  │    ↘      ││     │  0x00007f94ad2b5ad8: mov    0x10(%r12,%r10,8),%r11d  ;*getfield key
                  │           ││     │                                                ; - java.util.concurrent.ConcurrentHashMap::get@55 (line 940)
                  │           ││     │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.32%    0.26%  │           ││     │  0x00007f94ad2b5add: mov    %r11,%rcx
  0.01%           │           ││     │  0x00007f94ad2b5ae0: shl    $0x3,%rcx
  0.02%    0.03%  │           ││     │  0x00007f94ad2b5ae4: cmp    %rbx,%rcx
                  │           ││╭    │  0x00007f94ad2b5ae7: je     0x00007f94ad2b5bcf  ;*if_acmpeq
                  │           │││    │                                                ; - java.util.concurrent.ConcurrentHashMap::get@62 (line 940)
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.01%  │           │││    │  0x00007f94ad2b5aed: mov    0x8(%r12,%r11,8),%edi  ; implicit exception: dispatches to 0x00007f94ad2b6609
  0.12%    0.07%  │           │││    │  0x00007f94ad2b5af2: cmp    $0xf800b1b8,%edi   ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
                  │           │││    │  0x00007f94ad2b5af8: jne    0x00007f94ad2b6539
  0.01%    0.01%  │           │││    │  0x00007f94ad2b5afe: lea    (%r12,%r11,8),%rcx  ;*instanceof
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@1 (line 1289)
                  │           │││    │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           │││    │  0x00007f94ad2b5b02: mov    0xc(%rcx),%r11d    ;*invokevirtual get
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@11 (line 1290)
                  │           │││    │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.02%  │           │││    │  0x00007f94ad2b5b06: mov    0xc(%rbx),%edi     ;*invokevirtual get
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@16 (line 1291)
                  │           │││    │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.09%    0.10%  │           │││    │  0x00007f94ad2b5b09: test   %r11d,%r11d
                  │           │││    │  0x00007f94ad2b5b0c: je     0x00007f94ad2b5d30  ;*ifnull
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@21 (line 1292)
                  │           │││    │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.01%    0.02%  │           │││    │  0x00007f94ad2b5b12: mov    0x8(%r12,%rdi,8),%esi  ; implicit exception: dispatches to 0x00007f94ad2b6629
  0.02%           │           │││    │  0x00007f94ad2b5b17: cmp    $0xf80017a8,%esi   ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
                  │           │││    │  0x00007f94ad2b5b1d: jne    0x00007f94ad2b5e41
  0.03%    0.02%  │           │││    │  0x00007f94ad2b5b23: shl    $0x3,%rdi          ;*invokevirtual equals
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           │││    │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││    │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.09%    0.11%  │           │││    │  0x00007f94ad2b5b27: lea    (%r12,%r11,8),%rdx
  0.00%    0.01%  │           │││    │  0x00007f94ad2b5b2b: cmp    %rdx,%rdi
                  │           │││╭   │  0x00007f94ad2b5b2e: je     0x00007f94ad2b5bcf  ;*if_acmpeq
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@2 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           ││││   │  0x00007f94ad2b5b34: mov    0x8(%r12,%r11,8),%ecx
  0.09%    0.05%  │           ││││   │  0x00007f94ad2b5b39: cmp    $0xf80017a8,%ecx   ;   {metadata(&apos;java/lang/invoke/MethodType&apos;)}
                  │           ││││   │  0x00007f94ad2b5b3f: jne    0x00007f94ad2b655d  ;*instanceof
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@6 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.11%    0.09%  │           ││││   │  0x00007f94ad2b5b45: mov    0xc(%rdi),%ecx     ;*getfield rtype
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@1 (line 759)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           ││││   │  0x00007f94ad2b5b48: mov    0xc(%rdx),%r11d    ;*getfield rtype
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@5 (line 759)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.00%    0.00%  │           ││││   │  0x00007f94ad2b5b4c: cmp    %r11d,%ecx
                  │           ││││   │  0x00007f94ad2b5b4f: jne    0x00007f94ad2b5ec1  ;*if_acmpne
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@8 (line 759)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.07%    0.06%  │           ││││   │  0x00007f94ad2b5b55: mov    0x10(%rdx),%ecx    ;*getfield ptypes
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@16 (line 759)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.08%    0.08%  │           ││││   │  0x00007f94ad2b5b58: mov    0x10(%rdi),%r11d   ;*getfield ptypes
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@12 (line 759)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││   │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││   │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           ││││   │  0x00007f94ad2b5b5c: cmp    %ecx,%r11d
                  │           ││││╭  │  0x00007f94ad2b5b5f: je     0x00007f94ad2b5bcf  ;*if_acmpne
                  │           │││││  │                                                ; - java.util.Arrays::equals@2 (line 2817)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           │││││  │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.03%    0.03%  │           │││││  │  0x00007f94ad2b5b61: mov    0xc(%r12,%r11,8),%edi  ;*arraylength
                  │           │││││  │                                                ; - java.util.Arrays::equals@18 (line 2822)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           │││││  │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           │││││  │                                                ; implicit exception: dispatches to 0x00007f94ad2b6655
  0.02%    0.04%  │           │││││  │  0x00007f94ad2b5b66: mov    0xc(%r12,%rcx,8),%eax  ;*arraylength
                  │           │││││  │                                                ; - java.util.Arrays::equals@21 (line 2823)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           │││││  │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           │││││  │                                                ; implicit exception: dispatches to 0x00007f94ad2b6679
  0.22%    0.18%  │           │││││  │  0x00007f94ad2b5b6b: cmp    %edi,%eax
                  │           │││││  │  0x00007f94ad2b5b6d: jne    0x00007f94ad2b5ef1  ;*if_icmpeq
                  │           │││││  │                                                ; - java.util.Arrays::equals@23 (line 2823)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           │││││  │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           │││││  │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.07%  │           │││││  │  0x00007f94ad2b5b73: test   %edi,%edi
                  │           │││││╭ │  0x00007f94ad2b5b75: jle    0x00007f94ad2b5bcf  ;*if_icmpge
                  │           ││││││ │                                                ; - java.util.Arrays::equals@32 (line 2826)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││ │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           ││││││ │  0x00007f94ad2b5b77: test   %edi,%edi
                  │           ││││││ │  0x00007f94ad2b5b79: jbe    0x00007f94ad2b5f1d
           0.04%  │           ││││││ │  0x00007f94ad2b5b7f: mov    %edi,%esi
  0.02%    0.08%  │           ││││││ │  0x00007f94ad2b5b81: dec    %esi
  0.04%    0.08%  │           ││││││ │  0x00007f94ad2b5b83: cmp    %edi,%esi
                  │           ││││││ │  0x00007f94ad2b5b85: jae    0x00007f94ad2b5f1d
                  │           ││││││ │  0x00007f94ad2b5b8b: test   %eax,%eax
                  │           ││││││ │  0x00007f94ad2b5b8d: jbe    0x00007f94ad2b5f1d
  0.03%    0.01%  │           ││││││ │  0x00007f94ad2b5b93: cmp    %eax,%esi
                  │           ││││││ │  0x00007f94ad2b5b95: jae    0x00007f94ad2b5f1d
  0.04%    0.06%  │           ││││││ │  0x00007f94ad2b5b9b: lea    (%r12,%rcx,8),%rsi
  0.04%    0.08%  │           ││││││ │  0x00007f94ad2b5b9f: lea    (%r12,%r11,8),%r13
                  │           ││││││ │  0x00007f94ad2b5ba3: xor    %eax,%eax
  0.04%    0.01%  │           ││││││ │  0x00007f94ad2b5ba5: nopw   0x0(%rax,%rax,1)   ;*aload_0
                  │           ││││││ │                                                ; - java.util.Arrays::equals@35 (line 2827)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││ │                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.00%    0.04%  │           ││││││↗│  0x00007f94ad2b5bb0: mov    0x10(%rsi,%rax,4),%edx  ;*aaload
                  │           ││││││││                                                ; - java.util.Arrays::equals@42 (line 2828)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││││                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.05%    0.05%  │           ││││││││  0x00007f94ad2b5bb4: mov    0x10(%r13,%rax,4),%ebp  ;*aaload
                  │           ││││││││                                                ; - java.util.Arrays::equals@37 (line 2827)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││││                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
                  │           ││││││││  0x00007f94ad2b5bb9: test   %ebp,%ebp
                  │           ││││││││  0x00007f94ad2b5bbb: je     0x00007f94ad2b5f45  ;*ifnonnull
                  │           ││││││││                                                ; - java.util.Arrays::equals@47 (line 2829)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││││                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.03%    0.02%  │           ││││││││  0x00007f94ad2b5bc1: cmp    %edx,%ebp
                  │           ││││││││  0x00007f94ad2b5bc3: jne    0x00007f94ad2b5f79  ;*ifne
                  │           ││││││││                                                ; - java.util.Arrays::equals@65 (line 2829)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││││                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.06%  │           ││││││││  0x00007f94ad2b5bc9: inc    %eax               ;*iinc
                  │           ││││││││                                                ; - java.util.Arrays::equals@70 (line 2826)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@19 (line 760)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType::equals@17 (line 755)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::equals@43 (line 1292)
                  │           ││││││││                                                ; - java.util.concurrent.ConcurrentHashMap::get@73 (line 940)
                  │           ││││││││                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.04%    0.04%  │           ││││││││  0x00007f94ad2b5bcb: cmp    %edi,%eax
                  │           ││││││╰│  0x00007f94ad2b5bcd: jl     0x00007f94ad2b5bb0  ;*aload_3
                  │           ││││││ │                                                ; - java.util.concurrent.ConcurrentHashMap::get@79 (line 941)
                  │           ││││││ │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.01%    0.01%  │           ││↘↘↘↘ │  0x00007f94ad2b5bcf: mov    0x14(%r12,%r10,8),%r10d  ;*getfield val
                  │           ││     │                                                ; - java.util.concurrent.ConcurrentHashMap::get@80 (line 941)
                  │           ││     │                                                ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.01%    0.03%  │           ││     │  0x00007f94ad2b5bd4: test   %r10d,%r10d
                  │           ││     ╰  0x00007f94ad2b5bd7: je     0x00007f94ad2b5ad1  ;*invokeinterface get
                  │           ││                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@28 (line 1230)
  0.07%    0.07%  │           ↘│        0x00007f94ad2b5bdd: mov    0x8(%r12,%r10,8),%r11d
  0.07%    0.06%  │            │        0x00007f94ad2b5be2: cmp    $0xf800b1b8,%r11d  ;   {metadata(&apos;java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry&apos;)}
                  │            │        0x00007f94ad2b5be9: jne    0x00007f94ad2b65a9
  0.08%    0.06%  │            │        0x00007f94ad2b5bef: shl    $0x3,%r10          ;*checkcast
                  │            │                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@33 (line 1230)
  0.01%    0.02%  │            │        0x00007f94ad2b5bf3: mov    0xc(%r10),%r10d    ;*invokevirtual get
                  │            │                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@42 (line 1232)
  0.08%    0.13%  │            │        0x00007f94ad2b5bf7: test   %r10d,%r10d
                  │            │        0x00007f94ad2b5bfa: je     0x00007f94ad2b5ead  ;*ifnull
                  │            │                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@47 (line 1233)
  0.04%    0.10%  │            │        0x00007f94ad2b5c00: lea    (%r12,%r10,8),%rax  ;*invokevirtual poll
                  │            │                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
                  │            │                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
  0.06%    0.08%  │            ↘        0x00007f94ad2b5c04: add    $0x50,%rsp
  0.00%    0.02%  │                     0x00007f94ad2b5c08: pop    %rbp
  0.07%    0.11%  │                     0x00007f94ad2b5c09: test   %eax,0x18b043f1(%rip)        # 0x00007f94c5dba000
                  │                                                                   ;   {poll_return}
  0.04%    0.08%  │                     0x00007f94ad2b5c0f: retq   
                  ↘                     0x00007f94ad2b5c10: mov    0xc(%r12,%r10,8),%r9d  ;*getfield lock
                                                                                      ; - java.lang.ref.ReferenceQueue::poll@10 (line 107)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
                                        0x00007f94ad2b5c15: test   %r9d,%r9d
                                        0x00007f94ad2b5c18: je     0x00007f94ad2b619f  ;*monitorenter
                                                                                      ; - java.lang.ref.ReferenceQueue::poll@15 (line 107)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements@4 (line 1268)
                                                                                      ; - java.lang.invoke.MethodType$ConcurrentWeakInternSet::get@13 (line 1228)
....................................................................................................
 12.31%   11.33%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.31%   11.33%         C2, level 4  java.lang.invoke.MethodType$ConcurrentWeakInternSet::get, version 744 (1135 bytes) 
  6.00%    6.34%         C2, level 4  caller.Caller::foo, version 765 (1600 bytes) 
  5.56%    5.05%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 751 (1905 bytes) 
  3.56%    1.95%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 (66 bytes) 
  2.73%    2.95%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 (161 bytes) 
  2.67%    2.06%         C2, level 4  caller.Caller::foo, version 765 (636 bytes) 
  2.46%    2.49%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 786 (205 bytes) 
  2.45%    3.07%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 749 (164 bytes) 
  2.42%    2.28%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 (83 bytes) 
  2.35%    3.38%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 692 (512 bytes) 
  2.22%    2.11%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 (200 bytes) 
  2.01%    1.75%         C2, level 4  caller.Caller::foo, version 765 (111 bytes) 
  1.92%    2.10%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 672 (307 bytes) 
  1.66%    1.25%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 (32 bytes) 
  1.41%    1.96%         C2, level 4  java.lang.invoke.MemberName::getInvocationType, version 668 (498 bytes) 
  1.35%    1.52%  libpthread-2.24.so  pthread_getspecific+0x0 (58 bytes) 
  1.25%    1.98%         C2, level 4  java.lang.invoke.DirectMethodHandle::make, version 768 (579 bytes) 
  1.22%    1.00%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 (230 bytes) 
  1.19%    1.91%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 641 (257 bytes) 
  1.19%    0.86%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 672 (121 bytes) 
 42.07%   42.65%  <...other 627 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 32.96%   31.61%         C1, level 3  sun.reflect.ClassFileAssembler::incStack, version 848 
 12.31%   11.33%         C2, level 4  java.lang.invoke.MethodType$ConcurrentWeakInternSet::get, version 744 
 11.74%   11.49%         C2, level 4  caller.Caller::foo, version 765 
  5.77%    5.20%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 751 
  4.84%    6.65%         C2, level 4  java.lang.invoke.DirectMethodHandle::make, version 768 
  3.60%    3.06%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 672 
  3.03%    3.48%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 692 
  3.00%    2.15%   [kernel.kallsyms]  [unknown] 
  2.74%    3.41%         C2, level 4  java.lang.invoke.MemberName::getInvocationType, version 668 
  2.46%    2.49%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 786 
  2.45%    3.07%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 749 
  1.35%    1.52%  libpthread-2.24.so  pthread_getspecific+0x0 
  1.28%    1.73%         C2, level 4  java.lang.invoke.DirectMethodHandle::preparedLambdaForm, version 777 
  1.19%    1.91%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 641 
  0.83%    0.04%        runtime stub  StubRoutines::oop_disjoint_arraycopy 
  0.80%    0.43%    Unknown, level 0  java.lang.invoke.MethodHandleNatives::init, version 586 
  0.74%    0.67%         C2, level 4  ru.spbau.mit.protocols.benchmarks.testclassesB.FooImplB::bar, version 697 
  0.73%    0.68%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches::indyInterfaceImpl, version 736 
  0.69%    0.67%         C2, level 4  ru.spbau.mit.protocols.benchmarks.testclassesA.FooImplA::bar, version 696 
  0.69%    0.94%         C2, level 4  java.lang.invoke.LambdaForm$DMH::invokeStatic_L4_L, version 640 
  6.81%    7.35%  <...other 79 warm methods...>
....................................................................................................
100.00%   99.88%  <totals>

....[Distribution by Source]........................................................................
 57.37%   60.38%         C2, level 4
 33.06%   31.63%         C1, level 3
  3.00%    2.15%   [kernel.kallsyms]
  2.80%    2.83%    Unknown, level 0
  1.73%    1.12%        runtime stub
  1.37%    1.53%  libpthread-2.24.so
  0.48%    0.31%        libc-2.24.so
  0.15%    0.04%         C1, level 1
  0.03%    0.00%         interpreter
  0.00%               perf-26854.map
....................................................................................................
100.00%   99.99%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.indyInterfaceLambda

# Run progress: 75.00% complete, ETA 00:03:34
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 15459276.154 ns/op
# Warmup Iteration   2: 1152207.675 ns/op
# Warmup Iteration   3: 377921.841 ns/op
# Warmup Iteration   4: 378763.479 ns/op
# Warmup Iteration   5: 383927.359 ns/op
# Warmup Iteration   6: 417707.518 ns/op
# Warmup Iteration   7: 409986.014 ns/op
# Warmup Iteration   8: 386516.527 ns/op
# Warmup Iteration   9: 434298.875 ns/op
# Warmup Iteration  10: 369619.204 ns/op
# Warmup Iteration  11: 378250.338 ns/op
# Warmup Iteration  12: 363111.895 ns/op
# Warmup Iteration  13: 385249.616 ns/op
# Warmup Iteration  14: 360766.903 ns/op
# Warmup Iteration  15: 409838.362 ns/op
# Warmup Iteration  16: 357463.251 ns/op
# Warmup Iteration  17: 374872.641 ns/op
# Warmup Iteration  18: 357647.751 ns/op
# Warmup Iteration  19: 373086.103 ns/op
# Warmup Iteration  20: 391444.530 ns/op
Iteration   1: 407894.963 ns/op
Iteration   2: 359657.814 ns/op
Iteration   3: 380251.260 ns/op
Iteration   4: 353437.595 ns/op
Iteration   5: 368923.803 ns/op
Iteration   6: 373965.386 ns/op
Iteration   7: 366446.530 ns/op
Iteration   8: 381648.714 ns/op
Iteration   9: 363306.640 ns/op
Iteration  10: 383494.984 ns/op
Iteration  11: 355652.929 ns/op
Iteration  12: 380575.115 ns/op
Iteration  13: 360905.158 ns/op
Iteration  14: 416553.400 ns/op
Iteration  15: 381878.958 ns/op
Iteration  16: 406950.465 ns/op
Iteration  17: 365882.787 ns/op
Iteration  18: 389050.278 ns/op
Iteration  19: 389568.215 ns/op
Iteration  20: 393903.121 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "indyInterfaceLambda":
  378997.406 ±(99.9%) 15563.785 ns/op [Average]
  (min, avg, max) = (353437.595, 378997.406, 416553.400), stdev = 17923.278
  CI (99.9%): [363433.620, 394561.191] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 237143 total address lines.
Perf output processed (skipped 20.154 seconds):
 Column 1: cycles (22063 events)
 Column 2: instructions (21856 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  8.53%    7.53%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 747 (639 bytes) 
  5.92%    5.87%         C2, level 4  java.util.concurrent.ConcurrentHashMap::get, version 770 (842 bytes) 
  4.24%    4.33%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 757 (1920 bytes) 
  4.07%    3.34%         C2, level 4  caller.Caller::foo, version 753 (1105 bytes) 
  3.35%    3.12%         C2, level 4  java.lang.Class::getDeclaredMethod, version 755 (717 bytes) 
  3.07%    1.67%           libjvm.so  _ZN7Monitor6unlockEv+0x0 (56 bytes) 
  2.37%    1.58%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x0 (201 bytes) 
  2.22%    2.53%         C2, level 4  caller.Caller::foo, version 753 (830 bytes) 
  2.20%    1.97%           libjvm.so  _ZN7Monitor4lockEv+0x0 (83 bytes) 
  2.06%    2.26%           libjvm.so  _ZN14JNIHandleBlock12weak_oops_doEP17BoolObjectClosureP10OopClosure+0x28 (161 bytes) 
  1.94%    2.23%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 751 (164 bytes) 
  1.80%    2.83%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 766 (519 bytes) 
  1.71%    1.94%           libjvm.so  _ZNK8CodeHeap10find_startEPv+0x0 (91 bytes) 
  1.69%    2.04%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x0 (179 bytes) 
  1.64%    1.38%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x1a0 (236 bytes) 
  1.47%    1.83%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 665 (294 bytes) 
  1.46%    1.53%           libjvm.so  _ZN12vframeStreamC1EP10JavaThreadb+0x0 (416 bytes) 
  1.45%    1.06%           libjvm.so  _ZN16PSIsAliveClosure11do_object_bEP7oopDesc+0x0 (32 bytes) 
  1.32%    1.64%           libjvm.so  _ZN16java_lang_String17as_unicode_stringEP7oopDescRiP6Thread+0x0 (246 bytes) 
  1.13%    1.78%         C2, level 4  java.lang.invoke.BoundMethodHandle$Species_LL::make, version 635 (257 bytes) 
 46.34%   47.55%  <...other 540 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 10.30%   10.45%         C2, level 4  caller.Caller::foo, version 753 
  8.53%    7.53%         C2, level 4  java.lang.invoke.MethodType::makeImpl, version 747 
  5.92%    5.87%         C2, level 4  java.util.concurrent.ConcurrentHashMap::get, version 770 
  4.42%    4.58%         C2, level 4  java.lang.invoke.MethodHandleImpl::makePairwiseConvertByEditor, version 757 
  3.88%    3.76%         C2, level 4  java.lang.Class::getDeclaredMethod, version 755 
  3.07%    1.67%           libjvm.so  _ZN7Monitor6unlockEv+0x0 
  2.37%    1.58%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x0 
  2.33%    2.96%         C2, level 4  java.lang.invoke.LambdaFormEditor::bindArgumentL, version 766 
  2.33%    2.49%         C2, level 4  java.lang.invoke.MethodHandleImpl::computeValueConversions, version 665 
  2.20%    2.87%         C2, level 4  java.lang.invoke.MemberName::getInvocationType, version 657 
  2.20%    1.97%           libjvm.so  _ZN7Monitor4lockEv+0x0 
  2.06%    2.26%           libjvm.so  _ZN14JNIHandleBlock12weak_oops_doEP17BoolObjectClosureP10OopClosure+0x28 
  2.05%    1.14%   [kernel.kallsyms]  [unknown] 
  1.94%    2.23%         C2, level 4  java.lang.invoke.DelegatingMethodHandle::makeReinvokerForm, version 751 
  1.71%    1.94%           libjvm.so  _ZNK8CodeHeap10find_startEPv+0x0 
  1.69%    2.04%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x0 
  1.64%    1.38%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x1a0 
  1.46%    1.53%           libjvm.so  _ZN12vframeStreamC1EP10JavaThreadb+0x0 
  1.45%    1.06%           libjvm.so  _ZN16PSIsAliveClosure11do_object_bEP7oopDesc+0x0 
  1.32%    1.64%           libjvm.so  _ZN16java_lang_String17as_unicode_stringEP7oopDescRiP6Thread+0x0 
 37.10%   38.82%  <...other 223 warm methods...>
....................................................................................................
 99.99%   99.78%  <totals>

....[Distribution by Source]........................................................................
 48.51%   50.08%         C2, level 4
 43.63%   43.34%           libjvm.so
  2.81%    3.13%    Unknown, level 0
  2.05%    1.14%   [kernel.kallsyms]
  1.34%    0.85%        runtime stub
  1.00%    0.99%  libpthread-2.24.so
  0.42%    0.26%        libc-2.24.so
  0.11%    0.14%          libjava.so
  0.10%    0.07%         C1, level 3
  0.02%                  interpreter
  0.00%                       [vdso]
....................................................................................................
 99.99%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.reflectChild

# Run progress: 80.00% complete, ETA 00:02:51
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 87575.634 ns/op
# Warmup Iteration   2: 64813.376 ns/op
# Warmup Iteration   3: 63341.443 ns/op
# Warmup Iteration   4: 62288.841 ns/op
# Warmup Iteration   5: 62204.461 ns/op
# Warmup Iteration   6: 63868.934 ns/op
# Warmup Iteration   7: 62176.368 ns/op
# Warmup Iteration   8: 64486.952 ns/op
# Warmup Iteration   9: 64015.737 ns/op
# Warmup Iteration  10: 65246.432 ns/op
# Warmup Iteration  11: 63788.193 ns/op
# Warmup Iteration  12: 62831.171 ns/op
# Warmup Iteration  13: 63328.027 ns/op
# Warmup Iteration  14: 62109.109 ns/op
# Warmup Iteration  15: 64000.251 ns/op
# Warmup Iteration  16: 66073.284 ns/op
# Warmup Iteration  17: 63301.304 ns/op
# Warmup Iteration  18: 63660.538 ns/op
# Warmup Iteration  19: 62406.358 ns/op
# Warmup Iteration  20: 62728.333 ns/op
Iteration   1: 62081.772 ns/op
Iteration   2: 62365.833 ns/op
Iteration   3: 63480.983 ns/op
Iteration   4: 63017.877 ns/op
Iteration   5: 63236.085 ns/op
Iteration   6: 62409.861 ns/op
Iteration   7: 63862.168 ns/op
Iteration   8: 64440.757 ns/op
Iteration   9: 66754.429 ns/op
Iteration  10: 65515.539 ns/op
Iteration  11: 65857.852 ns/op
Iteration  12: 64715.916 ns/op
Iteration  13: 64281.456 ns/op
Iteration  14: 65092.178 ns/op
Iteration  15: 63417.113 ns/op
Iteration  16: 65986.866 ns/op
Iteration  17: 64060.617 ns/op
Iteration  18: 66359.169 ns/op
Iteration  19: 65346.652 ns/op
Iteration  20: 65465.267 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectChild":
  64387.420 ±(99.9%) 1209.229 ns/op [Average]
  (min, avg, max) = (62081.772, 64387.420, 66754.429), stdev = 1392.550
  CI (99.9%): [63178.190, 65596.649] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 169942 total address lines.
Perf output processed (skipped 20.126 seconds):
 Column 1: cycles (22688 events)
 Column 2: instructions (22321 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, caller.Caller::reflectFoo, version 536 (1710 bytes) 

 <region is too big to display, has 1004 lines, but threshold is 1000>
....................................................................................................
 44.04%   37.23%  <total for region 1>

....[Hottest Regions]...............................................................................
 44.04%   37.23%         C2, level 4  caller.Caller::reflectFoo, version 536 (1710 bytes) 
  8.93%   10.75%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x0 (216 bytes) 
  4.92%    7.03%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (246 bytes) 
  4.03%    1.98%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (224 bytes) 
  3.26%    4.32%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x0 (230 bytes) 
  3.18%    2.11%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectChild_jmhTest::reflectChild_avgt_jmhStub, version 571 (221 bytes) 
  2.98%    4.39%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (163 bytes) 
  2.36%    1.01%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (9 bytes) 
  2.17%    1.71%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 507 (51 bytes) 
  1.77%    2.23%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (124 bytes) 
  1.64%    2.07%  libpthread-2.24.so  pthread_getspecific+0x0 (53 bytes) 
  1.54%    1.56%   [kernel.kallsyms]  [unknown] (5 bytes) 
  1.50%    2.12%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (113 bytes) 
  1.27%    1.89%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (58 bytes) 
  1.11%    1.77%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (42 bytes) 
  1.08%    1.38%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (76 bytes) 
  1.03%    1.22%        runtime stub  StubRoutines::jlong_disjoint_arraycopy (46 bytes) 
  0.96%    1.40%    Unknown, level 0  java.lang.String::intern, version 247 (63 bytes) 
  0.94%    0.93%        runtime stub  StubRoutines::jlong_disjoint_arraycopy (17 bytes) 
  0.86%    1.18%    Unknown, level 0  java.lang.String::intern, version 247 (69 bytes) 
 10.43%   11.71%  <...other 429 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 44.05%   37.23%         C2, level 4  caller.Caller::reflectFoo, version 536 
 26.79%   31.28%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 
  8.93%   10.75%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x0 
  3.26%    4.32%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x0 
  3.18%    2.11%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectChild_jmhTest::reflectChild_avgt_jmhStub, version 571 
  2.77%    4.09%    Unknown, level 0  java.lang.String::intern, version 247 
  2.60%    2.62%   [kernel.kallsyms]  [unknown] 
  2.17%    1.71%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 507 
  1.97%    2.15%        runtime stub  StubRoutines::jlong_disjoint_arraycopy 
  1.64%    2.07%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.73%    0.11%         C1, level 1  java.lang.Object::&lt;init&gt;, version 9 
  0.46%    0.28%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x1a5 
  0.46%    0.06%        runtime stub  StubRoutines::multiplyToLen 
  0.38%    0.75%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x140 
  0.17%    0.22%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0x50 
  0.09%                    libjvm.so  _ZN22ParallelTaskTerminator17offer_terminationEP20TerminatorTerminator+0xc8 
  0.02%    0.00%           libjvm.so  _ZN9xmlStream10write_textEPKcm+0x2b 
  0.02%               hsdis-amd64.so  oappend+0x28 
  0.02%    0.00%        libc-2.24.so  __GI___libc_write+0x2d 
  0.01%                 libc-2.24.so  __libc_disable_asynccancel+0x22 
  0.27%    0.09%  <...other 55 warm methods...>
....................................................................................................
100.00%   99.85%  <totals>

....[Distribution by Source]........................................................................
 49.40%   41.06%         C2, level 4
 26.79%   31.28%         C1, level 3
 13.36%   16.35%           libjvm.so
  2.77%    4.09%    Unknown, level 0
  2.60%    2.62%   [kernel.kallsyms]
  2.42%    2.20%        runtime stub
  1.68%    2.08%  libpthread-2.24.so
  0.73%    0.11%         C1, level 1
  0.14%    0.15%        libc-2.24.so
  0.06%    0.03%      hsdis-amd64.so
  0.04%    0.01%         interpreter
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.reflectClass

# Run progress: 85.00% complete, ETA 00:02:08
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 80126.871 ns/op
# Warmup Iteration   2: 61479.075 ns/op
# Warmup Iteration   3: 64027.576 ns/op
# Warmup Iteration   4: 59920.700 ns/op
# Warmup Iteration   5: 58697.010 ns/op
# Warmup Iteration   6: 58725.837 ns/op
# Warmup Iteration   7: 59010.521 ns/op
# Warmup Iteration   8: 59605.480 ns/op
# Warmup Iteration   9: 58957.471 ns/op
# Warmup Iteration  10: 59933.884 ns/op
# Warmup Iteration  11: 58249.539 ns/op
# Warmup Iteration  12: 59089.308 ns/op
# Warmup Iteration  13: 59317.315 ns/op
# Warmup Iteration  14: 61053.065 ns/op
# Warmup Iteration  15: 59464.284 ns/op
# Warmup Iteration  16: 59267.255 ns/op
# Warmup Iteration  17: 58632.938 ns/op
# Warmup Iteration  18: 58089.276 ns/op
# Warmup Iteration  19: 58990.980 ns/op
# Warmup Iteration  20: 59404.488 ns/op
Iteration   1: 59272.900 ns/op
Iteration   2: 58540.868 ns/op
Iteration   3: 60206.249 ns/op
Iteration   4: 58574.484 ns/op
Iteration   5: 59079.998 ns/op
Iteration   6: 64981.912 ns/op
Iteration   7: 58473.209 ns/op
Iteration   8: 58465.603 ns/op
Iteration   9: 58760.004 ns/op
Iteration  10: 57892.084 ns/op
Iteration  11: 57678.584 ns/op
Iteration  12: 60021.058 ns/op
Iteration  13: 57842.039 ns/op
Iteration  14: 58134.923 ns/op
Iteration  15: 58644.227 ns/op
Iteration  16: 58236.502 ns/op
Iteration  17: 58909.626 ns/op
Iteration  18: 58487.334 ns/op
Iteration  19: 58953.360 ns/op
Iteration  20: 58804.162 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectClass":
  58997.956 ±(99.9%) 1343.156 ns/op [Average]
  (min, avg, max) = (57678.584, 58997.956, 64981.912), stdev = 1546.781
  CI (99.9%): [57654.800, 60341.112] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 170446 total address lines.
Perf output processed (skipped 20.140 seconds):
 Column 1: cycles (22879 events)
 Column 2: instructions (22623 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, caller.Caller::reflectFoo, version 534 (1710 bytes) 

 <region is too big to display, has 1014 lines, but threshold is 1000>
....................................................................................................
 43.26%   36.45%  <total for region 1>

....[Hottest Regions]...............................................................................
 43.26%   36.45%         C2, level 4  caller.Caller::reflectFoo, version 534 (1710 bytes) 
  9.68%   10.69%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x0 (201 bytes) 
  4.62%    6.47%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (246 bytes) 
  3.83%    1.76%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (224 bytes) 
  3.62%    3.16%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectClass_jmhTest::reflectClass_avgt_jmhStub, version 574 (184 bytes) 
  3.43%    4.08%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x0 (230 bytes) 
  2.69%    4.08%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (158 bytes) 
  2.57%    2.19%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 508 (51 bytes) 
  2.35%    1.30%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (9 bytes) 
  1.70%    2.20%  libpthread-2.24.so  pthread_getspecific+0x0 (53 bytes) 
  1.68%    1.69%   [kernel.kallsyms]  [unknown] (5 bytes) 
  1.47%    2.00%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (124 bytes) 
  1.45%    1.96%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (113 bytes) 
  1.24%    1.68%    Unknown, level 0  java.lang.String::intern, version 233 (63 bytes) 
  1.12%    1.94%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (58 bytes) 
  1.00%    1.17%        runtime stub  StubRoutines::jlong_disjoint_arraycopy (46 bytes) 
  1.00%    1.85%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (42 bytes) 
  0.91%    1.34%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (75 bytes) 
  0.91%    1.12%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (34 bytes) 
  0.90%    1.17%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 (26 bytes) 
 10.56%   11.71%  <...other 388 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 43.26%   36.45%         C2, level 4  caller.Caller::reflectFoo, version 534 
 25.41%   29.96%         C1, level 3  java.io.DataOutputStream::writeUTF, version 616 
  9.68%   10.69%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x0 
  3.63%    3.16%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectClass_jmhTest::reflectClass_avgt_jmhStub, version 574 
  3.43%    4.08%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x0 
  3.08%    4.42%    Unknown, level 0  java.lang.String::intern, version 233 
  2.77%    2.84%   [kernel.kallsyms]  [unknown] 
  2.57%    2.19%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 508 
  1.74%    2.29%        runtime stub  StubRoutines::jlong_disjoint_arraycopy 
  1.70%    2.20%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.76%    0.18%         C1, level 1  java.lang.Object::&lt;init&gt;, version 9 
  0.58%    0.74%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x140 
  0.57%    0.11%         C1, level 3  java.lang.String::equals, version 1 
  0.38%    0.36%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x1a5 
  0.08%    0.01%           libjvm.so  _ZN22ParallelTaskTerminator17offer_terminationEP20TerminatorTerminator+0xc8 
  0.08%    0.09%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0x50 
  0.02%    0.03%           libjvm.so  _ZN11StringTable17unlink_or_oops_doEP17BoolObjectClosureP10OopClosurePiS4_+0xa2 
  0.02%    0.01%        libc-2.24.so  __strchrnul+0x1d 
  0.02%    0.01%        libc-2.24.so  strlen+0x26 
  0.01%                  interpreter  invokevirtual  182 invokevirtual  
  0.22%    0.08%  <...other 45 warm methods...>
....................................................................................................
100.00%   99.89%  <totals>

....[Distribution by Source]........................................................................
 49.46%   41.79%         C2, level 4
 25.98%   30.08%         C1, level 3
 14.28%   16.04%           libjvm.so
  3.08%    4.42%    Unknown, level 0
  2.77%    2.84%   [kernel.kallsyms]
  1.74%    2.29%        runtime stub
  1.73%    2.22%  libpthread-2.24.so
  0.76%    0.18%         C1, level 1
  0.17%    0.14%        libc-2.24.so
  0.02%                  interpreter
  0.00%               perf-27065.map
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.reflectInterfaceImpl

# Run progress: 90.00% complete, ETA 00:01:25
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 73517.043 ns/op
# Warmup Iteration   2: 61526.576 ns/op
# Warmup Iteration   3: 56606.276 ns/op
# Warmup Iteration   4: 56447.048 ns/op
# Warmup Iteration   5: 57712.987 ns/op
# Warmup Iteration   6: 57220.605 ns/op
# Warmup Iteration   7: 56662.178 ns/op
# Warmup Iteration   8: 56177.228 ns/op
# Warmup Iteration   9: 56484.196 ns/op
# Warmup Iteration  10: 56126.567 ns/op
# Warmup Iteration  11: 59099.484 ns/op
# Warmup Iteration  12: 56344.412 ns/op
# Warmup Iteration  13: 56433.277 ns/op
# Warmup Iteration  14: 56022.983 ns/op
# Warmup Iteration  15: 55990.429 ns/op
# Warmup Iteration  16: 57741.473 ns/op
# Warmup Iteration  17: 56456.861 ns/op
# Warmup Iteration  18: 58179.221 ns/op
# Warmup Iteration  19: 59711.651 ns/op
# Warmup Iteration  20: 58699.229 ns/op
Iteration   1: 59221.409 ns/op
Iteration   2: 59426.565 ns/op
Iteration   3: 60624.859 ns/op
Iteration   4: 56287.136 ns/op
Iteration   5: 58287.308 ns/op
Iteration   6: 57151.730 ns/op
Iteration   7: 59259.450 ns/op
Iteration   8: 57511.325 ns/op
Iteration   9: 58179.171 ns/op
Iteration  10: 59758.628 ns/op
Iteration  11: 58024.516 ns/op
Iteration  12: 58624.120 ns/op
Iteration  13: 57233.616 ns/op
Iteration  14: 57063.416 ns/op
Iteration  15: 61613.741 ns/op
Iteration  16: 57276.780 ns/op
Iteration  17: 56413.569 ns/op
Iteration  18: 56480.371 ns/op
Iteration  19: 56966.843 ns/op
Iteration  20: 56612.838 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectInterfaceImpl":
  58100.870 ±(99.9%) 1293.418 ns/op [Average]
  (min, avg, max) = (56287.136, 58100.870, 61613.741), stdev = 1489.502
  CI (99.9%): [56807.452, 59394.288] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 167556 total address lines.
Perf output processed (skipped 20.137 seconds):
 Column 1: cycles (22327 events)
 Column 2: instructions (22230 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, caller.Caller::reflectFoo, version 516 (1710 bytes) 

 <region is too big to display, has 1014 lines, but threshold is 1000>
....................................................................................................
 45.13%   37.14%  <total for region 1>

....[Hottest Regions]...............................................................................
 45.13%   37.14%         C2, level 4  caller.Caller::reflectFoo, version 516 (1710 bytes) 
  8.89%   10.93%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x1 (200 bytes) 
  4.97%    6.49%           libjvm.so  _ZN16java_lang_String17as_unicode_stringEP7oopDescRiP6Thread+0x0 (246 bytes) 
  3.72%    1.73%           libjvm.so  _ZN16java_lang_String6equalsEP7oopDescPti+0x0 (224 bytes) 
  3.70%    3.00%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub, version 557 (238 bytes) 
  3.16%    4.21%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x0 (230 bytes) 
  2.91%    2.03%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 491 (51 bytes) 
  2.70%    4.25%           libjvm.so  JVM_InternString+0x0 (163 bytes) 
  1.93%    1.26%           libjvm.so  SpinPause+0x0 (9 bytes) 
  1.67%    2.43%  libpthread-2.24.so  pthread_getspecific+0x0 (53 bytes) 
  1.57%    2.06%           libjvm.so  _ZN21ThreadStateTransition22transition_from_nativeEP10JavaThread15JavaThreadState.constprop.151+0x0 (124 bytes) 
  1.27%    1.93%           libjvm.so  _ZN21ThreadStateTransition20transition_and_fenceEP10JavaThread15JavaThreadStateS2_.constprop.152+0x0 (115 bytes) 
  1.25%    1.44%        runtime stub  StubRoutines::jlong_disjoint_arraycopy (46 bytes) 
  1.25%    1.33%           libjvm.so  _ZN10HandleMark15pop_and_restoreEv+0x0 (76 bytes) 
  1.12%    1.69%           libjvm.so  _Z23resource_allocate_bytesmN17AllocFailStrategy13AllocFailEnumE+0x0 (58 bytes) 
  1.03%    1.42%    Unknown, level 0  java.lang.String::intern, version 231 (63 bytes) 
  0.98%    1.96%           libjvm.so  _ZN14JNIHandleBlock15allocate_handleEP7oopDesc+0x0 (42 bytes) 
  0.93%    1.12%    Unknown, level 0  java.lang.String::intern, version 231 (87 bytes) 
  0.89%    0.89%        runtime stub  StubRoutines::jlong_disjoint_arraycopy (17 bytes) 
  0.86%    0.85%   [kernel.kallsyms]  [unknown] (5 bytes) 
 10.10%   11.83%  <...other 388 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 45.13%   37.14%         C2, level 4  caller.Caller::reflectFoo, version 516 
  8.89%   10.93%           libjvm.so  _ZN11StringTable6internE6HandlePtiP6Thread+0x1 
  4.97%    6.49%           libjvm.so  _ZN16java_lang_String17as_unicode_stringEP7oopDescRiP6Thread+0x0 
  3.72%    1.73%           libjvm.so  _ZN16java_lang_String6equalsEP7oopDescPti+0x0 
  3.70%    3.00%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectInterfaceImpl_jmhTest::reflectInterfaceImpl_avgt_jmhStub, version 557 
  3.16%    4.21%           libjvm.so  _ZN11StringTable6internEP7oopDescP6Thread+0x0 
  2.99%    3.99%    Unknown, level 0  java.lang.String::intern, version 231 
  2.91%    2.03%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 491 
  2.70%    4.25%           libjvm.so  JVM_InternString+0x0 
  2.14%    2.33%        runtime stub  StubRoutines::jlong_disjoint_arraycopy 
  1.93%    1.26%           libjvm.so  SpinPause+0x0 
  1.78%    2.01%   [kernel.kallsyms]  [unknown] 
  1.67%    2.43%  libpthread-2.24.so  pthread_getspecific+0x0 
  1.57%    2.06%           libjvm.so  _ZN21ThreadStateTransition22transition_from_nativeEP10JavaThread15JavaThreadState.constprop.151+0x0 
  1.27%    1.93%           libjvm.so  _ZN21ThreadStateTransition20transition_and_fenceEP10JavaThread15JavaThreadStateS2_.constprop.152+0x0 
  1.25%    1.33%           libjvm.so  _ZN10HandleMark15pop_and_restoreEv+0x0 
  1.12%    1.69%           libjvm.so  _Z23resource_allocate_bytesmN17AllocFailStrategy13AllocFailEnumE+0x0 
  0.98%    1.96%           libjvm.so  _ZN14JNIHandleBlock15allocate_handleEP7oopDesc+0x0 
  0.86%    1.25%           libjvm.so  _ZN32JvmtiVMObjectAllocEventCollectorD1Ev+0x0 
  0.81%    0.16%         C1, level 1  java.lang.Object::&lt;init&gt;, version 9 
  6.49%    7.34%  <...other 109 warm methods...>
....................................................................................................
100.00%   99.53%  <totals>

....[Distribution by Source]........................................................................
 51.73%   42.18%         C2, level 4
 37.76%   46.05%           libjvm.so
  2.99%    3.99%    Unknown, level 0
  2.67%    2.46%        runtime stub
  1.78%    2.01%   [kernel.kallsyms]
  1.67%    2.46%  libpthread-2.24.so
  0.81%    0.16%         C1, level 1
  0.39%    0.53%         C1, level 3
  0.14%    0.14%        libc-2.24.so
  0.04%    0.01%      hsdis-amd64.so
  0.02%                  interpreter
  0.00%                             
....................................................................................................
100.00%  100.00%  <totals>



# JMH 1.16 (released 61 days ago)
# VM version: JDK 1.8.0_111, VM 25.111-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:LogFile=tests/perf_log_Mon Jan 09 17:39:06 MSK 2017_.xml -XX:+PrintAssembly -XX:+PrintInterpreter -XX:+PrintNMethods -XX:+PrintNativeNMethods -XX:+PrintSignatureHandlers -XX:+PrintAdapterHandlers -XX:+PrintStubCode -XX:+PrintCompilation -XX:+PrintInlining -XX:+TraceClassLoading -XX:PrintAssemblyOptions=syntax
# Warmup: 20 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches.reflectInterfaceLambda

# Run progress: 95.00% complete, ETA 00:00:42
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 314222.008 ns/op
# Warmup Iteration   2: 288117.362 ns/op
# Warmup Iteration   3: 275805.199 ns/op
# Warmup Iteration   4: 280439.392 ns/op
# Warmup Iteration   5: 281076.342 ns/op
# Warmup Iteration   6: 282675.937 ns/op
# Warmup Iteration   7: 279482.501 ns/op
# Warmup Iteration   8: 275947.018 ns/op
# Warmup Iteration   9: 275417.918 ns/op
# Warmup Iteration  10: 295642.738 ns/op
# Warmup Iteration  11: 274624.628 ns/op
# Warmup Iteration  12: 275282.895 ns/op
# Warmup Iteration  13: 275500.895 ns/op
# Warmup Iteration  14: 275891.487 ns/op
# Warmup Iteration  15: 284975.714 ns/op
# Warmup Iteration  16: 279467.165 ns/op
# Warmup Iteration  17: 277794.943 ns/op
# Warmup Iteration  18: 281436.302 ns/op
# Warmup Iteration  19: 283110.122 ns/op
# Warmup Iteration  20: 287946.248 ns/op
Iteration   1: 285630.005 ns/op
Iteration   2: 286167.542 ns/op
Iteration   3: 293127.563 ns/op
Iteration   4: 278827.806 ns/op
Iteration   5: 276839.242 ns/op
Iteration   6: 275567.409 ns/op
Iteration   7: 279385.715 ns/op
Iteration   8: 293371.977 ns/op
Iteration   9: 292139.569 ns/op
Iteration  10: 275533.739 ns/op
Iteration  11: 276754.055 ns/op
Iteration  12: 286910.908 ns/op
Iteration  13: 280087.589 ns/op
Iteration  14: 280801.134 ns/op
Iteration  15: 284837.776 ns/op
Iteration  16: 291117.303 ns/op
Iteration  17: 285038.607 ns/op
Iteration  18: 284624.393 ns/op
Iteration  19: 289630.420 ns/op
Iteration  20: 303615.109 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "reflectInterfaceLambda":
  285000.393 ±(99.9%) 6370.635 ns/op [Average]
  (min, avg, max) = (275533.739, 285000.393, 303615.109), stdev = 7336.432
  CI (99.9%): [278629.758, 291371.028] (assumes normal distribution)

Secondary result "·asm":
PrintAssembly processed: 176325 total address lines.
Perf output processed (skipped 20.149 seconds):
 Column 1: cycles (22690 events)
 Column 2: instructions (22364 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  4.32%    4.06%         C2, level 4  java.lang.Class::getDeclaredMethod, version 568 (715 bytes) 
  3.82%    2.20%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub, version 616 (517 bytes) 
  3.69%    1.80%         C2, level 4  caller.Caller::reflectFoo, version 536 (692 bytes) 
  3.69%    3.91%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (462 bytes) 
  2.72%    2.27%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (205 bytes) 
  2.49%    1.95%         C2, level 4  caller.Caller::reflectFoo, version 536 (132 bytes) 
  2.43%    2.23%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (280 bytes) 
  2.33%    2.07%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (91 bytes) 
  2.29%    2.40%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (305 bytes) 
  2.23%    2.98%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (460 bytes) 
  2.19%    3.26%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (193 bytes) 
  2.14%    2.32%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x0 (179 bytes) 
  2.04%    1.69%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (278 bytes) 
  1.93%    2.37%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (282 bytes) 
  1.93%    0.77%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (9 bytes) 
  1.81%    1.78%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x1a0 (236 bytes) 
  1.65%    1.84%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (416 bytes) 
  1.60%    1.61%   [kernel.kallsyms]  [unknown] (5 bytes) 
  1.59%    1.85%        runtime stub  StubRoutines::call_stub (209 bytes) 
  1.56%    1.10%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 (38 bytes) 
 51.56%   55.54%  <...other 639 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 67.96%   71.68%         C1, level 3  java.util.concurrent.locks.ReentrantLock::unlock, version 624 
  6.19%    3.75%         C2, level 4  caller.Caller::reflectFoo, version 536 
  5.28%    3.04%         C2, level 4  ru.spbau.mit.protocols.benchmarks.generated.ProtocolsBenchmarkBatches_reflectInterfaceLambda_jmhTest::reflectInterfaceLambda_avgt_jmhStub, version 616 
  4.94%    4.92%         C2, level 4  java.lang.Class::getDeclaredMethod, version 568 
  2.96%    2.96%   [kernel.kallsyms]  [unknown] 
  2.14%    2.32%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x0 
  1.81%    1.78%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x1a0 
  1.71%    1.87%    Unknown, level 0  sun.reflect.NativeMethodAccessorImpl::invoke0, version 482 
  1.59%    1.85%        runtime stub  StubRoutines::call_stub 
  0.72%    0.59%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches$$Lambda$9::bar, version 521 
  0.72%    0.73%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches$$Lambda$10::bar, version 520 
  0.68%    0.65%         C2, level 4  ru.spbau.mit.protocols.benchmarks.ProtocolsBenchmarkBatches::reflectInterfaceLambda, version 527 
  0.68%    0.87%    Unknown, level 0  java.lang.String::intern, version 233 
  0.57%    0.85%    Unknown, level 0  sun.reflect.Reflection::getCallerClass, version 226 
  0.46%    0.25%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 509 
  0.41%    0.40%        runtime stub  StubRoutines::jlong_disjoint_arraycopy 
  0.39%    0.50%  libpthread-2.24.so  pthread_getspecific+0x0 
  0.26%    0.36%      perf-27206.map  [unknown] 
  0.20%    0.34%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0xe2 
  0.03%    0.05%           libjvm.so  _ZN18vframeStreamCommon13security_nextEv+0x34e 
  0.27%    0.12%  <...other 43 warm methods...>
....................................................................................................
 99.99%   99.86%  <totals>

....[Distribution by Source]........................................................................
 67.97%   71.68%         C1, level 3
 19.01%   13.92%         C2, level 4
  4.22%    4.53%           libjvm.so
  2.97%    3.59%    Unknown, level 0
  2.96%    2.96%   [kernel.kallsyms]
  1.99%    2.25%        runtime stub
  0.41%    0.51%  libpthread-2.24.so
  0.26%    0.36%      perf-27206.map
  0.20%    0.19%        libc-2.24.so
  0.00%    0.00%         interpreter
....................................................................................................
 99.99%  100.00%  <totals>



# Run complete. Total time: 00:14:16

Benchmark                                              Mode  Cnt       Score       Error  Units
ProtocolsBenchmark.directChild                         avgt   20       2.575 ±     0.002  ns/op
ProtocolsBenchmark.directChild:·asm                    avgt              NaN                ---
ProtocolsBenchmark.directClass                         avgt   20       2.372 ±     0.073  ns/op
ProtocolsBenchmark.directClass:·asm                    avgt              NaN                ---
ProtocolsBenchmark.directInterfaceImpl                 avgt   20       2.298 ±     0.018  ns/op
ProtocolsBenchmark.directInterfaceImpl:·asm            avgt              NaN                ---
ProtocolsBenchmark.directInterfaceLambda               avgt   20       2.284 ±     0.011  ns/op
ProtocolsBenchmark.directInterfaceLambda:·asm          avgt              NaN                ---
ProtocolsBenchmark.indyChild                           avgt   20       4.939 ±     0.023  ns/op
ProtocolsBenchmark.indyChild:·asm                      avgt              NaN                ---
ProtocolsBenchmark.indyClass                           avgt   20       6.208 ±     0.507  ns/op
ProtocolsBenchmark.indyClass:·asm                      avgt              NaN                ---
ProtocolsBenchmark.indyInterfaceImpl                   avgt   20       5.031 ±     0.162  ns/op
ProtocolsBenchmark.indyInterfaceImpl:·asm              avgt              NaN                ---
ProtocolsBenchmark.indyInterfaceLambda                 avgt   20       5.062 ±     0.115  ns/op
ProtocolsBenchmark.indyInterfaceLambda:·asm            avgt              NaN                ---
ProtocolsBenchmark.reflectChild                        avgt   20       5.167 ±     0.402  ns/op
ProtocolsBenchmark.reflectChild:·asm                   avgt              NaN                ---
ProtocolsBenchmark.reflectClass                        avgt   20       4.769 ±     0.028  ns/op
ProtocolsBenchmark.reflectClass:·asm                   avgt              NaN                ---
ProtocolsBenchmark.reflectInterfaceImpl                avgt   20       4.769 ±     0.057  ns/op
ProtocolsBenchmark.reflectInterfaceImpl:·asm           avgt              NaN                ---
ProtocolsBenchmark.reflectInterfaceLambda              avgt   20     152.047 ±     0.465  ns/op
ProtocolsBenchmark.reflectInterfaceLambda:·asm         avgt              NaN                ---
ProtocolsBenchmarkBatches.indyChild                    avgt   20  293699.708 ± 11478.327  ns/op
ProtocolsBenchmarkBatches.indyChild:·asm               avgt              NaN                ---
ProtocolsBenchmarkBatches.indyClass                    avgt   20  326505.981 ± 22313.583  ns/op
ProtocolsBenchmarkBatches.indyClass:·asm               avgt              NaN                ---
ProtocolsBenchmarkBatches.indyInterfaceImpl            avgt   20  324895.850 ± 16230.224  ns/op
ProtocolsBenchmarkBatches.indyInterfaceImpl:·asm       avgt              NaN                ---
ProtocolsBenchmarkBatches.indyInterfaceLambda          avgt   20  378997.406 ± 15563.785  ns/op
ProtocolsBenchmarkBatches.indyInterfaceLambda:·asm     avgt              NaN                ---
ProtocolsBenchmarkBatches.reflectChild                 avgt   20   64387.420 ±  1209.229  ns/op
ProtocolsBenchmarkBatches.reflectChild:·asm            avgt              NaN                ---
ProtocolsBenchmarkBatches.reflectClass                 avgt   20   58997.956 ±  1343.156  ns/op
ProtocolsBenchmarkBatches.reflectClass:·asm            avgt              NaN                ---
ProtocolsBenchmarkBatches.reflectInterfaceImpl         avgt   20   58100.870 ±  1293.418  ns/op
ProtocolsBenchmarkBatches.reflectInterfaceImpl:·asm    avgt              NaN                ---
ProtocolsBenchmarkBatches.reflectInterfaceLambda       avgt   20  285000.393 ±  6370.635  ns/op
ProtocolsBenchmarkBatches.reflectInterfaceLambda:·asm  avgt              NaN                ---
